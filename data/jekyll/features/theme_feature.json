[
    {
        "feature_file": "theme.feature",
        "scenario": "Generating a new theme scaffold",
        "step_num": 1,
        "step_name": "I run jekyll new-theme my-cool-theme",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Generating a new theme scaffold",
        "step_num": 2,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Generating a new theme scaffold",
        "step_num": 3,
        "step_name": "the my-cool-theme directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Generating a new theme scaffold with a code of conduct",
        "step_num": 1,
        "step_name": "I run jekyll new-theme my-cool-theme --code-of-conduct",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Generating a new theme scaffold with a code of conduct",
        "step_num": 2,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Generating a new theme scaffold with a code of conduct",
        "step_num": 3,
        "step_name": "the my-cool-theme directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Generating a new theme scaffold with a code of conduct",
        "step_num": 4,
        "step_name": "the \"my-cool-theme/CODE_OF_CONDUCT.md\" file should exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with SCSS",
        "step_num": 1,
        "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
        "glue_code": "Given(%r!^I have a configuration file with \"(.*)\" set to \"(.*)\"$!) do |key, value|\n  config = \\\n    if source_dir.join(\"_config.yml\").exist?\n      SafeYAML.load_file(source_dir.join(\"_config.yml\"))\n    else\n      {}\n    end\n  config[key] = SafeYAML.load(value)\n  Jekyll.set_timezone(value) if key == \"timezone\"\n  File.write(\"_config.yml\", YAML.dump(config))\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with SCSS",
        "step_num": 2,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with SCSS",
        "step_num": 3,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with SCSS",
        "step_num": 4,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with SCSS",
        "step_num": 5,
        "step_name": "I should see \".sample {\\n  color: red;\\n}\\n\\n\\/\\*# sourceMappingURL=style.css.map \\*\\/\" in \"_site/assets/style.css\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Overriding a theme with SCSS",
        "step_num": 1,
        "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
        "glue_code": "Given(%r!^I have a configuration file with \"(.*)\" set to \"(.*)\"$!) do |key, value|\n  config = \\\n    if source_dir.join(\"_config.yml\").exist?\n      SafeYAML.load_file(source_dir.join(\"_config.yml\"))\n    else\n      {}\n    end\n  config[key] = SafeYAML.load(value)\n  Jekyll.set_timezone(value) if key == \"timezone\"\n  File.write(\"_config.yml\", YAML.dump(config))\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Overriding a theme with SCSS",
        "step_num": 2,
        "step_name": "I have an assets directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Overriding a theme with SCSS",
        "step_num": 3,
        "step_name": "I have an \"assets/style.scss\" page that contains \"@import 'test-theme-black';\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Overriding a theme with SCSS",
        "step_num": 4,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Overriding a theme with SCSS",
        "step_num": 5,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Overriding a theme with SCSS",
        "step_num": 6,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Overriding a theme with SCSS",
        "step_num": 7,
        "step_name": "I should see \".sample {\\n  color: black;\\n}\\n\\n\\/\\*# sourceMappingURL=style.css.map \\*\\/\" in \"_site/assets/style.css\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with an include",
        "step_num": 1,
        "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
        "glue_code": "Given(%r!^I have a configuration file with \"(.*)\" set to \"(.*)\"$!) do |key, value|\n  config = \\\n    if source_dir.join(\"_config.yml\").exist?\n      SafeYAML.load_file(source_dir.join(\"_config.yml\"))\n    else\n      {}\n    end\n  config[key] = SafeYAML.load(value)\n  Jekyll.set_timezone(value) if key == \"timezone\"\n  File.write(\"_config.yml\", YAML.dump(config))\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with an include",
        "step_num": 2,
        "step_name": "I have an _includes directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with an include",
        "step_num": 3,
        "step_name": "I have an \"_includes/in_project.html\" file that contains \"I'm in the project.\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file that contains \"(.*)\"$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with an include",
        "step_num": 4,
        "step_name": "I have an \"index.html\" page that contains \"{% include in_project.html %} {% include include.html %}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with an include",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with an include",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with an include",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with an include",
        "step_num": 8,
        "step_name": "I should see \"I'm in the project.\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with an include",
        "step_num": 9,
        "step_name": "I should see \"<span class=\\\"sample\\\">include.html from test-theme</span>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme without data",
        "step_num": 1,
        "step_name": "I have a configuration file with \"theme\" set to \"test-theme-skinny\"",
        "glue_code": "Given(%r!^I have a configuration file with \"(.*)\" set to \"(.*)\"$!) do |key, value|\n  config = \\\n    if source_dir.join(\"_config.yml\").exist?\n      SafeYAML.load_file(source_dir.join(\"_config.yml\"))\n    else\n      {}\n    end\n  config[key] = SafeYAML.load(value)\n  Jekyll.set_timezone(value) if key == \"timezone\"\n  File.write(\"_config.yml\", YAML.dump(config))\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme without data",
        "step_num": 2,
        "step_name": "I have a _data directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme without data",
        "step_num": 3,
        "step_name": "I have a \"_data/greetings.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme without data",
        "step_num": 4,
        "step_name": "I have an \"index.html\" page that contains \"{{ site.data.greetings.foo }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme without data",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme without data",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme without data",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme without data",
        "step_num": 8,
        "step_name": "I should see \"Hello! I\u2019m foo. And who are you?\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with data overridden by data in source directory",
        "step_num": 1,
        "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
        "glue_code": "Given(%r!^I have a configuration file with \"(.*)\" set to \"(.*)\"$!) do |key, value|\n  config = \\\n    if source_dir.join(\"_config.yml\").exist?\n      SafeYAML.load_file(source_dir.join(\"_config.yml\"))\n    else\n      {}\n    end\n  config[key] = SafeYAML.load(value)\n  Jekyll.set_timezone(value) if key == \"timezone\"\n  File.write(\"_config.yml\", YAML.dump(config))\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with data overridden by data in source directory",
        "step_num": 2,
        "step_name": "I have a _data directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with data overridden by data in source directory",
        "step_num": 3,
        "step_name": "I have a \"_data/greetings.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with data overridden by data in source directory",
        "step_num": 4,
        "step_name": "I have an \"index.html\" page that contains \"{{ site.data.greetings.foo }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with data overridden by data in source directory",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with data overridden by data in source directory",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with data overridden by data in source directory",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with data overridden by data in source directory",
        "step_num": 8,
        "step_name": "I should see \"Hello! I\u2019m foo. And who are you?\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with data overridden by data in source directory",
        "step_num": 9,
        "step_name": "I should not see \"Hello! I\u2019m bar. What\u2019s up so far?\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with a layout",
        "step_num": 1,
        "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
        "glue_code": "Given(%r!^I have a configuration file with \"(.*)\" set to \"(.*)\"$!) do |key, value|\n  config = \\\n    if source_dir.join(\"_config.yml\").exist?\n      SafeYAML.load_file(source_dir.join(\"_config.yml\"))\n    else\n      {}\n    end\n  config[key] = SafeYAML.load(value)\n  Jekyll.set_timezone(value) if key == \"timezone\"\n  File.write(\"_config.yml\", YAML.dump(config))\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with a layout",
        "step_num": 2,
        "step_name": "I have an _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with a layout",
        "step_num": 3,
        "step_name": "I have an \"_layouts/post.html\" file that contains \"post.html from the project: {{ content }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file that contains \"(.*)\"$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with a layout",
        "step_num": 4,
        "step_name": "I have an \"index.html\" page with layout \"default\" that contains \"I'm content.\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with a layout",
        "step_num": 5,
        "step_name": "I have a \"post.html\" page with layout \"post\" that contains \"I'm more content.\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with a layout",
        "step_num": 6,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with a layout",
        "step_num": 7,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with a layout",
        "step_num": 8,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with a layout",
        "step_num": 9,
        "step_name": "I should see \"default.html from test-theme: I'm content.\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with a layout",
        "step_num": 10,
        "step_name": "I should see \"post.html from the project: I'm more content.\" in \"_site/post.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with assets",
        "step_num": 1,
        "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
        "glue_code": "Given(%r!^I have a configuration file with \"(.*)\" set to \"(.*)\"$!) do |key, value|\n  config = \\\n    if source_dir.join(\"_config.yml\").exist?\n      SafeYAML.load_file(source_dir.join(\"_config.yml\"))\n    else\n      {}\n    end\n  config[key] = SafeYAML.load(value)\n  Jekyll.set_timezone(value) if key == \"timezone\"\n  File.write(\"_config.yml\", YAML.dump(config))\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with assets",
        "step_num": 2,
        "step_name": "I have an assets directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with assets",
        "step_num": 3,
        "step_name": "I have an \"assets/application.coffee\" file that contains \"From your site.\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file that contains \"(.*)\"$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with assets",
        "step_num": 4,
        "step_name": "I have an \"assets/base.js\" file that contains \"From your site.\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file that contains \"(.*)\"$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with assets",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with assets",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with assets",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with assets",
        "step_num": 8,
        "step_name": "I should see \"From your site.\" in \"_site/assets/application.coffee\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with assets",
        "step_num": 9,
        "step_name": "I should see \"From your site.\" in \"_site/assets/base.js\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with *just* layouts",
        "step_num": 1,
        "step_name": "I have a configuration file with \"theme\" set to \"test-theme-skinny\"",
        "glue_code": "Given(%r!^I have a configuration file with \"(.*)\" set to \"(.*)\"$!) do |key, value|\n  config = \\\n    if source_dir.join(\"_config.yml\").exist?\n      SafeYAML.load_file(source_dir.join(\"_config.yml\"))\n    else\n      {}\n    end\n  config[key] = SafeYAML.load(value)\n  Jekyll.set_timezone(value) if key == \"timezone\"\n  File.write(\"_config.yml\", YAML.dump(config))\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with *just* layouts",
        "step_num": 2,
        "step_name": "I have an \"index.html\" page with layout \"home\" that contains \"The quick brown fox.\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with *just* layouts",
        "step_num": 3,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with *just* layouts",
        "step_num": 4,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with *just* layouts",
        "step_num": 5,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with *just* layouts",
        "step_num": 6,
        "step_name": "I should see \"Message: The quick brown fox.\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with *just* layouts",
        "step_num": 7,
        "step_name": "I should not see \"_includes\" in the build output",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in the build output$!) do |negative, text|\n  if negative.nil? || negative.empty?\n    expect(jekyll_run_output).to match Regexp.new(text)\n  else\n    expect(jekyll_run_output).not_to match Regexp.new(text)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with *just* layouts",
        "step_num": 8,
        "step_name": "I should not see \"_sass\" in the build output",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in the build output$!) do |negative, text|\n  if negative.nil? || negative.empty?\n    expect(jekyll_run_output).to match Regexp.new(text)\n  else\n    expect(jekyll_run_output).not_to match Regexp.new(text)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "A theme with *just* layouts",
        "step_num": 9,
        "step_name": "I should not see \"assets\" in the build output",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in the build output$!) do |negative, text|\n  if negative.nil? || negative.empty?\n    expect(jekyll_run_output).to match Regexp.new(text)\n  else\n    expect(jekyll_run_output).not_to match Regexp.new(text)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Requiring dependencies of a theme",
        "step_num": 1,
        "step_name": "I have a configuration file with \"theme\" set to \"test-dependency-theme\"",
        "glue_code": "Given(%r!^I have a configuration file with \"(.*)\" set to \"(.*)\"$!) do |key, value|\n  config = \\\n    if source_dir.join(\"_config.yml\").exist?\n      SafeYAML.load_file(source_dir.join(\"_config.yml\"))\n    else\n      {}\n    end\n  config[key] = SafeYAML.load(value)\n  Jekyll.set_timezone(value) if key == \"timezone\"\n  File.write(\"_config.yml\", YAML.dump(config))\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Requiring dependencies of a theme",
        "step_num": 2,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Requiring dependencies of a theme",
        "step_num": 3,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Requiring dependencies of a theme",
        "step_num": 4,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Requiring dependencies of a theme",
        "step_num": 5,
        "step_name": "the \"_site/test.txt\" file should exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 1,
        "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
        "glue_code": "Given(%r!^I have a configuration file with \"(.*)\" set to \"(.*)\"$!) do |key, value|\n  config = \\\n    if source_dir.join(\"_config.yml\").exist?\n      SafeYAML.load_file(source_dir.join(\"_config.yml\"))\n    else\n      {}\n    end\n  config[key] = SafeYAML.load(value)\n  Jekyll.set_timezone(value) if key == \"timezone\"\n  File.write(\"_config.yml\", YAML.dump(config))\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 2,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 3,
        "step_name": "I have the following posts",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 4,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 5,
        "step_name": "I have a \"_layouts/post.html\" page with layout \"default\" that contains \"I am a post layout! {{ content }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 6,
        "step_name": "I have an _includes directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 7,
        "step_name": "I have an \"_includes/in_project.html\" file that contains \"I am in the project, not the theme.\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file that contains \"(.*)\"$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 8,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 9,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 10,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 11,
        "step_name": "I should see \"I am in the project, not the theme.\" in \"_site/2016/04/21/entry2.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 12,
        "step_name": "I should see \"<span class=\\\"sample\\\">include.html from test-theme</span>\" in \"_site/2016/04/21/entry2.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 13,
        "step_name": "I should see \"default.html from test-theme:\" in \"_site/2016/04/21/entry2.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 14,
        "step_name": "I should see \"I am using a themed layout.\" in \"_site/2016/04/21/entry2.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 15,
        "step_name": "I should not see \"I am a post layout!\" in \"_site/2016/04/21/entry2.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 16,
        "step_name": "I should not see \"I am in the project, not the theme.\" in \"_site/2016/04/21/entry1.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 17,
        "step_name": "I should see \"<span class=\\\"sample\\\">include.html from test-theme</span>\" in \"_site/2016/04/21/entry1.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 18,
        "step_name": "I should see \"default.html from test-theme:\" in \"_site/2016/04/21/entry1.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 19,
        "step_name": "I should see \"I am using a local layout.\" in \"_site/2016/04/21/entry1.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together",
        "step_num": 20,
        "step_name": "I should see \"I am a post layout!\" in \"_site/2016/04/21/entry1.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together in respect to data folders",
        "step_num": 1,
        "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
        "glue_code": "Given(%r!^I have a configuration file with \"(.*)\" set to \"(.*)\"$!) do |key, value|\n  config = \\\n    if source_dir.join(\"_config.yml\").exist?\n      SafeYAML.load_file(source_dir.join(\"_config.yml\"))\n    else\n      {}\n    end\n  config[key] = SafeYAML.load(value)\n  Jekyll.set_timezone(value) if key == \"timezone\"\n  File.write(\"_config.yml\", YAML.dump(config))\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together in respect to data folders",
        "step_num": 2,
        "step_name": "I have a _data directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together in respect to data folders",
        "step_num": 3,
        "step_name": "I have a \"_data/i18n.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together in respect to data folders",
        "step_num": 4,
        "step_name": "I have an \"index.html\" page that contains \"{% include testimonials.html %}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together in respect to data folders",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together in respect to data folders",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together in respect to data folders",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together in respect to data folders",
        "step_num": 8,
        "step_name": "I should not see \"Testimonials\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together in respect to data folders",
        "step_num": 9,
        "step_name": "I should see \"Kundenstimmen\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "theme.feature",
        "scenario": "Complicated site that puts it all together in respect to data folders",
        "step_num": 10,
        "step_name": "I should see \"Design by FTC\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    }
]