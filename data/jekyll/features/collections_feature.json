[
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"Collections: {{ site.methods }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection",
        "step_num": 2,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection",
        "step_num": 3,
        "step_name": "I have a \"_methods/static-file.txt\" file that contains \"Static Content {{ site.title }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file that contains \"(.*)\"$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection",
        "step_num": 4,
        "step_name": "I have a configuration file with \"collections\" set to \"['methods']\"",
        "glue_code": "Given(%r!^I have a configuration file with \"(.*)\" set to \"(.*)\"$!) do |key, value|\n  config = \\\n    if source_dir.join(\"_config.yml\").exist?\n      SafeYAML.load_file(source_dir.join(\"_config.yml\"))\n    else\n      {}\n    end\n  config[key] = SafeYAML.load(value)\n  Jekyll.set_timezone(value) if key == \"timezone\"\n  File.write(\"_config.yml\", YAML.dump(config))\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection",
        "step_num": 8,
        "step_name": "the _site/methods directory should not exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection",
        "step_num": 9,
        "step_name": "the \"_site/methods/configuration.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection",
        "step_num": 10,
        "step_name": "the \"_site/methods/static-file.txt\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"Collections: output => {{ site.collections[0].output }} label => {{ site.collections[0].label }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection",
        "step_num": 2,
        "step_name": "I have an \"collection_metadata.html\" page that contains \"Methods metadata: {{ site.collections[0].foo }} {{ site.collections[0] }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection",
        "step_num": 3,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection",
        "step_num": 4,
        "step_name": "I have a \"_methods/static-file.txt\" file that contains \"Static Content {{ site.title }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file that contains \"(.*)\"$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection",
        "step_num": 5,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection",
        "step_num": 6,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection",
        "step_num": 7,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection",
        "step_num": 8,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection",
        "step_num": 9,
        "step_name": "I should see \"Collections: output => true\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection",
        "step_num": 10,
        "step_name": "I should see \"label => methods\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection",
        "step_num": 11,
        "step_name": "I should see \"Methods metadata: bar\" in \"_site/collection_metadata.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection",
        "step_num": 12,
        "step_name": "I should see \"<p>Whatever: foo.bar</p>\" in \"_site/methods/configuration.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection",
        "step_num": 13,
        "step_name": "I should see \"Static Content {{ site.title }}\" in \"_site/methods/static-file.txt\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection at a custom URL",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"Collections: {{ site.collections }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection at a custom URL",
        "step_num": 2,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection at a custom URL",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection at a custom URL",
        "step_num": 4,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection at a custom URL",
        "step_num": 5,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection at a custom URL",
        "step_num": 6,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection at a custom URL",
        "step_num": 7,
        "step_name": "I should see \"<p>Whatever: foo.bar</p>\" in \"_site/methods/configuration/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered document in a layout",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"Collections: output => {{ site.collections[0].output }} label => {{ site.collections[0].label }} foo => {{ site.collections[0].foo }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered document in a layout",
        "step_num": 2,
        "step_name": "I have a default layout that contains \"<div class='title'>Tom Preston-Werner</div> {{content}}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered document in a layout",
        "step_num": 3,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered document in a layout",
        "step_num": 4,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered document in a layout",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered document in a layout",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered document in a layout",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered document in a layout",
        "step_num": 8,
        "step_name": "I should see \"Collections: output => true\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered document in a layout",
        "step_num": 9,
        "step_name": "I should see \"label => methods\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered document in a layout",
        "step_num": 10,
        "step_name": "I should see \"foo => bar\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered document in a layout",
        "step_num": 11,
        "step_name": "I should see \"<p>Run your generators! default</p>\" in \"_site/methods/site/generate.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered document in a layout",
        "step_num": 12,
        "step_name": "I should see \"<div class='title'>Tom Preston-Werner</div>\" in \"_site/methods/site/generate.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Collections specified as an array",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"Collections: {% for method in site.methods %}{{ method.relative_path }} {% endfor %}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Collections specified as an array",
        "step_num": 2,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Collections specified as an array",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Collections specified as an array",
        "step_num": 4,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Collections specified as an array",
        "step_num": 5,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Collections specified as an array",
        "step_num": 6,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Collections specified as an array",
        "step_num": 7,
        "step_name": "I should see \"Collections: _methods/3940394-21-9393050-fifif1323-test.md _methods/collection/entries _methods/configuration.md _methods/escape-\\+ #%20\\[\\].md _methods/sanitized_path.md _methods/site/generate.md _methods/site/initialize.md _methods/trailing-dots...md _methods/um_hi.md\" in \"_site/index.html\" unless Windows",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\" unless Windows$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    if Jekyll::Utils::Platforms.really_windows?\n      expect(file_contents(file)).not_to match regexp\n    else\n      expect(file_contents(file)).to match regexp\n    end\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Collections specified as an array",
        "step_num": 8,
        "step_name": "I should see \"Collections: _methods/3940394-21-9393050-fifif1323-test.md _methods/collection/entries _methods/configuration.md _methods/escape-\\+ #%20\\[\\].md _methods/sanitized_path.md _methods/site/generate.md _methods/site/initialize.md _methods/trailing-dots...md _methods/yaml_with_dots.md\" in \"_site/index.html\" if on Windows",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\" if on Windows$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    if Jekyll::Utils::Platforms.really_windows?\n      expect(file_contents(file)).to match regexp\n    else\n      expect(file_contents(file)).not_to match regexp\n    end\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Collections specified as an hash",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"Collections: {% for method in site.methods %}{{ method.relative_path }} {% endfor %}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Collections specified as an hash",
        "step_num": 2,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Collections specified as an hash",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Collections specified as an hash",
        "step_num": 4,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Collections specified as an hash",
        "step_num": 5,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Collections specified as an hash",
        "step_num": 6,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Collections specified as an hash",
        "step_num": 7,
        "step_name": "I should see \"Collections: _methods/3940394-21-9393050-fifif1323-test.md _methods/collection/entries _methods/configuration.md _methods/escape-\\+ #%20\\[\\].md _methods/sanitized_path.md _methods/site/generate.md _methods/site/initialize.md _methods/trailing-dots...md _methods/um_hi.md\" in \"_site/index.html\" unless Windows",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\" unless Windows$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    if Jekyll::Utils::Platforms.really_windows?\n      expect(file_contents(file)).not_to match regexp\n    else\n      expect(file_contents(file)).to match regexp\n    end\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Collections specified as an hash",
        "step_num": 8,
        "step_name": "I should see \"Collections: _methods/3940394-21-9393050-fifif1323-test.md _methods/collection/entries _methods/configuration.md _methods/escape-\\+ #%20\\[\\].md _methods/sanitized_path.md _methods/site/generate.md _methods/site/initialize.md _methods/trailing-dots...md _methods/yaml_with_dots.md\" in \"_site/index.html\" if on Windows",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\" if on Windows$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    if Jekyll::Utils::Platforms.really_windows?\n      expect(file_contents(file)).to match regexp\n    else\n      expect(file_contents(file)).not_to match regexp\n    end\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with document with future date",
        "step_num": 1,
        "step_name": "I have a _puppies directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with document with future date",
        "step_num": 2,
        "step_name": "I have the following documents under the puppies collection",
        "glue_code": "Given(%r!^I have the following documents? under the (.*) collection:$!) do |folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    filename = \"#{title}.md\"\n    dest_folder = \"_#{folder}\"\n\n    path = File.join(dest_folder, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with document with future date",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with document with future date",
        "step_num": 4,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with document with future date",
        "step_num": 5,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with document with future date",
        "step_num": 6,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with document with future date",
        "step_num": 7,
        "step_name": "I should see \"content for Rover\" in \"_site/puppies/rover.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with document with future date",
        "step_num": 8,
        "step_name": "the \"_site/puppies/fido.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with document with future date",
        "step_num": 9,
        "step_name": "I run jekyll build --future",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with document with future date",
        "step_num": 10,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with document with future date",
        "step_num": 11,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with document with future date",
        "step_num": 12,
        "step_name": "the \"_site/puppies/fido.html\" file should exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future dated document via Liquid",
        "step_num": 1,
        "step_name": "I have a _puppies directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future dated document via Liquid",
        "step_num": 2,
        "step_name": "I have the following documents under the puppies collection",
        "glue_code": "Given(%r!^I have the following documents? under the (.*) collection:$!) do |folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    filename = \"#{title}.md\"\n    dest_folder = \"_#{folder}\"\n\n    path = File.join(dest_folder, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future dated document via Liquid",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future dated document via Liquid",
        "step_num": 4,
        "step_name": "I have a \"index.html\" page that contains \"Newest puppy: {% assign puppy = site.puppies.last %}{{ puppy.title }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future dated document via Liquid",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future dated document via Liquid",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future dated document via Liquid",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future dated document via Liquid",
        "step_num": 8,
        "step_name": "I should see \"Newest puppy: Fido\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future dated document via Liquid",
        "step_num": 9,
        "step_name": "the \"_site/puppies/fido.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future dated document via Liquid",
        "step_num": 10,
        "step_name": "I run jekyll build --future",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future dated document via Liquid",
        "step_num": 11,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future dated document via Liquid",
        "step_num": 12,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future dated document via Liquid",
        "step_num": 13,
        "step_name": "I should see \"Newest puppy: Fido\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future dated document via Liquid",
        "step_num": 14,
        "step_name": "the \"_site/puppies/fido.html\" file should exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 1,
        "step_name": "I have a _puppies directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 2,
        "step_name": "I have the following documents under the puppies collection",
        "glue_code": "Given(%r!^I have the following documents? under the (.*) collection:$!) do |folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    filename = \"#{title}.md\"\n    dest_folder = \"_#{folder}\"\n\n    path = File.join(dest_folder, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 4,
        "step_name": "I have a \"index.md\" page that contains \"{% for puppy in site.puppies %}<div>{{ puppy.title }}</div>{% endfor %}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 8,
        "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 9,
        "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 10,
        "step_name": "I should not see \"<div>Figor</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 11,
        "step_name": "I should not see \"<div>Hardy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 12,
        "step_name": "the \"_site/puppies/rover.html\" file should exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 13,
        "step_name": "the \"_site/puppies/figor.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 14,
        "step_name": "the \"_site/puppies/snowy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 15,
        "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 16,
        "step_name": "I run jekyll build --future",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 17,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 18,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 19,
        "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 20,
        "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 21,
        "step_name": "I should not see \"<div>Figor</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 22,
        "step_name": "I should not see \"<div>Hardy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 23,
        "step_name": "the \"_site/puppies/rover.html\" file should exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 24,
        "step_name": "the \"_site/puppies/figor.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 25,
        "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered and published collection documents via Liquid",
        "step_num": 26,
        "step_name": "the \"_site/puppies/snowy.html\" file should exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection with future dated document",
        "step_num": 1,
        "step_name": "I have a _puppies directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection with future dated document",
        "step_num": 2,
        "step_name": "I have the following documents under the puppies collection",
        "glue_code": "Given(%r!^I have the following documents? under the (.*) collection:$!) do |folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    filename = \"#{title}.md\"\n    dest_folder = \"_#{folder}\"\n\n    path = File.join(dest_folder, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection with future dated document",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection with future dated document",
        "step_num": 4,
        "step_name": "I have a \"foo.txt\" file that contains \"random static file\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file that contains \"(.*)\"$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection with future dated document",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection with future dated document",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection with future dated document",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection with future dated document",
        "step_num": 8,
        "step_name": "the \"_site/puppies/rover.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection with future dated document",
        "step_num": 9,
        "step_name": "the \"_site/puppies/fido.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection with future dated document",
        "step_num": 10,
        "step_name": "I run jekyll build --future",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection with future dated document",
        "step_num": 11,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection with future dated document",
        "step_num": 12,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Unrendered collection with future dated document",
        "step_num": 13,
        "step_name": "the \"_site/puppies/fido.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future dated document via Liquid",
        "step_num": 1,
        "step_name": "I have a _puppies directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future dated document via Liquid",
        "step_num": 2,
        "step_name": "I have the following documents under the puppies collection",
        "glue_code": "Given(%r!^I have the following documents? under the (.*) collection:$!) do |folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    filename = \"#{title}.md\"\n    dest_folder = \"_#{folder}\"\n\n    path = File.join(dest_folder, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future dated document via Liquid",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future dated document via Liquid",
        "step_num": 4,
        "step_name": "I have a \"index.html\" page that contains \"Newest puppy: {% assign puppy = site.puppies.last %}{{ puppy.title }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future dated document via Liquid",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future dated document via Liquid",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future dated document via Liquid",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future dated document via Liquid",
        "step_num": 8,
        "step_name": "I should see \"Newest puppy: Fido\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future dated document via Liquid",
        "step_num": 9,
        "step_name": "the \"_site/puppies/fido.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future dated document via Liquid",
        "step_num": 10,
        "step_name": "I run jekyll build --future",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future dated document via Liquid",
        "step_num": 11,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future dated document via Liquid",
        "step_num": 12,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future dated document via Liquid",
        "step_num": 13,
        "step_name": "I should see \"Newest puppy: Fido\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future dated document via Liquid",
        "step_num": 14,
        "step_name": "the \"_site/puppies/fido.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 1,
        "step_name": "I have a _puppies directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 2,
        "step_name": "I have the following documents under the puppies collection",
        "glue_code": "Given(%r!^I have the following documents? under the (.*) collection:$!) do |folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    filename = \"#{title}.md\"\n    dest_folder = \"_#{folder}\"\n\n    path = File.join(dest_folder, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 4,
        "step_name": "I have a \"index.md\" page that contains \"{% for puppy in site.puppies %}<div>{{ puppy.title }}</div>{% endfor %}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 8,
        "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 9,
        "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 10,
        "step_name": "I should not see \"<div>Figor</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 11,
        "step_name": "I should not see \"<div>Hardy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 12,
        "step_name": "the \"_site/puppies/rover.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 13,
        "step_name": "the \"_site/puppies/figor.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 14,
        "step_name": "the \"_site/puppies/snowy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 15,
        "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 16,
        "step_name": "I run jekyll build --future",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 17,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 18,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 19,
        "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 20,
        "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 21,
        "step_name": "I should not see \"<div>Figor</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 22,
        "step_name": "I should not see \"<div>Hardy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 23,
        "step_name": "the \"_site/puppies/rover.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 24,
        "step_name": "the \"_site/puppies/figor.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 25,
        "step_name": "the \"_site/puppies/snowy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered but publishable collection documents via Liquid",
        "step_num": 26,
        "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 1,
        "step_name": "I have a _puppies directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 2,
        "step_name": "I have the following documents under the puppies collection",
        "glue_code": "Given(%r!^I have the following documents? under the (.*) collection:$!) do |folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    filename = \"#{title}.md\"\n    dest_folder = \"_#{folder}\"\n\n    path = File.join(dest_folder, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 4,
        "step_name": "I have a \"index.md\" page that contains \"{% for puppy in site.puppies %}<div>{{ puppy.title }}</div>{% endfor %}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 8,
        "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 9,
        "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 10,
        "step_name": "I should not see \"<div>Figor</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 11,
        "step_name": "I should not see \"<div>Hardy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 12,
        "step_name": "the \"_site/puppies/rover.html\" file should exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 13,
        "step_name": "the \"_site/puppies/snowy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 14,
        "step_name": "the \"_site/puppies/figor.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 15,
        "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 16,
        "step_name": "I run jekyll build --unpublished",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 17,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 18,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 19,
        "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 20,
        "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 21,
        "step_name": "I should see \"<div>Figor</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 22,
        "step_name": "I should see \"<div>Hardy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 23,
        "step_name": "the \"_site/puppies/rover.html\" file should exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 24,
        "step_name": "the \"_site/puppies/snowy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 25,
        "step_name": "the \"_site/puppies/figor.html\" file should exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 26,
        "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 27,
        "step_name": "I run jekyll build --unpublished --future",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 28,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 29,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 30,
        "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 31,
        "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 32,
        "step_name": "I should see \"<div>Figor</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 33,
        "step_name": "I should see \"<div>Hardy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 34,
        "step_name": "the \"_site/puppies/rover.html\" file should exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 35,
        "step_name": "the \"_site/puppies/snowy.html\" file should exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 36,
        "step_name": "the \"_site/puppies/figor.html\" file should exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access rendered collection with future date and unpublished flag via Liquid",
        "step_num": 37,
        "step_name": "the \"_site/puppies/hardy.html\" file should exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 1,
        "step_name": "I have a _puppies directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 2,
        "step_name": "I have the following documents under the puppies collection",
        "glue_code": "Given(%r!^I have the following documents? under the (.*) collection:$!) do |folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    filename = \"#{title}.md\"\n    dest_folder = \"_#{folder}\"\n\n    path = File.join(dest_folder, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 4,
        "step_name": "I have a \"index.md\" page that contains \"{% for puppy in site.puppies %}<div>{{ puppy.title }}</div>{% endfor %}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 8,
        "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 9,
        "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 10,
        "step_name": "I should not see \"<div>Figor</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 11,
        "step_name": "I should not see \"<div>Hardy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 12,
        "step_name": "the \"_site/puppies/rover.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 13,
        "step_name": "the \"_site/puppies/snowy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 14,
        "step_name": "the \"_site/puppies/figor.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 15,
        "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 16,
        "step_name": "I run jekyll build --unpublished",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 17,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 18,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 19,
        "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 20,
        "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 21,
        "step_name": "I should see \"<div>Figor</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 22,
        "step_name": "I should see \"<div>Hardy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 23,
        "step_name": "the \"_site/puppies/rover.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 24,
        "step_name": "the \"_site/puppies/snowy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 25,
        "step_name": "the \"_site/puppies/figor.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 26,
        "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 27,
        "step_name": "I run jekyll build --unpublished --future",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 28,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 29,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 30,
        "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 31,
        "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 32,
        "step_name": "I should see \"<div>Figor</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 33,
        "step_name": "I should see \"<div>Hardy</div>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 34,
        "step_name": "the \"_site/puppies/rover.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 35,
        "step_name": "the \"_site/puppies/snowy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 36,
        "step_name": "the \"_site/puppies/figor.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Access unrendered collection with future date and unpublished flag via Liquid",
        "step_num": 37,
        "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "All the documents",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"All documents: {% for doc in site.documents %}{{ doc.relative_path }} {% endfor %}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "All the documents",
        "step_num": 2,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "All the documents",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "All the documents",
        "step_num": 4,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "All the documents",
        "step_num": 5,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "All the documents",
        "step_num": 6,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "All the documents",
        "step_num": 7,
        "step_name": "I should see \"All documents: _methods/3940394-21-9393050-fifif1323-test.md _methods/collection/entries _methods/configuration.md _methods/escape-\\+ #%20\\[\\].md _methods/sanitized_path.md _methods/site/generate.md _methods/site/initialize.md _methods/trailing-dots...md _methods/um_hi.md\" in \"_site/index.html\" unless Windows",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\" unless Windows$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    if Jekyll::Utils::Platforms.really_windows?\n      expect(file_contents(file)).not_to match regexp\n    else\n      expect(file_contents(file)).to match regexp\n    end\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "All the documents",
        "step_num": 8,
        "step_name": "I should see \"All documents: _methods/3940394-21-9393050-fifif1323-test.md _methods/collection/entries _methods/configuration.md _methods/escape-\\+ #%20\\[\\].md _methods/sanitized_path.md _methods/site/generate.md _methods/site/initialize.md _methods/trailing-dots...md _methods/yaml_with_dots.md\" in \"_site/index.html\" if on Windows",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\" if on Windows$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    if Jekyll::Utils::Platforms.really_windows?\n      expect(file_contents(file)).to match regexp\n    else\n      expect(file_contents(file)).not_to match regexp\n    end\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Documents have an output attribute, which is the converted HTML",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"Second document's output: {{ site.documents[2].output }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Documents have an output attribute, which is the converted HTML",
        "step_num": 2,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Documents have an output attribute, which is the converted HTML",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Documents have an output attribute, which is the converted HTML",
        "step_num": 4,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Documents have an output attribute, which is the converted HTML",
        "step_num": 5,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Documents have an output attribute, which is the converted HTML",
        "step_num": 6,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Documents have an output attribute, which is the converted HTML",
        "step_num": 7,
        "step_name": "I should see \"Second document's output: <p>Use <code class=\\\"language-plaintext highlighter-rouge\\\">Jekyll.configuration</code> to build a full configuration for use w/Jekyll.</p>\\n\\n<p>Whatever: foo.bar</p>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Documents have an output attribute, which is the converted HTML based on site.config",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"Second document's output: {{ site.documents[2].output }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Documents have an output attribute, which is the converted HTML based on site.config",
        "step_num": 2,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Documents have an output attribute, which is the converted HTML based on site.config",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Documents have an output attribute, which is the converted HTML based on site.config",
        "step_num": 4,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Documents have an output attribute, which is the converted HTML based on site.config",
        "step_num": 5,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Documents have an output attribute, which is the converted HTML based on site.config",
        "step_num": 6,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Documents have an output attribute, which is the converted HTML based on site.config",
        "step_num": 7,
        "step_name": "I should see \"Second document's output: <p>Use <code>Jekyll.configuration</code> to build a full configuration for use w/Jekyll.</p>\\n\\n<p>Whatever: foo.bar</p>\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Filter documents by where",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"{% assign items = site.methods | where: 'whatever','foo.bar' %}Item count: {{ items.size }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Filter documents by where",
        "step_num": 2,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Filter documents by where",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Filter documents by where",
        "step_num": 4,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Filter documents by where",
        "step_num": 5,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Filter documents by where",
        "step_num": 6,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Filter documents by where",
        "step_num": 7,
        "step_name": "I should see \"Item count: 2\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort by title",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"{% assign items = site.methods | sort: 'title' %}2. of {{ items.size }}: {{ items[2].output }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort by title",
        "step_num": 2,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort by title",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort by title",
        "step_num": 4,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort by title",
        "step_num": 5,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort by title",
        "step_num": 6,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort by title",
        "step_num": 7,
        "step_name": "I should see \"2. of 10: <p>Page without title.</p>\" in \"_site/index.html\" unless Windows",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\" unless Windows$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    if Jekyll::Utils::Platforms.really_windows?\n      expect(file_contents(file)).not_to match regexp\n    else\n      expect(file_contents(file)).to match regexp\n    end\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort by title",
        "step_num": 8,
        "step_name": "I should see \"2. of 9: <p>Page without title.</p>\" in \"_site/index.html\" if on Windows",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\" if on Windows$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    if Jekyll::Utils::Platforms.really_windows?\n      expect(file_contents(file)).to match regexp\n    else\n      expect(file_contents(file)).not_to match regexp\n    end\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort by relative_path",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"Collections: {% assign methods = site.methods | sort: 'relative_path' %}{{ methods | map:\"title\" | join: \", \" }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort by relative_path",
        "step_num": 2,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort by relative_path",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort by relative_path",
        "step_num": 4,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort by relative_path",
        "step_num": 5,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort by relative_path",
        "step_num": 6,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort by relative_path",
        "step_num": 7,
        "step_name": "I should see \"Collections: this is a test!, Collection#entries, Jekyll.configuration, Jekyll.escape, Jekyll.sanitized_path, Site#generate, Initialize, Ellipsis Path, Site#generate, YAML with Dots\" in \"_site/index.html\" unless Windows",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\" unless Windows$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    if Jekyll::Utils::Platforms.really_windows?\n      expect(file_contents(file)).not_to match regexp\n    else\n      expect(file_contents(file)).to match regexp\n    end\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort by relative_path",
        "step_num": 8,
        "step_name": "I should see \"Collections: this is a test!, Collection#entries, Jekyll.configuration, Jekyll.escape, Jekyll.sanitized_path, Site#generate, Initialize, Ellipsis Path, YAML with Dots\" in \"_site/index.html\" if on Windows",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\" if on Windows$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    if Jekyll::Utils::Platforms.really_windows?\n      expect(file_contents(file)).to match regexp\n    else\n      expect(file_contents(file)).not_to match regexp\n    end\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in all entries",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"Collections: {{ site.tutorials | map: 'title' | join: ', ' }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in all entries",
        "step_num": 2,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in all entries",
        "step_num": 3,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in all entries",
        "step_num": 4,
        "step_name": "I have a \"_layouts/tutorial.html\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in all entries",
        "step_num": 5,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in all entries",
        "step_num": 6,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in all entries",
        "step_num": 7,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in all entries",
        "step_num": 8,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in all entries",
        "step_num": 9,
        "step_name": "I should see \"Collections: Getting Started, Let's Roll!, Dive-In and Publish Already!, Tip of the Iceberg, Extending with Plugins, Graduation Day\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in all entries",
        "step_num": 10,
        "step_name": "I should not see \"Previous: Graduation Day\" in \"_site/tutorials/lets-roll.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in all entries",
        "step_num": 11,
        "step_name": "I should not see \"Next: Tip of the Iceberg\" in \"_site/tutorials/lets-roll.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in all entries",
        "step_num": 12,
        "step_name": "I should see \"Previous: Getting Started\" in \"_site/tutorials/lets-roll.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in all entries",
        "step_num": 13,
        "step_name": "I should see \"Next: Dive-In and Publish Already!\" in \"_site/tutorials/lets-roll.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in only some entries",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"Collections: {{ site.tutorials | map: 'title' | join: ', ' }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in only some entries",
        "step_num": 2,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in only some entries",
        "step_num": 3,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in only some entries",
        "step_num": 4,
        "step_name": "I have a \"_layouts/tutorial.html\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in only some entries",
        "step_num": 5,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in only some entries",
        "step_num": 6,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in only some entries",
        "step_num": 7,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in only some entries",
        "step_num": 8,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in only some entries",
        "step_num": 9,
        "step_name": "I should see \"'approx_time' not defined\" in the build output",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in the build output$!) do |negative, text|\n  if negative.nil? || negative.empty?\n    expect(jekyll_run_output).to match Regexp.new(text)\n  else\n    expect(jekyll_run_output).not_to match Regexp.new(text)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in only some entries",
        "step_num": 10,
        "step_name": "I should see \"Collections: Extending with Plugins, Let's Roll!, Getting Started, Graduation Day, Dive-In and Publish Already!, Tip of the Iceberg\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in only some entries",
        "step_num": 11,
        "step_name": "I should see \"Previous: Getting Started\" in \"_site/tutorials/graduation-day.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Sort all entries by a Front Matter key defined in only some entries",
        "step_num": 12,
        "step_name": "I should see \"Next: Dive-In and Publish Already!\" in \"_site/tutorials/graduation-day.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort entries",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"Collections: {{ site.tutorials | map: 'title' | join: ', ' }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort entries",
        "step_num": 2,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort entries",
        "step_num": 3,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort entries",
        "step_num": 4,
        "step_name": "I have a \"_layouts/tutorial.html\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort entries",
        "step_num": 5,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort entries",
        "step_num": 6,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort entries",
        "step_num": 7,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort entries",
        "step_num": 8,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort entries",
        "step_num": 9,
        "step_name": "I should see \"Collections: Getting Started, Tip of the Iceberg, Let's Roll!, Dive-In and Publish Already!, Graduation Day, Extending with Plugins\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort entries",
        "step_num": 10,
        "step_name": "I should not see \"Previous: Graduation Day\" in \"_site/tutorials/lets-roll.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort entries",
        "step_num": 11,
        "step_name": "I should not see \"Next: Tip of the Iceberg\" in \"_site/tutorials/lets-roll.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort entries",
        "step_num": 12,
        "step_name": "I should see \"Previous: Tip of the Iceberg\" in \"_site/tutorials/lets-roll.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort entries",
        "step_num": 13,
        "step_name": "I should see \"Next: Dive-In and Publish Already!\" in \"_site/tutorials/lets-roll.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort some entries",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"Collections: {{ site.tutorials | map: 'title' | join: ', ' }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort some entries",
        "step_num": 2,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort some entries",
        "step_num": 3,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort some entries",
        "step_num": 4,
        "step_name": "I have a \"_layouts/tutorial.html\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort some entries",
        "step_num": 5,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort some entries",
        "step_num": 6,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort some entries",
        "step_num": 7,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort some entries",
        "step_num": 8,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort some entries",
        "step_num": 9,
        "step_name": "I should see \"Collections: Getting Started, Let's Roll!, Dive-In and Publish Already!, Graduation Day, Extending with Plugins, Tip of the Iceberg\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort some entries",
        "step_num": 10,
        "step_name": "I should not see \"Previous: Graduation Day\" in \"_site/tutorials/lets-roll.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort some entries",
        "step_num": 11,
        "step_name": "I should not see \"Previous: Tip of the Iceberg\" in \"_site/tutorials/lets-roll.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort some entries",
        "step_num": 12,
        "step_name": "I should not see \"Next: Tip of the Iceberg\" in \"_site/tutorials/lets-roll.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort some entries",
        "step_num": 13,
        "step_name": "I should see \"Previous: Getting Started\" in \"_site/tutorials/lets-roll.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Manually sort some entries",
        "step_num": 14,
        "step_name": "I should see \"Next: Dive-In and Publish Already!\" in \"_site/tutorials/lets-roll.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with date/dateless filename",
        "step_num": 1,
        "step_name": "I have an \"index.html\" page that contains \"Collections: {% for method in site.thanksgiving %}{{ method.title }} {% endfor %}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with date/dateless filename",
        "step_num": 2,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with date/dateless filename",
        "step_num": 3,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with date/dateless filename",
        "step_num": 4,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with date/dateless filename",
        "step_num": 5,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with date/dateless filename",
        "step_num": 6,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with date/dateless filename",
        "step_num": 7,
        "step_name": "I should see \"Thanksgiving Black Friday\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with date/dateless filename",
        "step_num": 8,
        "step_name": "I should see \"Happy Thanksgiving\" in \"_site/thanksgiving/2015-11-26-thanksgiving.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with date/dateless filename",
        "step_num": 9,
        "step_name": "I should see \"Black Friday\" in \"_site/thanksgiving/black-friday.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with custom permalinks and static file contents",
        "step_num": 1,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with custom permalinks and static file contents",
        "step_num": 2,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with custom permalinks and static file contents",
        "step_num": 3,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with custom permalinks and static file contents",
        "step_num": 4,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with custom permalinks and static file contents",
        "step_num": 5,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with custom permalinks and static file contents",
        "step_num": 6,
        "step_name": "I should see \"I have no front matter.\" in \"_site/methods/extensionless_static_file\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document",
        "step_num": 1,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document",
        "step_num": 2,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document",
        "step_num": 3,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document",
        "step_num": 4,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document",
        "step_num": 5,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document",
        "step_num": 6,
        "step_name": "I should see \"I have no file extension but I should still be a part of the collection.\" in \"_site/methods/collection/entries\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document in a strict site",
        "step_num": 1,
        "step_name": "I have fixture collections",
        "glue_code": "Given(%r!^I have fixture collections(?: in \"(.*)\" directory)?$!) do |directory|\n  collections_dir = File.join(source_dir, directory.to_s)\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir\n  FileUtils.cp_r Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document in a strict site",
        "step_num": 2,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document in a strict site",
        "step_num": 3,
        "step_name": "I have an \"_posts/2019-12-26-extensioned.md\" file that contains \"Hello!\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file that contains \"(.*)\"$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document in a strict site",
        "step_num": 4,
        "step_name": "I have an \"_posts/2019-12-26-extensionless\" file that contains \"Aloha!\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file that contains \"(.*)\"$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document in a strict site",
        "step_num": 5,
        "step_name": "I have an \"index.md\" page that contains \"{{ site.posts | map: 'title' }}\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document in a strict site",
        "step_num": 6,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document in a strict site",
        "step_num": 7,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document in a strict site",
        "step_num": 8,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document in a strict site",
        "step_num": 9,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document in a strict site",
        "step_num": 10,
        "step_name": "I should see \"I have no file extension but I should still be a part of the collection.\" in \"_site/methods/collection/entries\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document in a strict site",
        "step_num": 11,
        "step_name": "I should see \"Extensioned\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "collections.feature",
        "scenario": "Rendered collection with an extensionless document in a strict site",
        "step_num": 12,
        "step_name": "I should not see \"Extensionless\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    }
]