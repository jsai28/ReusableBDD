[
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.title variable",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.title variable",
        "step_num": 2,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.title variable",
        "step_num": 3,
        "step_name": "I have the following post",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.title variable",
        "step_num": 4,
        "step_name": "I have a simple layout that contains \"Post title: {{ page.title }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.title variable",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.title variable",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.title variable",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.title variable",
        "step_num": 8,
        "step_name": "I should see \"Post title: Star Wars\" in \"_site/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.url variable",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.url variable",
        "step_num": 2,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.url variable",
        "step_num": 3,
        "step_name": "I have the following post",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.url variable",
        "step_num": 4,
        "step_name": "I have a simple layout that contains \"Post url: {{ page.url }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.url variable",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.url variable",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.url variable",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.url variable",
        "step_num": 8,
        "step_name": "I should see \"Post url: /2009/03/27/star-wars.html\" in \"_site/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.name variable",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.name variable",
        "step_num": 2,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.name variable",
        "step_num": 3,
        "step_name": "I have the following post",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.name variable",
        "step_num": 4,
        "step_name": "I have a simple layout that contains \"Page name: {{ page.name }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.name variable",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.name variable",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.name variable",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.name variable",
        "step_num": 8,
        "step_name": "I should see \"Page name: 2009-03-27-star-wars.markdown\" in \"_site/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.date variable",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.date variable",
        "step_num": 2,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.date variable",
        "step_num": 3,
        "step_name": "I have the following post",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.date variable",
        "step_num": 4,
        "step_name": "I have a simple layout that contains \"Post date: {{ page.date | date_to_string }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.date variable",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.date variable",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.date variable",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.date variable",
        "step_num": 8,
        "step_name": "I should see \"Post date: 27 Mar 2009\" in \"_site/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.date variable with invalid",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.date variable with invalid",
        "step_num": 2,
        "step_name": "I have a \"_posts/2016-01-01-test.md\" page with date \"tuesday\" that contains \"I have a bad date.\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.date variable with invalid",
        "step_num": 3,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.date variable with invalid",
        "step_num": 4,
        "step_name": "the _site directory should not exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.date variable with invalid",
        "step_num": 5,
        "step_name": "I should see \"Document '_posts/2016-01-01-test.md' does not have a valid date in the YAML front matter.\" in the build output",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in the build output$!) do |negative, text|\n  if negative.nil? || negative.empty?\n    expect(jekyll_run_output).to match Regexp.new(text)\n  else\n    expect(jekyll_run_output).not_to match Regexp.new(text)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Invalid date in filename",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Invalid date in filename",
        "step_num": 2,
        "step_name": "I have a \"_posts/2016-22-01-test.md\" page that contains \"I have a bad date.\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Invalid date in filename",
        "step_num": 3,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Invalid date in filename",
        "step_num": 4,
        "step_name": "the _site directory should not exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Invalid date in filename",
        "step_num": 5,
        "step_name": "I should see \"Document '_posts/2016-22-01-test.md' does not have a valid date in the filename.\" in the build output",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in the build output$!) do |negative, text|\n  if negative.nil? || negative.empty?\n    expect(jekyll_run_output).to match Regexp.new(text)\n  else\n    expect(jekyll_run_output).not_to match Regexp.new(text)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.id variable",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.id variable",
        "step_num": 2,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.id variable",
        "step_num": 3,
        "step_name": "I have the following post",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.id variable",
        "step_num": 4,
        "step_name": "I have a simple layout that contains \"Post id: {{ page.id }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.id variable",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.id variable",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.id variable",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.id variable",
        "step_num": 8,
        "step_name": "I should see \"Post id: /2009/03/27/star-wars\" in \"_site/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.content variable",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.content variable",
        "step_num": 2,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.content variable",
        "step_num": 3,
        "step_name": "I have the following post",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.content variable",
        "step_num": 4,
        "step_name": "I have a simple layout that contains \"Post content: {{ content }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.content variable",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.content variable",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.content variable",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.content variable",
        "step_num": 8,
        "step_name": "I should see \"Post content: <p>Luke, I am your father.</p>\" in \"_site/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder",
        "step_num": 1,
        "step_name": "I have a movies directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder",
        "step_num": 2,
        "step_name": "I have a movies/_posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder",
        "step_num": 3,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder",
        "step_num": 4,
        "step_name": "I have the following post in \"movies\"",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder",
        "step_num": 5,
        "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder",
        "step_num": 6,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder",
        "step_num": 7,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder",
        "step_num": 8,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder",
        "step_num": 9,
        "step_name": "I should see \"Post category: movies\" in \"_site/movies/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has category in YAML",
        "step_num": 1,
        "step_name": "I have a movies directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has category in YAML",
        "step_num": 2,
        "step_name": "I have a movies/_posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has category in YAML",
        "step_num": 3,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has category in YAML",
        "step_num": 4,
        "step_name": "I have the following post in \"movies\"",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has category in YAML",
        "step_num": 5,
        "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has category in YAML",
        "step_num": 6,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has category in YAML",
        "step_num": 7,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has category in YAML",
        "step_num": 8,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has category in YAML",
        "step_num": 9,
        "step_name": "I should see \"Post category: movies\" in \"_site/movies/film/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has categories in YAML",
        "step_num": 1,
        "step_name": "I have a movies directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has categories in YAML",
        "step_num": 2,
        "step_name": "I have a movies/_posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has categories in YAML",
        "step_num": 3,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has categories in YAML",
        "step_num": 4,
        "step_name": "I have the following post in \"movies\"",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has categories in YAML",
        "step_num": 5,
        "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has categories in YAML",
        "step_num": 6,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has categories in YAML",
        "step_num": 7,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has categories in YAML",
        "step_num": 8,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and has categories in YAML",
        "step_num": 9,
        "step_name": "I should see \"Post category: movies\" in \"_site/movies/film/scifi/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and duplicated category is in YAML",
        "step_num": 1,
        "step_name": "I have a movies directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and duplicated category is in YAML",
        "step_num": 2,
        "step_name": "I have a movies/_posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and duplicated category is in YAML",
        "step_num": 3,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and duplicated category is in YAML",
        "step_num": 4,
        "step_name": "I have the following post in \"movies\"",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and duplicated category is in YAML",
        "step_num": 5,
        "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and duplicated category is in YAML",
        "step_num": 6,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and duplicated category is in YAML",
        "step_num": 7,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and duplicated category is in YAML",
        "step_num": 8,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in a folder and duplicated category is in YAML",
        "step_num": 9,
        "step_name": "I should see \"Post category: movies\" in \"_site/movies/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories when category is a composite of multiple words",
        "step_num": 1,
        "step_name": "I have a Sci-Fi Movi3s directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories when category is a composite of multiple words",
        "step_num": 2,
        "step_name": "I have a Sci-Fi Movi3s/_posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories when category is a composite of multiple words",
        "step_num": 3,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories when category is a composite of multiple words",
        "step_num": 4,
        "step_name": "I have the following post in \"Sci-Fi Movi3s\"",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories when category is a composite of multiple words",
        "step_num": 5,
        "step_name": "I have a \"_layouts/simple.html\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories when category is a composite of multiple words",
        "step_num": 6,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories when category is a composite of multiple words",
        "step_num": 7,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories when category is a composite of multiple words",
        "step_num": 8,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories when category is a composite of multiple words",
        "step_num": 9,
        "step_name": "I should see \"Post categories: Sci-Fi Movi3s, vintage\" in \"_site/sci-fi movi3s/vintage/2020/04/03/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories when category is a composite of multiple words",
        "step_num": 10,
        "step_name": "I should see \"Post URL: /sci-fi%20movi3s/vintage/2020/04/03/star-wars.html\" in \"_site/sci-fi movi3s/vintage/2020/04/03/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.slugified_categories to generate URL when category is a composite of multiple words",
        "step_num": 1,
        "step_name": "I have a Sci-Fi Movi3s directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.slugified_categories to generate URL when category is a composite of multiple words",
        "step_num": 2,
        "step_name": "I have a Sci-Fi Movi3s/_posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.slugified_categories to generate URL when category is a composite of multiple words",
        "step_num": 3,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.slugified_categories to generate URL when category is a composite of multiple words",
        "step_num": 4,
        "step_name": "I have the following post in \"Sci-Fi Movi3s\"",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.slugified_categories to generate URL when category is a composite of multiple words",
        "step_num": 5,
        "step_name": "I have a \"_layouts/simple.html\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.slugified_categories to generate URL when category is a composite of multiple words",
        "step_num": 6,
        "step_name": "I have a \"_config.yml\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.slugified_categories to generate URL when category is a composite of multiple words",
        "step_num": 7,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.slugified_categories to generate URL when category is a composite of multiple words",
        "step_num": 8,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.slugified_categories to generate URL when category is a composite of multiple words",
        "step_num": 9,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.slugified_categories to generate URL when category is a composite of multiple words",
        "step_num": 10,
        "step_name": "I should see \"Post categories: Sci-Fi Movi3s, vintage\" in \"_site/sci-fi-movi3s/vintage/2020/04/03/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.slugified_categories to generate URL when category is a composite of multiple words",
        "step_num": 11,
        "step_name": "I should see \"Post URL: /sci-fi-movi3s/vintage/2020/04/03/star-wars.html\" in \"_site/sci-fi-movi3s/vintage/2020/04/03/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.tags variable",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.tags variable",
        "step_num": 2,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.tags variable",
        "step_num": 3,
        "step_name": "I have the following post",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.tags variable",
        "step_num": 4,
        "step_name": "I have a simple layout that contains \"Post tags: {{ page.tags }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.tags variable",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.tags variable",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.tags variable",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.tags variable",
        "step_num": 8,
        "step_name": "I should see \"Post tags: twist\" in \"_site/2009/05/18/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders",
        "step_num": 1,
        "step_name": "I have a scifi directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders",
        "step_num": 2,
        "step_name": "I have a scifi/movies directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders",
        "step_num": 3,
        "step_name": "I have a scifi/movies/_posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders",
        "step_num": 4,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders",
        "step_num": 5,
        "step_name": "I have the following post in \"scifi/movies\"",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders",
        "step_num": 6,
        "step_name": "I have a simple layout that contains \"Post categories: {{ page.categories | array_to_sentence_string }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders",
        "step_num": 7,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders",
        "step_num": 8,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders",
        "step_num": 9,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders",
        "step_num": 10,
        "step_name": "I should see \"Post categories: scifi and movies\" in \"_site/scifi/movies/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders with mixed case",
        "step_num": 1,
        "step_name": "I have a scifi directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders with mixed case",
        "step_num": 2,
        "step_name": "I have a scifi/Movies directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders with mixed case",
        "step_num": 3,
        "step_name": "I have a scifi/Movies/_posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders with mixed case",
        "step_num": 4,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders with mixed case",
        "step_num": 5,
        "step_name": "I have the following post in \"scifi/Movies\"",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders with mixed case",
        "step_num": 6,
        "step_name": "I have a simple layout that contains \"Post categories: {{ page.categories | array_to_sentence_string }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders with mixed case",
        "step_num": 7,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders with mixed case",
        "step_num": 8,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders with mixed case",
        "step_num": 9,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in folders with mixed case",
        "step_num": 10,
        "step_name": "I should see \"Post categories: scifi and Movies\" in \"_site/scifi/movies/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in YAML",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in YAML",
        "step_num": 2,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in YAML",
        "step_num": 3,
        "step_name": "I have the following post",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in YAML",
        "step_num": 4,
        "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in YAML",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in YAML",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in YAML",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in YAML",
        "step_num": 8,
        "step_name": "I should see \"Post category: movies\" in \"_site/movies/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in YAML and is mixed-case",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in YAML and is mixed-case",
        "step_num": 2,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in YAML and is mixed-case",
        "step_num": 3,
        "step_name": "I have the following post",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in YAML and is mixed-case",
        "step_num": 4,
        "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in YAML and is mixed-case",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in YAML and is mixed-case",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in YAML and is mixed-case",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when category is in YAML and is mixed-case",
        "step_num": 8,
        "step_name": "I should see \"Post category: Movies\" in \"_site/movies/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML",
        "step_num": 2,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML",
        "step_num": 3,
        "step_name": "I have the following post",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML",
        "step_num": 4,
        "step_name": "I have a simple layout that contains \"Post categories: {{ page.categories | array_to_sentence_string }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML",
        "step_num": 8,
        "step_name": "I should see \"Post categories: scifi and movies\" in \"_site/scifi/movies/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML and are duplicated",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML and are duplicated",
        "step_num": 2,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML and are duplicated",
        "step_num": 3,
        "step_name": "I have the following post",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML and are duplicated",
        "step_num": 4,
        "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML and are duplicated",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML and are duplicated",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML and are duplicated",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML and are duplicated",
        "step_num": 8,
        "step_name": "I should see \"Post category: movies\" in \"_site/movies/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Superdirectories of _posts applied to post.categories",
        "step_num": 1,
        "step_name": "I have a movies/_posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Superdirectories of _posts applied to post.categories",
        "step_num": 2,
        "step_name": "I have a \"movies/_posts/2009-03-27-star-wars.html\" page with layout \"simple\" that contains \"hi\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Superdirectories of _posts applied to post.categories",
        "step_num": 3,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Superdirectories of _posts applied to post.categories",
        "step_num": 4,
        "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Superdirectories of _posts applied to post.categories",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Superdirectories of _posts applied to post.categories",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Superdirectories of _posts applied to post.categories",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Superdirectories of _posts applied to post.categories",
        "step_num": 8,
        "step_name": "I should see \"Post category: movies\" in \"_site/movies/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Subdirectories of _posts not applied to post.categories",
        "step_num": 1,
        "step_name": "I have a movies/_posts/scifi directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Subdirectories of _posts not applied to post.categories",
        "step_num": 2,
        "step_name": "I have a \"movies/_posts/scifi/2009-03-27-star-wars.html\" page with layout \"simple\" that contains \"hi\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$!) do |file, key, value, text|\n  File.write(file, <<~DATA)\n    ---\n    #{key || \"layout\"}: #{value || \"none\"}\n    ---\n\n    #{text}\n  DATA\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Subdirectories of _posts not applied to post.categories",
        "step_num": 3,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Subdirectories of _posts not applied to post.categories",
        "step_num": 4,
        "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Subdirectories of _posts not applied to post.categories",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Subdirectories of _posts not applied to post.categories",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Subdirectories of _posts not applied to post.categories",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Subdirectories of _posts not applied to post.categories",
        "step_num": 8,
        "step_name": "I should see \"Post category: movies\" in \"_site/movies/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML with mixed case",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML with mixed case",
        "step_num": 2,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML with mixed case",
        "step_num": 3,
        "step_name": "I have the following posts",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML with mixed case",
        "step_num": 4,
        "step_name": "I have a simple layout that contains \"Post categories: {{ page.categories | array_to_sentence_string }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML with mixed case",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML with mixed case",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML with mixed case",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML with mixed case",
        "step_num": 8,
        "step_name": "I should see \"Post categories: scifi and Movies\" in \"_site/scifi/movies/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use post.categories variable when categories are in YAML with mixed case",
        "step_num": 9,
        "step_name": "I should see \"Post categories: SciFi and movies\" in \"_site/scifi/movies/2013/03/17/star-trek.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.render_with_liquid variable",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.render_with_liquid variable",
        "step_num": 2,
        "step_name": "I have the following posts",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.render_with_liquid variable",
        "step_num": 3,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.render_with_liquid variable",
        "step_num": 4,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.render_with_liquid variable",
        "step_num": 5,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.render_with_liquid variable",
        "step_num": 6,
        "step_name": "I should not see \"Hello Unrendered Post\" in \"_site/2017/07/06/unrendered-post.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.render_with_liquid variable",
        "step_num": 7,
        "step_name": "I should see \"Hello {{ page.title }}\" in \"_site/2017/07/06/unrendered-post.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.render_with_liquid variable",
        "step_num": 8,
        "step_name": "I should see \"Hello Rendered Post\" in \"_site/2017/07/06/rendered-post.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.path variable",
        "step_num": 1,
        "step_name": "I have a <dir>/_posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.path variable",
        "step_num": 2,
        "step_name": "I have the following post in \"<dir>\"",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.path variable",
        "step_num": 3,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.path variable",
        "step_num": 4,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.path variable",
        "step_num": 5,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use page.path variable",
        "step_num": 6,
        "step_name": "I should see \"Source path: <path_prefix>_posts/2013-04-12-my-post.html\" in \"_site/<dir>/2013/04/12/my-post.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Cannot override page.path variable",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Cannot override page.path variable",
        "step_num": 2,
        "step_name": "I have the following post",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Cannot override page.path variable",
        "step_num": 3,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Cannot override page.path variable",
        "step_num": 4,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Cannot override page.path variable",
        "step_num": 5,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Cannot override page.path variable",
        "step_num": 6,
        "step_name": "I should see \"Non-custom path: _posts/2013-04-12-override.markdown\" in \"_site/2013/04/12/override.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Disable a post from being published",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Disable a post from being published",
        "step_num": 2,
        "step_name": "I have an \"index.html\" file that contains \"Published!\"",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file that contains \"(.*)\"$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Disable a post from being published",
        "step_num": 3,
        "step_name": "I have the following post",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Disable a post from being published",
        "step_num": 4,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Disable a post from being published",
        "step_num": 5,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Disable a post from being published",
        "step_num": 6,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Disable a post from being published",
        "step_num": 7,
        "step_name": "the \"_site/2009/03/27/star-wars.html\" file should not exist",
        "glue_code": "Then(%r!^the \"(.*)\" file should +(not )?exist$!) do |file, negative|\n  if negative.nil?\n    expect(Pathname.new(file)).to exist\n  else\n    expect(Pathname.new(file)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Disable a post from being published",
        "step_num": 8,
        "step_name": "I should see \"Published!\" in \"_site/index.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use a custom variable",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use a custom variable",
        "step_num": 2,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use a custom variable",
        "step_num": 3,
        "step_name": "I have the following post",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use a custom variable",
        "step_num": 4,
        "step_name": "I have a simple layout that contains \"Post author: {{ page.author }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use a custom variable",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use a custom variable",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use a custom variable",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use a custom variable",
        "step_num": 8,
        "step_name": "I should see \"Post author: Darth Vader\" in \"_site/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use a variable which is a reserved keyword in Ruby",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use a variable which is a reserved keyword in Ruby",
        "step_num": 2,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use a variable which is a reserved keyword in Ruby",
        "step_num": 3,
        "step_name": "I have the following post",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use a variable which is a reserved keyword in Ruby",
        "step_num": 4,
        "step_name": "I have a simple layout that contains \"{{page.title}} has class {{page.class}}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use a variable which is a reserved keyword in Ruby",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use a variable which is a reserved keyword in Ruby",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use a variable which is a reserved keyword in Ruby",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Use a variable which is a reserved keyword in Ruby",
        "step_num": 8,
        "step_name": "I should see \"My post has class kewl-post\" in \"_site/2016/01/21/my-post.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Previous and next posts title",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Previous and next posts title",
        "step_num": 2,
        "step_name": "I have a _layouts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Previous and next posts title",
        "step_num": 3,
        "step_name": "I have the following posts",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Previous and next posts title",
        "step_num": 4,
        "step_name": "I have a ordered layout that contains \"Previous post: {{ page.previous.title }} and next post: {{ page.next.title }}\"",
        "glue_code": "Given(%r!^I have an? (.*) (layout|theme) that contains \"(.*)\"$!) do |name, type, text|\n  folder = type == \"layout\" ? \"_layouts\" : \"_theme\"\n\n  destination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\n  FileUtils.mkdir_p(destination_file.parent) unless destination_file.parent.directory?\n  File.write(destination_file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Previous and next posts title",
        "step_num": 5,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Previous and next posts title",
        "step_num": 6,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Previous and next posts title",
        "step_num": 7,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Previous and next posts title",
        "step_num": 8,
        "step_name": "I should see \"next post: Some like it hot\" in \"_site/2009/03/27/star-wars.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Previous and next posts title",
        "step_num": 9,
        "step_name": "I should see \"Previous post: Some like it hot\" in \"_site/2009/05/27/terminator.html\"",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in \"(.*)\"$!) do |negative, text, file|\n  step %(the \"#{file}\" file should exist)\n  regexp = Regexp.new(text, Regexp::MULTILINE)\n  if negative.nil? || negative.empty?\n    expect(file_contents(file)).to match regexp\n  else\n    expect(file_contents(file)).not_to match regexp\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Deprecate calling data keys directly via Ruby",
        "step_num": 1,
        "step_name": "I have a _posts directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Deprecate calling data keys directly via Ruby",
        "step_num": 2,
        "step_name": "I have a _plugins directory",
        "glue_code": "Given(%r!^I have an? (.*) directory$!) do |dir|\n  unless File.directory?(dir)\n    then FileUtils.mkdir_p(dir)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Deprecate calling data keys directly via Ruby",
        "step_num": 3,
        "step_name": "I have the following post",
        "glue_code": "Given(%r!^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$!) do |status, direction, folder, table|\n  table.hashes.each do |input_hash|\n    title = slug(input_hash[\"title\"])\n    ext = input_hash[\"type\"] || \"markdown\"\n    filename = \"#{title}.#{ext}\" if %w(draft page).include?(status)\n    before, after = location(folder, direction)\n    dest_folder = \"_drafts\" if status == \"draft\"\n    dest_folder = \"_posts\"  if status == \"post\"\n    dest_folder = \"\" if status == \"page\"\n\n    if status == \"post\"\n      parsed_date = Time.xmlschema(input_hash[\"date\"]) rescue Time.parse(input_hash[\"date\"])\n      input_hash[\"date\"] = parsed_date\n      filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n    end\n\n    path = File.join(before, dest_folder, after, filename)\n    File.write(path, file_content_from_hash(input_hash))\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Deprecate calling data keys directly via Ruby",
        "step_num": 4,
        "step_name": "I have a \"_plugins/foo.rb\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Deprecate calling data keys directly via Ruby",
        "step_num": 5,
        "step_name": "I have a \"_plugins/bar.rb\" file with content",
        "glue_code": "Given(%r!^I have an? \"(.*)\" file with content:$!) do |file, text|\n  File.write(file, text)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Deprecate calling data keys directly via Ruby",
        "step_num": 6,
        "step_name": "I run jekyll build",
        "glue_code": "When(%r!^I run jekyll(.*)$!) do |args|\n  run_jekyll(args)\n  if args.include?(\"--verbose\") || ENV[\"DEBUG\"]\n    warn \"\\n#{jekyll_run_output}\\n\"\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Deprecate calling data keys directly via Ruby",
        "step_num": 7,
        "step_name": "I should get a zero exit status",
        "glue_code": "Then(%r!^I should get a zero exit(?:-| )status$!) do\n  step %(I should see \"EXIT STATUS: 0\" in the build output)\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Deprecate calling data keys directly via Ruby",
        "step_num": 8,
        "step_name": "the _site directory should exist",
        "glue_code": "Then(%r!^the (.*) directory should +(not )?exist$!) do |dir, negative|\n  if negative.nil?\n    expect(Pathname.new(dir)).to exist\n  else\n    expect(Pathname.new(dir)).to_not exist\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Deprecate calling data keys directly via Ruby",
        "step_num": 9,
        "step_name": "I should see \"Deprecation: Document#title\" in the build output",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in the build output$!) do |negative, text|\n  if negative.nil? || negative.empty?\n    expect(jekyll_run_output).to match Regexp.new(text)\n  else\n    expect(jekyll_run_output).not_to match Regexp.new(text)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Deprecate calling data keys directly via Ruby",
        "step_num": 10,
        "step_name": "I should see \"_plugins/foo.rb:2\" in the build output",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in the build output$!) do |negative, text|\n  if negative.nil? || negative.empty?\n    expect(jekyll_run_output).to match Regexp.new(text)\n  else\n    expect(jekyll_run_output).not_to match Regexp.new(text)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Deprecate calling data keys directly via Ruby",
        "step_num": 11,
        "step_name": "I should see \"_plugins/bar.rb:3\" in the build output",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in the build output$!) do |negative, text|\n  if negative.nil? || negative.empty?\n    expect(jekyll_run_output).to match Regexp.new(text)\n  else\n    expect(jekyll_run_output).not_to match Regexp.new(text)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    },
    {
        "feature_file": "post_data.feature",
        "scenario": "Deprecate calling data keys directly via Ruby",
        "step_num": 12,
        "step_name": "I should not see \"lib/jekyll/document.rb\" in the build output",
        "glue_code": "Then(%r!^I should (not )?see \"(.*)\" in the build output$!) do |negative, text|\n  if negative.nil? || negative.empty?\n    expect(jekyll_run_output).to match Regexp.new(text)\n  else\n    expect(jekyll_run_output).not_to match Regexp.new(text)\n  end\nend\n\n",
        "glue_code_file": "step_definitions.rb",
        "language": "ruby"
    }
]