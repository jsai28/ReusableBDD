[
    {
        "feature_file": "cache.feature",
        "test_num": 1,
        "test_case": "Default Cache directory",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.md\" page that contains \"{{ site.title }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with \"title\" set to \"Hello World\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the .jekyll-cache directory should exist",
                "step_name_cleaned": "the .jekyll-cache directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the .jekyll-cache/Jekyll/Cache/Jekyll--Cache directory should exist",
                "step_name_cleaned": "the .jekyll-cache/Jekyll/Cache/Jekyll--Cache directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"<p>Hello World</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "cache.feature",
        "test_num": 2,
        "test_case": "Custom Cache directory",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.md\" page that contains \"{{ site.title }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the .foo-cache directory should exist",
                "step_name_cleaned": "the .foo-cache directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the .foo-cache/Jekyll/Cache/Jekyll--Cache directory should exist",
                "step_name_cleaned": "the .foo-cache/Jekyll/Cache/Jekyll--Cache directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the .jekyll-cache directory should not exist",
                "step_name_cleaned": "the .jekyll-cache directory should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"<p>Hello World</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "cache.feature",
        "test_num": 3,
        "test_case": "Disk usage in safe mode",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.md\" page that contains \"{{ site.title }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with \"title\" set to \"Hello World\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build --safe",
                "step_name_cleaned": "I run jekyll build --safe",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the .jekyll-cache directory should not exist",
                "step_name_cleaned": "the .jekyll-cache directory should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"<p>Hello World</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "cache.feature",
        "test_num": 4,
        "test_case": "Disabling disk usage in non-safe mode",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.md\" page that contains \"{{ site.title }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with \"title\" set to \"Hello World\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build --disable-disk-cache",
                "step_name_cleaned": "I run jekyll build --disable-disk-cache",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"<p>Hello World</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the .jekyll-cache directory should not exist",
                "step_name_cleaned": "the .jekyll-cache directory should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 5,
        "test_case": "Unrendered collection",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Collections: {{ site.methods }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_methods/static-file.txt\" file that contains \"Static Content {{ site.title }}\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a configuration file with \"collections\" set to \"['methods']\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site/methods directory should not exist",
                "step_name_cleaned": "the _site/methods directory should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/methods/configuration.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the \"_site/methods/static-file.txt\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 6,
        "test_case": "Rendered collection",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Collections: output => {{ site.collections[0].output }} label => {{ site.collections[0].label }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"collection_metadata.html\" page that contains \"Methods metadata: {{ site.collections[0].foo }} {{ site.collections[0] }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_methods/static-file.txt\" file that contains \"Static Content {{ site.title }}\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Collections: output => true\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"label => methods\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Methods metadata: bar\" in \"_site/collection_metadata.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"<p>Whatever: foo.bar</p>\" in \"_site/methods/configuration.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"Static Content {{ site.title }}\" in \"_site/methods/static-file.txt\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 7,
        "test_case": "Rendered collection at a custom URL",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Collections: {{ site.collections }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"<p>Whatever: foo.bar</p>\" in \"_site/methods/configuration/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 8,
        "test_case": "Rendered document in a layout",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Collections: output => {{ site.collections[0].output }} label => {{ site.collections[0].label }} foo => {{ site.collections[0].foo }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a default layout that contains \"<div class='title'>Tom Preston-Werner</div> {{content}}\"",
                "step_name_cleaned": "I have a default layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Collections: output => true\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"label => methods\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"foo => bar\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"<p>Run your generators! default</p>\" in \"_site/methods/site/generate.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"<div class='title'>Tom Preston-Werner</div>\" in \"_site/methods/site/generate.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 9,
        "test_case": "Collections specified as an array",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Collections: {% for method in site.methods %}{{ method.relative_path }} {% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Collections: _methods/3940394-21-9393050-fifif1323-test.md _methods/collection/entries _methods/configuration.md _methods/escape-\\+ #%20\\[\\].md _methods/sanitized_path.md _methods/site/generate.md _methods/site/initialize.md _methods/trailing-dots...md _methods/um_hi.md\" in \"_site/index.html\" unless Windows",
                "step_name_cleaned": "I should see \"\" in \"\" unless Windows",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  if Jekyll::Utils::Platforms.really_windows?\n    expect(file_contents(file)).not_to(match(regexp))\n  else\n    expect(file_contents(file)).to(match(regexp))\n  end\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Collections: _methods/3940394-21-9393050-fifif1323-test.md _methods/collection/entries _methods/configuration.md _methods/escape-\\+ #%20\\[\\].md _methods/sanitized_path.md _methods/site/generate.md _methods/site/initialize.md _methods/trailing-dots...md _methods/yaml_with_dots.md\" in \"_site/index.html\" if on Windows",
                "step_name_cleaned": "I should see \"\" in \"\" if on Windows",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  if Jekyll::Utils::Platforms.really_windows?\n    expect(file_contents(file)).to(match(regexp))\n  else\n    expect(file_contents(file)).not_to(match(regexp))\n  end\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 10,
        "test_case": "Collections specified as an hash",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Collections: {% for method in site.methods %}{{ method.relative_path }} {% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Collections: _methods/3940394-21-9393050-fifif1323-test.md _methods/collection/entries _methods/configuration.md _methods/escape-\\+ #%20\\[\\].md _methods/sanitized_path.md _methods/site/generate.md _methods/site/initialize.md _methods/trailing-dots...md _methods/um_hi.md\" in \"_site/index.html\" unless Windows",
                "step_name_cleaned": "I should see \"\" in \"\" unless Windows",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  if Jekyll::Utils::Platforms.really_windows?\n    expect(file_contents(file)).not_to(match(regexp))\n  else\n    expect(file_contents(file)).to(match(regexp))\n  end\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Collections: _methods/3940394-21-9393050-fifif1323-test.md _methods/collection/entries _methods/configuration.md _methods/escape-\\+ #%20\\[\\].md _methods/sanitized_path.md _methods/site/generate.md _methods/site/initialize.md _methods/trailing-dots...md _methods/yaml_with_dots.md\" in \"_site/index.html\" if on Windows",
                "step_name_cleaned": "I should see \"\" in \"\" if on Windows",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  if Jekyll::Utils::Platforms.really_windows?\n    expect(file_contents(file)).to(match(regexp))\n  else\n    expect(file_contents(file)).not_to(match(regexp))\n  end\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 11,
        "test_case": "Rendered collection with document with future date",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _puppies directory",
                "step_name_cleaned": "I have a _puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following documents under the puppies collection",
                "step_name_cleaned": "I have the following documents under the puppies collection",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  filename = \"#{title}.md\"\n  dest_folder = \"_#{folder}\"\n  path = File.join(dest_folder, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"content for Rover\" in \"_site/puppies/rover.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the \"_site/puppies/fido.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I run jekyll build --future",
                "step_name_cleaned": "I run jekyll build --future",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the \"_site/puppies/fido.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 12,
        "test_case": "Access rendered collection with future dated document via Liquid",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _puppies directory",
                "step_name_cleaned": "I have a _puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following documents under the puppies collection",
                "step_name_cleaned": "I have the following documents under the puppies collection",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  filename = \"#{title}.md\"\n  dest_folder = \"_#{folder}\"\n  path = File.join(dest_folder, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"index.html\" page that contains \"Newest puppy: {% assign puppy = site.puppies.last %}{{ puppy.title }}\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Newest puppy: Fido\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/puppies/fido.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I run jekyll build --future",
                "step_name_cleaned": "I run jekyll build --future",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"Newest puppy: Fido\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "the \"_site/puppies/fido.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 13,
        "test_case": "Access rendered and published collection documents via Liquid",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _puppies directory",
                "step_name_cleaned": "I have a _puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following documents under the puppies collection",
                "step_name_cleaned": "I have the following documents under the puppies collection",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  filename = \"#{title}.md\"\n  dest_folder = \"_#{folder}\"\n  path = File.join(dest_folder, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"index.md\" page that contains \"{% for puppy in site.puppies %}<div>{{ puppy.title }}</div>{% endfor %}\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should not see \"<div>Figor</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should not see \"<div>Hardy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the \"_site/puppies/rover.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "the \"_site/puppies/figor.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "the \"_site/puppies/snowy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I run jekyll build --future",
                "step_name_cleaned": "I run jekyll build --future",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 18,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 19,
                "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 20,
                "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 21,
                "step_name": "I should not see \"<div>Figor</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 22,
                "step_name": "I should not see \"<div>Hardy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 23,
                "step_name": "the \"_site/puppies/rover.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 24,
                "step_name": "the \"_site/puppies/figor.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 25,
                "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 26,
                "step_name": "the \"_site/puppies/snowy.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 14,
        "test_case": "Unrendered collection with future dated document",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _puppies directory",
                "step_name_cleaned": "I have a _puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following documents under the puppies collection",
                "step_name_cleaned": "I have the following documents under the puppies collection",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  filename = \"#{title}.md\"\n  dest_folder = \"_#{folder}\"\n  path = File.join(dest_folder, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"foo.txt\" file that contains \"random static file\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the \"_site/puppies/rover.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/puppies/fido.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I run jekyll build --future",
                "step_name_cleaned": "I run jekyll build --future",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "the \"_site/puppies/fido.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 15,
        "test_case": "Access unrendered collection with future dated document via Liquid",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _puppies directory",
                "step_name_cleaned": "I have a _puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following documents under the puppies collection",
                "step_name_cleaned": "I have the following documents under the puppies collection",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  filename = \"#{title}.md\"\n  dest_folder = \"_#{folder}\"\n  path = File.join(dest_folder, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"index.html\" page that contains \"Newest puppy: {% assign puppy = site.puppies.last %}{{ puppy.title }}\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Newest puppy: Fido\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/puppies/fido.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I run jekyll build --future",
                "step_name_cleaned": "I run jekyll build --future",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"Newest puppy: Fido\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "the \"_site/puppies/fido.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 16,
        "test_case": "Access unrendered but publishable collection documents via Liquid",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _puppies directory",
                "step_name_cleaned": "I have a _puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following documents under the puppies collection",
                "step_name_cleaned": "I have the following documents under the puppies collection",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  filename = \"#{title}.md\"\n  dest_folder = \"_#{folder}\"\n  path = File.join(dest_folder, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"index.md\" page that contains \"{% for puppy in site.puppies %}<div>{{ puppy.title }}</div>{% endfor %}\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should not see \"<div>Figor</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should not see \"<div>Hardy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the \"_site/puppies/rover.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "the \"_site/puppies/figor.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "the \"_site/puppies/snowy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I run jekyll build --future",
                "step_name_cleaned": "I run jekyll build --future",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 18,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 19,
                "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 20,
                "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 21,
                "step_name": "I should not see \"<div>Figor</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 22,
                "step_name": "I should not see \"<div>Hardy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 23,
                "step_name": "the \"_site/puppies/rover.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 24,
                "step_name": "the \"_site/puppies/figor.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 25,
                "step_name": "the \"_site/puppies/snowy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 26,
                "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 17,
        "test_case": "Access rendered collection with future date and unpublished flag via Liquid",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _puppies directory",
                "step_name_cleaned": "I have a _puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following documents under the puppies collection",
                "step_name_cleaned": "I have the following documents under the puppies collection",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  filename = \"#{title}.md\"\n  dest_folder = \"_#{folder}\"\n  path = File.join(dest_folder, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"index.md\" page that contains \"{% for puppy in site.puppies %}<div>{{ puppy.title }}</div>{% endfor %}\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should not see \"<div>Figor</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should not see \"<div>Hardy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the \"_site/puppies/rover.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "the \"_site/puppies/snowy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "the \"_site/puppies/figor.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I run jekyll build --unpublished",
                "step_name_cleaned": "I run jekyll build --unpublished",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 18,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 19,
                "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 20,
                "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 21,
                "step_name": "I should see \"<div>Figor</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 22,
                "step_name": "I should see \"<div>Hardy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 23,
                "step_name": "the \"_site/puppies/rover.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 24,
                "step_name": "the \"_site/puppies/snowy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 25,
                "step_name": "the \"_site/puppies/figor.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 26,
                "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 27,
                "step_name": "I run jekyll build --unpublished --future",
                "step_name_cleaned": "I run jekyll build --unpublished --future",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 28,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 29,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 30,
                "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 31,
                "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 32,
                "step_name": "I should see \"<div>Figor</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 33,
                "step_name": "I should see \"<div>Hardy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 34,
                "step_name": "the \"_site/puppies/rover.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 35,
                "step_name": "the \"_site/puppies/snowy.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 36,
                "step_name": "the \"_site/puppies/figor.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 37,
                "step_name": "the \"_site/puppies/hardy.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 18,
        "test_case": "Access unrendered collection with future date and unpublished flag via Liquid",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _puppies directory",
                "step_name_cleaned": "I have a _puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following documents under the puppies collection",
                "step_name_cleaned": "I have the following documents under the puppies collection",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  filename = \"#{title}.md\"\n  dest_folder = \"_#{folder}\"\n  path = File.join(dest_folder, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"index.md\" page that contains \"{% for puppy in site.puppies %}<div>{{ puppy.title }}</div>{% endfor %}\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should not see \"<div>Figor</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should not see \"<div>Hardy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the \"_site/puppies/rover.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "the \"_site/puppies/snowy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "the \"_site/puppies/figor.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I run jekyll build --unpublished",
                "step_name_cleaned": "I run jekyll build --unpublished",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 18,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 19,
                "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 20,
                "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 21,
                "step_name": "I should see \"<div>Figor</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 22,
                "step_name": "I should see \"<div>Hardy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 23,
                "step_name": "the \"_site/puppies/rover.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 24,
                "step_name": "the \"_site/puppies/snowy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 25,
                "step_name": "the \"_site/puppies/figor.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 26,
                "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 27,
                "step_name": "I run jekyll build --unpublished --future",
                "step_name_cleaned": "I run jekyll build --unpublished --future",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 28,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 29,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 30,
                "step_name": "I should see \"<div>Rover</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 31,
                "step_name": "I should see \"<div>Snowy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 32,
                "step_name": "I should see \"<div>Figor</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 33,
                "step_name": "I should see \"<div>Hardy</div>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 34,
                "step_name": "the \"_site/puppies/rover.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 35,
                "step_name": "the \"_site/puppies/snowy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 36,
                "step_name": "the \"_site/puppies/figor.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 37,
                "step_name": "the \"_site/puppies/hardy.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 19,
        "test_case": "All the documents",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"All documents: {% for doc in site.documents %}{{ doc.relative_path }} {% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"All documents: _methods/3940394-21-9393050-fifif1323-test.md _methods/collection/entries _methods/configuration.md _methods/escape-\\+ #%20\\[\\].md _methods/sanitized_path.md _methods/site/generate.md _methods/site/initialize.md _methods/trailing-dots...md _methods/um_hi.md\" in \"_site/index.html\" unless Windows",
                "step_name_cleaned": "I should see \"\" in \"\" unless Windows",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  if Jekyll::Utils::Platforms.really_windows?\n    expect(file_contents(file)).not_to(match(regexp))\n  else\n    expect(file_contents(file)).to(match(regexp))\n  end\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"All documents: _methods/3940394-21-9393050-fifif1323-test.md _methods/collection/entries _methods/configuration.md _methods/escape-\\+ #%20\\[\\].md _methods/sanitized_path.md _methods/site/generate.md _methods/site/initialize.md _methods/trailing-dots...md _methods/yaml_with_dots.md\" in \"_site/index.html\" if on Windows",
                "step_name_cleaned": "I should see \"\" in \"\" if on Windows",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  if Jekyll::Utils::Platforms.really_windows?\n    expect(file_contents(file)).to(match(regexp))\n  else\n    expect(file_contents(file)).not_to(match(regexp))\n  end\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 20,
        "test_case": "Documents have an output attribute, which is the converted HTML",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Second document's output: {{ site.documents[2].output }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Second document's output: <p>Use <code class=\\\"language-plaintext highlighter-rouge\\\">Jekyll.configuration</code> to build a full configuration for use w/Jekyll.</p>\\n\\n<p>Whatever: foo.bar</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"language-plaintext highlighter-rouge\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 21,
        "test_case": "Documents have an output attribute, which is the converted HTML based on site.config",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Second document's output: {{ site.documents[2].output }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Second document's output: <p>Use <code>Jekyll.configuration</code> to build a full configuration for use w/Jekyll.</p>\\n\\n<p>Whatever: foo.bar</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 22,
        "test_case": "Filter documents by where",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"{% assign items = site.methods | where: 'whatever','foo.bar' %}Item count: {{ items.size }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Item count: 2\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 23,
        "test_case": "Sort by title",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"{% assign items = site.methods | sort: 'title' %}2. of {{ items.size }}: {{ items[2].output }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"2. of 10: <p>Page without title.</p>\" in \"_site/index.html\" unless Windows",
                "step_name_cleaned": "I should see \"\" in \"\" unless Windows",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  if Jekyll::Utils::Platforms.really_windows?\n    expect(file_contents(file)).not_to(match(regexp))\n  else\n    expect(file_contents(file)).to(match(regexp))\n  end\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"2. of 9: <p>Page without title.</p>\" in \"_site/index.html\" if on Windows",
                "step_name_cleaned": "I should see \"\" in \"\" if on Windows",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  if Jekyll::Utils::Platforms.really_windows?\n    expect(file_contents(file)).to(match(regexp))\n  else\n    expect(file_contents(file)).not_to(match(regexp))\n  end\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 24,
        "test_case": "Sort by relative_path",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Collections: {% assign methods = site.methods | sort: 'relative_path' %}{{ methods | map:\"title\" | join: \", \" }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"title\"\", \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Collections: this is a test!, Collection#entries, Jekyll.configuration, Jekyll.escape, Jekyll.sanitized_path, Site#generate, Initialize, Ellipsis Path, Site#generate, YAML with Dots\" in \"_site/index.html\" unless Windows",
                "step_name_cleaned": "I should see \"\" in \"\" unless Windows",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  if Jekyll::Utils::Platforms.really_windows?\n    expect(file_contents(file)).not_to(match(regexp))\n  else\n    expect(file_contents(file)).to(match(regexp))\n  end\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Collections: this is a test!, Collection#entries, Jekyll.configuration, Jekyll.escape, Jekyll.sanitized_path, Site#generate, Initialize, Ellipsis Path, YAML with Dots\" in \"_site/index.html\" if on Windows",
                "step_name_cleaned": "I should see \"\" in \"\" if on Windows",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  if Jekyll::Utils::Platforms.really_windows?\n    expect(file_contents(file)).to(match(regexp))\n  else\n    expect(file_contents(file)).not_to(match(regexp))\n  end\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 25,
        "test_case": "Sort all entries by a Front Matter key defined in all entries",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Collections: {{ site.tutorials | map: 'title' | join: ', ' }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_layouts/tutorial.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Collections: Getting Started, Let's Roll!, Dive-In and Publish Already!, Tip of the Iceberg, Extending with Plugins, Graduation Day\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should not see \"Previous: Graduation Day\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should not see \"Next: Tip of the Iceberg\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"Previous: Getting Started\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"Next: Dive-In and Publish Already!\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 26,
        "test_case": "Sort all entries by a Front Matter key defined in only some entries",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Collections: {{ site.tutorials | map: 'title' | join: ', ' }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_layouts/tutorial.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"'approx_time' not defined\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"Collections: Extending with Plugins, Let's Roll!, Getting Started, Graduation Day, Dive-In and Publish Already!, Tip of the Iceberg\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Previous: Getting Started\" in \"_site/tutorials/graduation-day.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"Next: Dive-In and Publish Already!\" in \"_site/tutorials/graduation-day.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 27,
        "test_case": "Manually sort entries",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Collections: {{ site.tutorials | map: 'title' | join: ', ' }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_layouts/tutorial.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Collections: Getting Started, Tip of the Iceberg, Let's Roll!, Dive-In and Publish Already!, Graduation Day, Extending with Plugins\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should not see \"Previous: Graduation Day\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should not see \"Next: Tip of the Iceberg\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"Previous: Tip of the Iceberg\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"Next: Dive-In and Publish Already!\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 28,
        "test_case": "Manually sort some entries",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Collections: {{ site.tutorials | map: 'title' | join: ', ' }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_layouts/tutorial.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Collections: Getting Started, Let's Roll!, Dive-In and Publish Already!, Graduation Day, Extending with Plugins, Tip of the Iceberg\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should not see \"Previous: Graduation Day\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should not see \"Previous: Tip of the Iceberg\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should not see \"Next: Tip of the Iceberg\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"Previous: Getting Started\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see \"Next: Dive-In and Publish Already!\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 29,
        "test_case": "Rendered collection with date/dateless filename",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Collections: {% for method in site.thanksgiving %}{{ method.title }} {% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Thanksgiving Black Friday\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Happy Thanksgiving\" in \"_site/thanksgiving/2015-11-26-thanksgiving.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Black Friday\" in \"_site/thanksgiving/black-friday.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 30,
        "test_case": "Rendered collection with custom permalinks and static file contents",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"I have no front matter.\" in \"_site/methods/extensionless_static_file\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 31,
        "test_case": "Rendered collection with an extensionless document",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"I have no file extension but I should still be a part of the collection.\" in \"_site/methods/collection/entries\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections.feature",
        "test_num": 32,
        "test_case": "Rendered collection with an extensionless document in a strict site",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have fixture collections",
                "step_name_cleaned": "I have fixture collections",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"_posts/2019-12-26-extensioned.md\" file that contains \"Hello!\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"_posts/2019-12-26-extensionless\" file that contains \"Aloha!\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have an \"index.md\" page that contains \"{{ site.posts | map: 'title' }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"I have no file extension but I should still be a part of the collection.\" in \"_site/methods/collection/entries\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Extensioned\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should not see \"Extensionless\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections_dir.feature",
        "test_num": 33,
        "test_case": "Custom collections_dir containing only posts",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a collections/_posts directory",
                "step_name_cleaned": "I have a collections/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post within the \"collections\" directory",
                "step_name_cleaned": "I have the following post within the \"\" directory",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n  filename = if type == \"draft\"\n    \"#{title}.markdown\"\n  else\n    \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.markdown\"\n  end\n  path = File.join(folder, \"_#{type}s\", filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Random Content.\" in \"_site/2009/03/27/gathered-post.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections_dir.feature",
        "test_num": 34,
        "test_case": "Rendered collection in custom collections_dir also containing posts",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a collections/_puppies directory",
                "step_name_cleaned": "I have a collections/_puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following document under the \"puppies\" collection within the \"collections\" directory",
                "step_name_cleaned": "I have the following document under the \"\" collection within the \"\" directory",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  path = File.join(dir, \"_#{label}\", \"#{title}.md\")\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a collections/_posts directory",
                "step_name_cleaned": "I have a collections/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post within the \"collections\" directory",
                "step_name_cleaned": "I have the following post within the \"\" directory",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n  filename = if type == \"draft\"\n    \"#{title}.markdown\"\n  else\n    \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.markdown\"\n  end\n  path = File.join(folder, \"_#{type}s\", filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/puppies/rover.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"Random Content.\" in \"_site/2009/03/27/gathered-post.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections_dir.feature",
        "test_num": 35,
        "test_case": "Rendered collection in custom collections_dir with posts at the site root",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a collections/_puppies directory",
                "step_name_cleaned": "I have a collections/_puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following document under the \"puppies\" collection within the \"collections\" directory",
                "step_name_cleaned": "I have the following document under the \"\" collection within the \"\" directory",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  path = File.join(dir, \"_#{label}\", \"#{title}.md\")\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/puppies/rover.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the \"_site/2009/03/27/post-at-root.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "the _site/_posts directory should not exist",
                "step_name_cleaned": "the _site/_posts directory should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections_dir.feature",
        "test_num": 36,
        "test_case": "Rendered collection in custom collections_dir also containing drafts",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a collections/_puppies directory",
                "step_name_cleaned": "I have a collections/_puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following document under the \"puppies\" collection within the \"collections\" directory",
                "step_name_cleaned": "I have the following document under the \"\" collection within the \"\" directory",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  path = File.join(dir, \"_#{label}\", \"#{title}.md\")\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a collections/_drafts directory",
                "step_name_cleaned": "I have a collections/_drafts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following draft within the \"collections\" directory",
                "step_name_cleaned": "I have the following draft within the \"\" directory",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n  filename = if type == \"draft\"\n    \"#{title}.markdown\"\n  else\n    \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.markdown\"\n  end\n  path = File.join(folder, \"_#{type}s\", filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build --drafts",
                "step_name_cleaned": "I run jekyll build --drafts",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/puppies/rover.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"Random Content.\" in \"_site/2009/03/27/gathered-draft.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "the _site/collections directory should not exist",
                "step_name_cleaned": "the _site/collections directory should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections_dir.feature",
        "test_num": 37,
        "test_case": "Rendered collection in custom collections_dir with drafts at the site root",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a collections/_puppies directory",
                "step_name_cleaned": "I have a collections/_puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following document under the \"puppies\" collection within the \"collections\" directory",
                "step_name_cleaned": "I have the following document under the \"\" collection within the \"\" directory",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  path = File.join(dir, \"_#{label}\", \"#{title}.md\")\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _drafts directory",
                "step_name_cleaned": "I have a _drafts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following draft",
                "step_name_cleaned": "I have the following draft",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build --drafts",
                "step_name_cleaned": "I run jekyll build --drafts",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/puppies/rover.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the \"_site/2009/03/27/draft-at-root.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections_dir.feature",
        "test_num": 38,
        "test_case": "A complex site with collections posts and drafts at various locations",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a gathering/_puppies directory",
                "step_name_cleaned": "I have a gathering/_puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a gathering/_posts directory",
                "step_name_cleaned": "I have a gathering/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a gathering/_drafts directory",
                "step_name_cleaned": "I have a gathering/_drafts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a _puppies directory",
                "step_name_cleaned": "I have a _puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a _drafts directory",
                "step_name_cleaned": "I have a _drafts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have the following document under the \"puppies\" collection within the \"gathering\" directory",
                "step_name_cleaned": "I have the following document under the \"\" collection within the \"\" directory",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  path = File.join(dir, \"_#{label}\", \"#{title}.md\")\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I have the following document under the puppies collection",
                "step_name_cleaned": "I have the following document under the puppies collection",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  filename = \"#{title}.md\"\n  dest_folder = \"_#{folder}\"\n  path = File.join(dest_folder, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I have the following post within the \"gathering\" directory",
                "step_name_cleaned": "I have the following post within the \"\" directory",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n  filename = if type == \"draft\"\n    \"#{title}.markdown\"\n  else\n    \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.markdown\"\n  end\n  path = File.join(folder, \"_#{type}s\", filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I have the following draft within the \"gathering\" directory",
                "step_name_cleaned": "I have the following draft within the \"\" directory",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n  filename = if type == \"draft\"\n    \"#{title}.markdown\"\n  else\n    \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.markdown\"\n  end\n  path = File.join(folder, \"_#{type}s\", filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I have the following draft",
                "step_name_cleaned": "I have the following draft",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I have a \"gathering/_puppies/static_file.txt\" file that contains \"Static content.\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I have a gathering/_puppies/nested directory",
                "step_name_cleaned": "I have a gathering/_puppies/nested directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I have a \"gathering/_puppies/nested/static_file.txt\" file that contains \"Nested Static content.\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "I run jekyll build --drafts",
                "step_name_cleaned": "I run jekyll build --drafts",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 18,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 19,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 20,
                "step_name": "the \"_site/puppies/rover-in-gathering.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 21,
                "step_name": "the \"_site/2009/03/27/post-in-gathering.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 22,
                "step_name": "the \"_site/2009/03/27/draft-in-gathering.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 23,
                "step_name": "the \"_site/2009/03/27/draft-at-root.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 24,
                "step_name": "the \"_site/puppies/rover-at-root.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 25,
                "step_name": "I should see exactly \"Static content.\" in \"_site/puppies/static_file.txt\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 26,
                "step_name": "I should see exactly \"Nested Static content.\" in \"_site/puppies/nested/static_file.txt\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 27,
                "step_name": "the _site/gathering directory should not exist",
                "step_name_cleaned": "the _site/gathering directory should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 28,
                "step_name": "the _site/_posts directory should not exist",
                "step_name_cleaned": "the _site/_posts directory should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections_dir.feature",
        "test_num": 39,
        "test_case": "Rendered collection with a document that includes a relative document",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _puppies directory",
                "step_name_cleaned": "I have a _puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following documents under the puppies collection",
                "step_name_cleaned": "I have the following documents under the puppies collection",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  filename = \"#{title}.md\"\n  dest_folder = \"_#{folder}\"\n  path = File.join(dest_folder, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/puppies/rover.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"excerpt for all docs.\" in \"_site/puppies/rover.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Random Content.\" in \"_site/2009/03/27/gathered-post.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections_dir.feature",
        "test_num": 40,
        "test_case": "Rendered collection in custom collections_dir with a document that includes a relative document",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a collections/_puppies directory",
                "step_name_cleaned": "I have a collections/_puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following documents under the \"puppies\" collection within the \"collections\" directory",
                "step_name_cleaned": "I have the following documents under the \"\" collection within the \"\" directory",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  path = File.join(dir, \"_#{label}\", \"#{title}.md\")\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a collections/_posts directory",
                "step_name_cleaned": "I have a collections/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post within the \"collections\" directory",
                "step_name_cleaned": "I have the following post within the \"\" directory",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n  filename = if type == \"draft\"\n    \"#{title}.markdown\"\n  else\n    \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.markdown\"\n  end\n  path = File.join(folder, \"_#{type}s\", filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/puppies/rover.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"excerpt for all docs.\" in \"_site/puppies/rover.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Random Content.\" in \"_site/2009/03/27/gathered-post.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections_dir.feature",
        "test_num": 41,
        "test_case": "Front matter defaults and custom collections directory",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a gathering/_players/managers directory",
                "step_name_cleaned": "I have a gathering/_players/managers directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a gathering/_players/recruits directory",
                "step_name_cleaned": "I have a gathering/_players/recruits directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a gathering/_players/standby directory",
                "step_name_cleaned": "I have a gathering/_players/standby directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following documents nested inside \"managers\" directory under the \"players\" collection within the \"gathering\" directory",
                "step_name_cleaned": "I have the following documents nested inside \"\" directory under the \"\" collection within the \"\" directory",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  path = File.join(dir, \"_#{label}\", subdir, \"#{title}.md\")\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have the following documents nested inside \"recruits\" directory under the \"players\" collection within the \"gathering\" directory",
                "step_name_cleaned": "I have the following documents nested inside \"\" directory under the \"\" collection within the \"\" directory",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  path = File.join(dir, \"_#{label}\", subdir, \"#{title}.md\")\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have the following documents nested inside \"standby\" directory under the \"players\" collection within the \"gathering\" directory",
                "step_name_cleaned": "I have the following documents nested inside \"\" directory under the \"\" collection within the \"\" directory",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  path = File.join(dir, \"_#{label}\", subdir, \"#{title}.md\")\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I have a \"index.md\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"<p>Tony Stark: Manager: true</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"<p>Tony Stark: Recruit: false</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see \"<p>Tony Stark: Villain: false</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should see \"<p>Peter Parker: Manager: false</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I should see \"<p>Peter Parker: Recruit: true</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "I should see \"<p>Peter Parker: Villain: false</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 18,
                "step_name": "I should see \"<p>Steve Rogers: Manager: true</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 19,
                "step_name": "I should see \"<p>Steve Rogers: Recruit: false</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 20,
                "step_name": "I should see \"<p>Steve Rogers: Villain: false</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 21,
                "step_name": "I should see \"<p>Wanda Maximoff: Manager: false</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 22,
                "step_name": "I should see \"<p>Wanda Maximoff: Recruit: true</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 23,
                "step_name": "I should see \"<p>Wanda Maximoff: Villain: false</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 24,
                "step_name": "I should see \"<p>Thanos: Manager: false</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 25,
                "step_name": "I should see \"<p>Thanos: Recruit: false</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 26,
                "step_name": "I should see \"<p>Thanos: Villain: true</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 27,
                "step_name": "I should see \"<p>Loki: Manager: false</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 28,
                "step_name": "I should see \"<p>Loki: Recruit: false</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 29,
                "step_name": "I should see \"<p>Loki: Villain: false</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections_dir.feature",
        "test_num": 42,
        "test_case": "Sort all entries by a Front Matter key defined in all entries",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Collections: {{ site.tutorials | map: 'title' | join: ', ' }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections in \"gathering\" directory",
                "step_name_cleaned": "I have fixture collections in \"\" directory",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_layouts/tutorial.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Collections: Getting Started, Let's Roll!, Dive-In and Publish Already!, Tip of the Iceberg, Extending with Plugins, Graduation Day\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should not see \"Previous: Graduation Day\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should not see \"Next: Tip of the Iceberg\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"Previous: Getting Started\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"Next: Dive-In and Publish Already!\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections_dir.feature",
        "test_num": 43,
        "test_case": "Sort all entries by a Front Matter key defined in only some entries",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Collections: {{ site.tutorials | map: 'title' | join: ', ' }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections in \"gathering\" directory",
                "step_name_cleaned": "I have fixture collections in \"\" directory",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_layouts/tutorial.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"'approx_time' not defined\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"Collections: Extending with Plugins, Let's Roll!, Getting Started, Graduation Day, Dive-In and Publish Already!, Tip of the Iceberg\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Previous: Getting Started\" in \"_site/tutorials/graduation-day.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"Next: Dive-In and Publish Already!\" in \"_site/tutorials/graduation-day.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections_dir.feature",
        "test_num": 44,
        "test_case": "Manually sort entries",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Collections: {{ site.tutorials | map: 'title' | join: ', ' }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections in \"gathering\" directory",
                "step_name_cleaned": "I have fixture collections in \"\" directory",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_layouts/tutorial.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Collections: Getting Started, Tip of the Iceberg, Let's Roll!, Dive-In and Publish Already!, Graduation Day, Extending with Plugins\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should not see \"Previous: Graduation Day\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should not see \"Next: Tip of the Iceberg\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"Previous: Tip of the Iceberg\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"Next: Dive-In and Publish Already!\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "collections_dir.feature",
        "test_num": 45,
        "test_case": "Manually sort some entries",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Collections: {{ site.tutorials | map: 'title' | join: ', ' }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have fixture collections in \"gathering\" directory",
                "step_name_cleaned": "I have fixture collections in \"\" directory",
                "step_definition": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_layouts/tutorial.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Collections: Getting Started, Let's Roll!, Dive-In and Publish Already!, Graduation Day, Extending with Plugins, Tip of the Iceberg\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should not see \"Previous: Graduation Day\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should not see \"Previous: Tip of the Iceberg\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should not see \"Next: Tip of the Iceberg\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"Previous: Getting Started\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see \"Next: Dive-In and Publish Already!\" in \"_site/tutorials/lets-roll.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "create_sites.feature",
        "test_num": 46,
        "test_case": "Blank site",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I do not have a \"test_blank\" directory",
                "step_name_cleaned": "I do not have a \"\" directory",
                "step_definition": "do\nPaths.test_dir.join(path).directory?\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll new test_blank --blank",
                "step_name_cleaned": "I run jekyll new test_blank --blank",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the test_blank/_data directory should exist",
                "step_name_cleaned": "the test_blank/_data directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the test_blank/_drafts directory should exist",
                "step_name_cleaned": "the test_blank/_drafts directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the test_blank/_includes directory should exist",
                "step_name_cleaned": "the test_blank/_includes directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the test_blank/_layouts directory should exist",
                "step_name_cleaned": "the test_blank/_layouts directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the test_blank/_posts directory should exist",
                "step_name_cleaned": "the test_blank/_posts directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the test_blank/_sass directory should exist",
                "step_name_cleaned": "the test_blank/_sass directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the test_blank/assets/css directory should exist",
                "step_name_cleaned": "the test_blank/assets/css directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the \"test_blank/_layouts/default.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "the \"test_blank/_sass/base.scss\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the \"test_blank/assets/css/main.scss\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "the \"test_blank/_config.yml\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "the \"test_blank/index.md\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I run jekyll build --source test_blank --destination test_blank/_site",
                "step_name_cleaned": "I run jekyll build --source test_blank --destination test_blank/_site",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "the test_blank/_site directory should exist",
                "step_name_cleaned": "the test_blank/_site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 18,
                "step_name": "I should see \"Start developing\" in \"test_blank/_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 19,
                "step_name": "I should see \"body {\" in \"test_blank/_site/assets/css/main.css\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "create_sites.feature",
        "test_num": 47,
        "test_case": "Basic site",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" file that contains \"Basic Site\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"Basic Site\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "create_sites.feature",
        "test_num": 48,
        "test_case": "Basic site with a post",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"My First Exploit\" in \"_site/2009/03/27/hackers.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "create_sites.feature",
        "test_num": 49,
        "test_case": "Basic site with layout and a page",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" page with layout \"default\" that contains \"Basic Site with Layout\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a default layout that contains \"Page Layout: {{ content }}\"",
                "step_name_cleaned": "I have a default layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Page Layout: Basic Site with Layout\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "create_sites.feature",
        "test_num": 50,
        "test_case": "Basic site with layout and a post",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a default layout that contains \"Post Layout: {{ content }}\"",
                "step_name_cleaned": "I have a default layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post Layout: <p>The only winning move is not to play.</p>\" in \"_site/2009/03/27/wargames.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "create_sites.feature",
        "test_num": 51,
        "test_case": "Basic site with layout inside a subfolder and a post",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a post/simple layout that contains \"Post Layout: {{ content }}\"",
                "step_name_cleaned": "I have a post/simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post Layout: <p>The only winning move is not to play.</p>\" in \"_site/2009/03/27/wargames.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "create_sites.feature",
        "test_num": 52,
        "test_case": "Basic site with layouts, pages, posts and files",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a page layout that contains \"Page {{ page.title }}: {{ content }}\"",
                "step_name_cleaned": "I have a page layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a post layout that contains \"Post {{ page.title }}: {{ content }}\"",
                "step_name_cleaned": "I have a post layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page with layout \"page\" that contains \"Site contains {{ site.pages.size }} pages and {{ site.posts.size }} posts\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a blog directory",
                "step_name_cleaned": "I have a blog directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a \"blog/index.html\" page with layout \"page\" that contains \"blog category index page\"",
                "step_name_cleaned": "I have a \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have an \"about.html\" file that contains \"No replacement {{ site.posts.size }}\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I have an \"another_file\" file that contains \"\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I have a category/_posts directory",
                "step_name_cleaned": "I have a category/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I have the following posts in \"category\"",
                "step_name_cleaned": "I have the following posts in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I should see \"Page : Site contains 2 pages and 4 posts\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "I should see \"No replacement \\{\\{ site.posts.size \\}\\}\" in \"_site/about.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 18,
                "step_name": "I should see \"\" in \"_site/another_file\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 19,
                "step_name": "I should see \"Page : blog category index page\" in \"_site/blog/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 20,
                "step_name": "I should see \"Post entry1: <p>content for entry1.</p>\" in \"_site/2009/03/27/entry1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 21,
                "step_name": "I should see \"Post entry2: <p>content for entry2.</p>\" in \"_site/2009/04/27/entry2.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 22,
                "step_name": "I should see \"Post entry3: <p>content for entry3.</p>\" in \"_site/category/2009/05/27/entry3.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 23,
                "step_name": "I should see \"Post entry4: <p>content for entry4.</p>\" in \"_site/category/2009/06/27/entry4.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "create_sites.feature",
        "test_num": 53,
        "test_case": "Basic site with include tag",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _includes directory",
                "step_name_cleaned": "I have a _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" page that contains \"Basic Site with include tag: {% include about.textile %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"_includes/about.textile\" file that contains \"Generated by Jekyll\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Basic Site with include tag: Generated by Jekyll\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "create_sites.feature",
        "test_num": 54,
        "test_case": "Basic site with subdir include tag",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _includes directory",
                "step_name_cleaned": "I have a _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"_includes/about.textile\" file that contains \"Generated by Jekyll\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an info directory",
                "step_name_cleaned": "I have an info directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"info/index.html\" page that contains \"Basic Site with subdir include tag: {% include about.textile %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Basic Site with subdir include tag: Generated by Jekyll\" in \"_site/info/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "create_sites.feature",
        "test_num": 55,
        "test_case": "Basic site with nested include tag",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _includes directory",
                "step_name_cleaned": "I have a _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"_includes/about.textile\" file that contains \"Generated by {% include jekyll.textile %}\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"_includes/jekyll.textile\" file that contains \"Jekyll\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page that contains \"Basic Site with include tag: {% include about.textile %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Basic Site with include tag: Generated by Jekyll\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "create_sites.feature",
        "test_num": 56,
        "test_case": "Basic site with internal post linking",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"URL: {% post_url 2008-01-01-entry2 %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with \"permalink\" set to \"pretty\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"URL: /2008/01/01/entry2/\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "create_sites.feature",
        "test_num": 57,
        "test_case": "Basic site with whitelisted dotfile",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \".htaccess\" file that contains \"SomeDirective\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"SomeDirective\" in \"_site/.htaccess\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "create_sites.feature",
        "test_num": 58,
        "test_case": "File was replaced by a directory",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a \"test\" file that contains \"some stuff\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I delete the file \"test\"",
                "step_name_cleaned": "I delete the file \"\"",
                "step_definition": "do\nFile.delete(file)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a test directory",
                "step_name_cleaned": "I have a test directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have a \"test/index.html\" file that contains \"some other stuff\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site/test directory should exist",
                "step_name_cleaned": "the _site/test directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"some other stuff\" in \"_site/test/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "create_sites.feature",
        "test_num": 59,
        "test_case": "Basic site with unpublished page",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page with title \"index\" that contains \"Published page\"",
                "step_name_cleaned": "I have an \"\" page with title \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"public.html\" page with published \"true\" that contains \"Explicitly published page\"",
                "step_name_cleaned": "I have a \"\" page with published \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"secret.html\" page with published \"false\" that contains \"Unpublished page\"",
                "step_name_cleaned": "I have a \"\" page with published \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the \"_site/public.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/secret.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I run jekyll build --unpublished",
                "step_name_cleaned": "I run jekyll build --unpublished",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "the \"_site/public.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "the \"_site/secret.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "create_sites.feature",
        "test_num": 60,
        "test_case": "Basic site with page with future date",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"content for entry2\" in \"_site/2007/12/31/entry2.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the \"_site/2040/12/31/entry1.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build --future",
                "step_name_cleaned": "I run jekyll build --future",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "the \"_site/2040/12/31/entry1.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "create_sites.feature",
        "test_num": 61,
        "test_case": "Basic site with layouts, posts and related posts",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a page layout that contains \"Page {{ page.title }}: {{ content }}\"",
                "step_name_cleaned": "I have a page layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a post layout that contains \"Post {{ page.title }}: {{ content }}Related posts: {{ site.related_posts | size }}\"",
                "step_name_cleaned": "I have a post layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page with layout \"page\" that contains \"Site contains {{ site.pages.size }} pages and {{ site.posts.size }} posts; Related posts: {{ site.related_posts | size }}\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"Page : Site contains 1 pages and 2 posts; Related posts: 0\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Post entry1: <p>content for entry1.</p>\\nRelated posts: 1\" in \"_site/2009/03/27/entry1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"Post entry2: <p>content for entry2.</p>\\nRelated posts: 1\" in \"_site/2009/04/27/entry2.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "data.feature",
        "test_num": 62,
        "test_case": "autoload *.yaml files in _data directory",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _data directory",
                "step_name_cleaned": "I have a _data directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_data/products.yaml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" page that contains \"{% for product in site.data.products %}{{product.name}}{% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"sugar\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"salt\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "data.feature",
        "test_num": 63,
        "test_case": "autoload *.yml files in _data directory",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _data directory",
                "step_name_cleaned": "I have a _data directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_data/members.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" page that contains \"{% for member in site.data.members %}{{member.name}}{% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Jack\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Leon\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "data.feature",
        "test_num": 64,
        "test_case": "autoload *.json files in _data directory",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _data directory",
                "step_name_cleaned": "I have a _data directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_data/members.json\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" page that contains \"{% for member in site.data.members %}{{member.name}}{% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Jack\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Leon\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "data.feature",
        "test_num": 65,
        "test_case": "autoload *.csv files in _data directory",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _data directory",
                "step_name_cleaned": "I have a _data directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_data/members.csv\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" page that contains \"{% for member in site.data.members %}{{member.name}}{% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Jack\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Leon\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "data.feature",
        "test_num": 66,
        "test_case": "autoload *.tsv files in _data directory",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _data directory",
                "step_name_cleaned": "I have a _data directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_data/members.tsv\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" page that contains \"{% for member in site.data.members %}{{member.name}}{% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Jack\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Leon\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "data.feature",
        "test_num": 67,
        "test_case": "autoload *.yml files in _data directory with space in file name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _data directory",
                "step_name_cleaned": "I have a _data directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_data/team members.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" page that contains \"{% for member in site.data.team_members %}{{member.name}}{% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Jack\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Leon\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "data.feature",
        "test_num": 68,
        "test_case": "autoload *.yaml files in subdirectories in _data directory",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _data directory",
                "step_name_cleaned": "I have a _data directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _data/categories directory",
                "step_name_cleaned": "I have a _data/categories directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_data/categories/dairy.yaml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page that contains \"{{ site.data.categories.dairy.name }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Dairy Products\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "data.feature",
        "test_num": 69,
        "test_case": "folders should have precedence over files with the same name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _data directory",
                "step_name_cleaned": "I have a _data directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _data/categories directory",
                "step_name_cleaned": "I have a _data/categories directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_data/categories/dairy.yaml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_data/categories.yaml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have an \"index.html\" page that contains \"{{ site.data.categories.dairy.name }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Dairy Products\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "data.feature",
        "test_num": 70,
        "test_case": "should be backward compatible with site.data in _config.yml",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" page that contains \"{% for member in site.data %}{{member.name}}{% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"Jack\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Leon\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "drafts.feature",
        "test_num": 71,
        "test_case": "Preview a draft",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"permalink\" set to \"none\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _drafts directory",
                "step_name_cleaned": "I have a _drafts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following draft",
                "step_name_cleaned": "I have the following draft",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build --drafts",
                "step_name_cleaned": "I run jekyll build --drafts",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Not baked yet.\" in \"_site/recipe.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "drafts.feature",
        "test_num": 72,
        "test_case": "Don't preview a draft",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"permalink\" set to \"none\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" page that contains \"Totally index\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _drafts directory",
                "step_name_cleaned": "I have a _drafts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following draft",
                "step_name_cleaned": "I have the following draft",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the \"_site/recipe.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "drafts.feature",
        "test_num": 73,
        "test_case": "Don't preview a draft that is not published",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"permalink\" set to \"none\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" page that contains \"Totally index\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _drafts directory",
                "step_name_cleaned": "I have a _drafts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following draft",
                "step_name_cleaned": "I have the following draft",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build --drafts",
                "step_name_cleaned": "I run jekyll build --drafts",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the \"_site/recipe.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "drafts.feature",
        "test_num": 74,
        "test_case": "Use page.path variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"permalink\" set to \"none\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _drafts directory",
                "step_name_cleaned": "I have a _drafts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following draft",
                "step_name_cleaned": "I have the following draft",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build --drafts",
                "step_name_cleaned": "I run jekyll build --drafts",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Post path: _drafts/recipe.markdown\" in \"_site/recipe.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "embed_filters.feature",
        "test_num": 75,
        "test_case": "Convert date to XML schema",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a default layout that contains \"{{ site.time | date_to_xmlschema }}\"",
                "step_name_cleaned": "I have a default layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see today's date in \"_site/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see today's date in \"\"",
                "step_definition": "do\nstep(\"I should see \\\"#{Date.today}\\\" in \\\"#{file}\\\"\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "embed_filters.feature",
        "test_num": 76,
        "test_case": "Escape text for XML",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a default layout that contains \"{{ page.title | xml_escape }}\"",
                "step_name_cleaned": "I have a default layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Star &amp; Wars\" in \"_site/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "embed_filters.feature",
        "test_num": 77,
        "test_case": "Calculate number of words",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a default layout that contains \"{{ content | number_of_words }}\"",
                "step_name_cleaned": "I have a default layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"7\" in \"_site/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "embed_filters.feature",
        "test_num": 78,
        "test_case": "Convert an array into a sentence",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a default layout that contains \"{{ page.tags | array_to_sentence_string }}\"",
                "step_name_cleaned": "I have a default layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"scifi, movies, and force\" in \"_site/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "embed_filters.feature",
        "test_num": 79,
        "test_case": "Markdownify a given string",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a default layout that contains \"By {{ '_Obi-wan_' | markdownify }}\"",
                "step_name_cleaned": "I have a default layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"By <p><em>Obi-wan</em></p>\" in \"_site/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "embed_filters.feature",
        "test_num": 80,
        "test_case": "Sort by an arbitrary variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following page",
                "step_name_cleaned": "I have the following page",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following page",
                "step_name_cleaned": "I have the following page",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a default layout that contains \"{{ site.pages | sort:'value' | map:'title' | join:', ' }}\"",
                "step_name_cleaned": "I have a default layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see exactly \"Page-2, Page-1\" in \"_site/page-1.html\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see exactly \"Page-2, Page-1\" in \"_site/page-2.html\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "embed_filters.feature",
        "test_num": 81,
        "test_case": "Sort pages by the title",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following pages",
                "step_name_cleaned": "I have the following pages",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following page",
                "step_name_cleaned": "I have the following page",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a default layout that contains \"{% assign sorted_pages = site.pages | sort: 'title' %}The rule of {{ sorted_pages.size }}: {% for p in sorted_pages %}{{ p.content | strip_html | strip_newlines }}, {% endfor %}\"",
                "step_name_cleaned": "I have a default layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see exactly \"The rule of 3: Jump, Fly, Run,\" in \"_site/bird.html\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "embed_filters.feature",
        "test_num": 82,
        "test_case": "Sort pages by the title ordering pages without title last",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following pages",
                "step_name_cleaned": "I have the following pages",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following page",
                "step_name_cleaned": "I have the following page",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a default layout that contains \"{% assign sorted_pages = site.pages | sort: 'title', 'last' %}The rule of {{ sorted_pages.size }}: {% for p in sorted_pages %}{{ p.content | strip_html | strip_newlines }}, {% endfor %}\"",
                "step_name_cleaned": "I have a default layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see exactly \"The rule of 3: Fly, Run, Jump,\" in \"_site/bird.html\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "embed_filters.feature",
        "test_num": 83,
        "test_case": "Filter posts by given property and value",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"string-value.md\" page with content",
                "step_name_cleaned": "I have a \"\" page with content",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"string-value-array.md\" page with content",
                "step_name_cleaned": "I have a \"\" page with content",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"string-value-hash.md\" page with content",
                "step_name_cleaned": "I have a \"\" page with content",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a \"nil-value.md\" page with content",
                "step_name_cleaned": "I have a \"\" page with content",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have an \"empty-liquid-literal.md\" page with content",
                "step_name_cleaned": "I have an \"\" page with content",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I have a \"blank-liquid-literal.md\" page with content",
                "step_name_cleaned": "I have a \"\" page with content",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see exactly \"<p>Elephant</p>\" in \"_site/string-value.html\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see exactly \"<p>Bird, Cat</p>\" in \"_site/string-value-array.html\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see exactly \"<p>Bird</p>\" in \"_site/string-value-hash.html\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should see exactly \"<p>Dog</p>\" in \"_site/nil-value.html\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I should see exactly \"<p>Dog, Goat, Horse, Iguana</p>\" in \"_site/empty-liquid-literal.html\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "I should see exactly \"<p>Dog, Goat, Horse, Iguana</p>\" in \"_site/blank-liquid-literal.html\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "frontmatter_defaults.feature",
        "test_num": 84,
        "test_case": "Use default for frontmatter variables internally",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a pretty layout that contains \"THIS IS THE LAYOUT: {{content}}\"",
                "step_name_cleaned": "I have a pretty layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have an \"index.html\" page with title \"some title\" that contains \"just some page\"",
                "step_name_cleaned": "I have an \"\" page with title \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a configuration file with \"defaults\" set to \"[{scope: {path: \"\"}, values: {layout: \"pretty\"}}]\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"\"\"pretty\"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"THIS IS THE LAYOUT: <p>just some post</p>\" in \"_site/2013/09/11/default-layout.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"THIS IS THE LAYOUT: just some page\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "frontmatter_defaults.feature",
        "test_num": 85,
        "test_case": "Use default for frontmatter variables in Liquid",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" page that contains \"just {{page.custom}} by {{page.author}}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a configuration file with \"defaults\" set to \"[{scope: {path: \"\"}, values: {custom: \"some special data\", author: \"Ben\"}}]\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"\"\"some special data\"\"Ben\"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"<p>some special data</p>\\n<div>Ben</div>\" in \"_site/2013/09/11/default-data.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"just some special data by Ben\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "frontmatter_defaults.feature",
        "test_num": 86,
        "test_case": "Override frontmatter defaults by path",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a root layout that contains \"root: {{ content }}\"",
                "step_name_cleaned": "I have a root layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a subfolder layout that contains \"subfolder: {{ content }}\"",
                "step_name_cleaned": "I have a subfolder layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a special/_posts directory",
                "step_name_cleaned": "I have a special/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have the following post in \"special\"",
                "step_name_cleaned": "I have the following post in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I have an \"index.html\" page with title \"overview\" that contains \"Overview for {{page.description}}\"",
                "step_name_cleaned": "I have an \"\" page with title \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I have an \"special/index.html\" page with title \"section overview\" that contains \"Overview for {{page.description}}\"",
                "step_name_cleaned": "I have an \"\" page with title \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I have a configuration file with \"defaults\" set to \"[{scope: {path: \"special\"}, values: {layout: \"subfolder\", description: \"the special section\"}}, {scope: {path: \"\"}, values: {layout: \"root\", description: \"the webpage\"}}]\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"special\"\"subfolder\"\"the special section\"\"\"\"root\"\"the webpage\"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see \"root: <p>info on the webpage</p>\" in \"_site/2013/10/14/about.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should see \"subfolder: <p>info on the special section</p>\" in \"_site/special/2013/10/14/about.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I should see \"root: Overview for the webpage\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "I should see \"subfolder: Overview for the special section\" in \"_site/special/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "frontmatter_defaults.feature",
        "test_num": 87,
        "test_case": "Use frontmatter variables by relative path",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a main layout that contains \"main: {{ content }}\"",
                "step_name_cleaned": "I have a main layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a special/_posts directory",
                "step_name_cleaned": "I have a special/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have the following post in \"special\"",
                "step_name_cleaned": "I have the following post in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have a configuration file with \"defaults\" set to \"[{scope: {path: \"special\"}, values: {layout: \"main\"}}, {scope: {path: \"special/_posts\"}, values: {layout: \"main\"}}, {scope: {path: \"_posts\"}, values: {layout: \"main\"}}]\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"special\"\"main\"\"special/_posts\"\"main\"\"_posts\"\"main\"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"main: <p>content of site/2013/10/14/about.html</p>\" in \"_site/2013/10/14/about.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"main: <p>content of site/special/2013/10/14/about1.html</p>\" in \"_site/special/2013/10/14/about1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"main: <p>content of site/special/2013/10/14/about2.html</p>\" in \"_site/special/2013/10/14/about2.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "frontmatter_defaults.feature",
        "test_num": 88,
        "test_case": "Use frontmatter scopes for subdirectories",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a main layout that contains \"main: {{ content }}\"",
                "step_name_cleaned": "I have a main layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts/en directory",
                "step_name_cleaned": "I have a _posts/en directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post under \"en\"",
                "step_name_cleaned": "I have the following post under \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a _posts/de directory",
                "step_name_cleaned": "I have a _posts/de directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have the following post under \"de\"",
                "step_name_cleaned": "I have the following post under \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have a configuration file with \"defaults\" set to \"[{scope: {path: \"_posts/en\"}, values: {layout: \"main\", lang: \"en\"}}, {scope: {path: \"_posts/de\"}, values: {layout: \"main\", lang: \"de\"}}]\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"_posts/en\"\"main\"\"en\"\"_posts/de\"\"main\"\"de\"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"main: <p>en is the current language</p>\" in \"_site/2014/09/01/helloworld.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"main: <p>de is the current language</p>\" in \"_site/2014/09/01/hallowelt.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "frontmatter_defaults.feature",
        "test_num": 89,
        "test_case": "Override frontmatter defaults by type",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" page that contains \"interesting stuff\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a configuration file with \"defaults\" set to \"[{scope: {path: \"\", type: \"post\"}, values: {permalink: \"/post.html\"}}, {scope: {path: \"\", type: \"page\"}, values: {permalink: \"/page.html\"}}, {scope: {path: \"\"}, values: {permalink: \"/perma.html\"}}]\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"\"\"post\"\"/post.html\"\"\"\"page\"\"/page.html\"\"\"\"/perma.html\"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"blabla\" in \"_site/post.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"interesting stuff\" in \"_site/page.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the \"_site/perma.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "frontmatter_defaults.feature",
        "test_num": 90,
        "test_case": "Actual frontmatter overrides defaults",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" page with permalink \"override.html\" that contains \"nothing\"",
                "step_name_cleaned": "I have an \"\" page with permalink \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a configuration file with \"defaults\" set to \"[{scope: {path: \"\"}, values: {permalink: \"/perma.html\", author: \"Chris\"}}]\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"\"\"/perma.html\"\"Chris\"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"a blog by some guy\" in \"_site/frontmatter.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"nothing\" in \"_site/override.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the \"_site/perma.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "frontmatter_defaults.feature",
        "test_num": 91,
        "test_case": "Define permalink default for posts",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"defaults\" set to \"[{scope: {path: \"\", type: \"posts\"}, values: {permalink: \"/:categories/:title/\"}}]\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"\"\"posts\"\"/:categories/:title/\"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"blabla\" in \"_site/blog/testpost/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "frontmatter_defaults.feature",
        "test_num": 92,
        "test_case": "Use frontmatter defaults in collections",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _slides directory",
                "step_name_cleaned": "I have a _slides directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"index.html\" file that contains \"nothing\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_slides/slide1.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Value: Test\" in \"_site/slides/slide1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "frontmatter_defaults.feature",
        "test_num": 93,
        "test_case": "Override frontmatter defaults inside a collection",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _slides directory",
                "step_name_cleaned": "I have a _slides directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"index.html\" file that contains \"nothing\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_slides/slide2.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Value: Override\" in \"_site/slides/slide2.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "frontmatter_defaults.feature",
        "test_num": 94,
        "test_case": "Deep merge frontmatter defaults",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page with fruit \"{orange: 1}\" that contains \"Fruits: {{ page.fruit.orange | plus: page.fruit.apple }}\"",
                "step_name_cleaned": "I have an \"\" page with fruit \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with \"defaults\" set to \"[{scope: {path: \"\"}, values: {fruit: {apple: 2}}}]\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"\"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should see \"Fruits: 3\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "highlighting.feature",
        "test_num": 95,
        "test_case": "highlighting an apache configuration",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page with content",
                "step_name_cleaned": "I have an \"\" page with content",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should get a zero exit-status",
                "step_name_cleaned": "I should get a zero exit-status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should see \"<span class=\"nc\">RewriteCond</span>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"nc\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "highlighting.feature",
        "test_num": 96,
        "test_case": "marking lines 1 and 2 in a Ruby code block with valid syntax",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page with content",
                "step_name_cleaned": "I have an \"\" page with content",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should get a zero exit-status",
                "step_name_cleaned": "I should get a zero exit-status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should see \"<span class=\\\"hll\\\"><span class=\\\"k\\\">module</span> <span class=\\\"nn\\\">Jekyll</span>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"hll\\\"\"k\\\"\"nn\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"<span class=\\\"hll\\\">  <span class=\\\"k\\\">module</span> <span class=\\\"nn\\\">Tags</span>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"hll\\\"\"k\\\"\"nn\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"<span class=\\\"k\\\">class</span> <span class=\\\"nc\\\">HighlightBlock</span\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"k\\\"\"nc\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "highlighting.feature",
        "test_num": 97,
        "test_case": "marking a single line in a Ruby code block with invalid syntax",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page with content",
                "step_name_cleaned": "I have an \"\" page with content",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should see \"Liquid Exception: Syntax Error\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 98,
        "test_case": "Run some code after site reset",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"mytinypage\" in \"_site/foo.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 99,
        "test_case": "Modify the payload before rendering the site",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"index.html\" page that contains \"{{ site.injected }}!\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"myparam!\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 100,
        "test_case": "Modify the site contents after reading",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"page1.html\" page that contains \"page1\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"page2.html\" page that contains \"page2\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the \"_site/page1.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"page2\" in \"_site/page2.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 101,
        "test_case": "Work with the site files after they've been written to disk",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"page1.html\" page that contains \"page1\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"page1\" in \"_site/firstpage.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 102,
        "test_case": "Alter a page right after it is initialized",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"page1.html\" page that contains \"page1\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"page1\" in \"_site/renamed.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 103,
        "test_case": "Alter the payload for one page but not another",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"page1.html\" page that contains \"{{ page.myparam }}\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"page2.html\" page that contains \"{{ page.myparam }}\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"special\" in \"_site/page1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should not see \"special\" in \"_site/page2.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 104,
        "test_case": "Modify the converted HTML content of a page before rendering layout",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_layouts/page.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"page.md\" page with layout \"page\" that contains \"### Heading\"",
                "step_name_cleaned": "I have a \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"<h3>Page heading</h3>\" in \"_site/page.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"<h4 id=\\\"heading\\\">Heading</h4>\" in \"_site/page.html\"",
                "step_name_cleaned": "I should see \"\"heading\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 105,
        "test_case": "Modify page contents before writing to disk",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"index.html\" page that contains \"WRAP ME\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"{{{{{ WRAP ME }}}}}\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 106,
        "test_case": "Work with a page after writing it to disk",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"index.html\" page that contains \"HELLO FROM A PAGE\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"HELLO FROM A PAGE\" in \"_site/index.html.moved\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 107,
        "test_case": "Alter a post right after it is initialized",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"pbagrag sbe ragel1.\" in \"_site/2015/03/14/entry1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 108,
        "test_case": "Alter the payload for certain posts",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"old post\" in \"_site/2015/03/14/entry1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"new post\" in \"_site/2015/03/15/entry2.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 109,
        "test_case": "Modify the converted HTML content of a post before rendering layout",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_layouts/post.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_posts/2016-01-01-example.md\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"<h3>Page heading</h3>\" in \"_site/2016/01/01/example.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"<h4 id=\\\"heading\\\">Heading</h4>\" in \"_site/2016/01/01/example.html\"",
                "step_name_cleaned": "I should see \"\"heading\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 110,
        "test_case": "Modify post contents before writing to disk",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"the answer to life, the universe and everything\" in \"_site/2015/03/14/entry1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"48\" in \"_site/2015/03/15/entry2.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 111,
        "test_case": "Work with a post after writing it to disk",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"_site/2015/03/14/entry1.html at\" in \"_site/post-build.log\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"_site/2015/03/15/entry2.html at\" in \"_site/post-build.log\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 112,
        "test_case": "Register a hook on multiple owners at the same time",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"index.html\" page that contains \"WRAP ME\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"{{{{{ WRAP ME }}}}}\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"{{{{{ <p>entry one</p> }}}}}\" in \"_site/2015/03/14/entry1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 113,
        "test_case": "Allow hooks to have a named priority",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"index.html\" page that contains \"WRAP ME\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"4 3 1 2 WRAP ME\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 114,
        "test_case": "Alter a document right after it is initialized",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file that contains \"collections: [ memes ]\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a _memes directory",
                "step_name_cleaned": "I have a _memes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_memes/doc1.md\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have an \"index.md\" file with content",
                "step_name_cleaned": "I have an \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"all your base are belong to us\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 115,
        "test_case": "Modify the converted HTML content of a document before rendering layout",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_layouts/meme.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a _memes directory",
                "step_name_cleaned": "I have a _memes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_memes/doc1.md\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"<h3>Page heading</h3>\" in \"_site/memes/doc1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"<h4 id=\\\"all-your-base\\\">all your base</h4>\" in \"_site/memes/doc1.html\"",
                "step_name_cleaned": "I should see \"\"all-your-base\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 116,
        "test_case": "Modify the converted HTML content of document of a particular collection before rendering layout",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_layouts/meme.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a _memes directory",
                "step_name_cleaned": "I have a _memes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_memes/doc1.md\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have a \"_posts/2016-01-01-example.md\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"<h3>Page heading</h3>\" in \"_site/memes/doc1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see \"<h4 id=\\\"all-your-base\\\">all your base</h4>\" in \"_site/memes/doc1.html\"",
                "step_name_cleaned": "I should see \"\"all-your-base\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should see \"<h3 id=\\\"all-your-base\\\">all your base</h3>\" in \"_site/2016/01/01/example.html\"",
                "step_name_cleaned": "I should see \"\"all-your-base\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 117,
        "test_case": "Update a document after rendering it, but before writing it to disk",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a _memes directory",
                "step_name_cleaned": "I have a _memes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_memes/doc1.md\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"<p class=\\\"meme\\\">all your base are belong to us\" in \"_site/memes/doc1.html\"",
                "step_name_cleaned": "I should see \"\"meme\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 118,
        "test_case": "Perform an action after every document is written",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a _memes directory",
                "step_name_cleaned": "I have a _memes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_memes/doc1.md\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Wrote document 0\" in \"_site/document-build.log\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "hooks.feature",
        "test_num": 119,
        "test_case": "Set a custom payload['page'] property",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_plugins/ext.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_layouts/custom.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a _includes directory",
                "step_name_cleaned": "I have a _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a \"_includes/foo.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have an \"index.html\" page with layout \"custom\" that contains \"page content\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"page content\\n hello world\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "include_relative_tag.feature",
        "test_num": 120,
        "test_case": "Include a file relative to a post",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _posts/snippets directory",
                "step_name_cleaned": "I have a _posts/snippets directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"_posts/snippets/welcome_para.md\" file that contains \"Welcome back Dear Reader!\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Welcome back Dear Reader!\" in \"_site/2018/09/02/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "include_relative_tag.feature",
        "test_num": 121,
        "test_case": "Include a nested file relative to a post",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _posts/snippets directory",
                "step_name_cleaned": "I have a _posts/snippets directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts/snippets/welcome_para directory",
                "step_name_cleaned": "I have a _posts/snippets/welcome_para directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have an \"_posts/snippets/welcome_para.md\" file that contains \"{% include_relative snippets/welcome_para/greeting.md %} Dear Reader!\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have an \"_posts/snippets/welcome_para/greeting.md\" file that contains \"Welcome back\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"Welcome back Dear Reader!\" in \"_site/2018/09/02/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "include_relative_tag.feature",
        "test_num": 122,
        "test_case": "Include a nested file relative to a post as an excerpt",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _posts/snippets directory",
                "step_name_cleaned": "I have a _posts/snippets directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts/snippets/welcome_para directory",
                "step_name_cleaned": "I have a _posts/snippets/welcome_para directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_posts/2018-09-02-star-wars.md\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have an \"_posts/snippets/welcome_para.md\" file that contains \"{% include_relative snippets/welcome_para/greeting.md %} Dear Reader!\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have an \"_posts/snippets/welcome_para/greeting.md\" file that contains \"Welcome back\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have an \"index.md\" page that contains \"{% for post in site.posts %}{{ post.excerpt }}{% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Welcome back Dear Reader!\" in \"_site/2018/09/02/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"Welcome back Dear Reader!\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "include_relative_tag.feature",
        "test_num": 123,
        "test_case": "Include a nested file relative to a page at root",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a snippets directory",
                "step_name_cleaned": "I have a snippets directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a snippets/welcome_para directory",
                "step_name_cleaned": "I have a snippets/welcome_para directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"index.md\" page that contains \"{% include_relative snippets/welcome_para.md %}\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"snippets/welcome_para.md\" file that contains \"{% include_relative snippets/welcome_para/greeting.md %} Dear Reader!\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"snippets/welcome_para/greeting.md\" file that contains \"Welcome back\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Welcome back Dear Reader!\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "include_tag.feature",
        "test_num": 124,
        "test_case": "Include a file with parameters",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an _includes directory",
                "step_name_cleaned": "I have an _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"_includes/header.html\" file that contains \"<header>My awesome blog header: {{include.param}}</header>\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"_includes/params.html\" file that contains \"Parameters:<ul>{% for param in include %}<li>{{param[0]}} = {{param[1]}}</li>{% endfor %}</ul>\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"_includes/ignore.html\" file that contains \"<footer>My blog footer</footer>\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"<header>My awesome blog header: myparam</header>\" in \"_site/2013/03/21/include-files.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should not see \"myparam\" in \"_site/2013/03/21/ignore-params-if-unused.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"<li>date = today</li>\" in \"_site/2013/03/21/list-multiple-parameters.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"<li>start = tomorrow</li>\" in \"_site/2013/03/21/list-multiple-parameters.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should not see \"<header>My awesome blog header: myparam</header>\" in \"_site/2013/03/21/dont-keep-parameters.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should see \"<header>My awesome blog header: </header>\" in \"_site/2013/03/21/dont-keep-parameters.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I should see \"<li>cool = param with spaces</li>\" in \"_site/2013/04/07/allow-params-with-spaces-and-quotes.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "I should see \"<li>super = \\\"quoted\\\"</li>\" in \"_site/2013/04/07/allow-params-with-spaces-and-quotes.html\"",
                "step_name_cleaned": "I should see \"\"quoted\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 18,
                "step_name": "I should see \"<li>single = has \\\"quotes\\\"</li>\" in \"_site/2013/04/07/allow-params-with-spaces-and-quotes.html\"",
                "step_name_cleaned": "I should see \"\"quotes\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 19,
                "step_name": "I should see \"<li>escaped = 'single' quotes</li>\" in \"_site/2013/04/07/allow-params-with-spaces-and-quotes.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 20,
                "step_name": "I should see \"<li>param1_or_2 = value</li>\" in \"_site/2013/04/12/parameter-syntax.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 21,
                "step_name": "I should see \"<li>local = some text</li>\" in \"_site/2013/06/22/pass-a-variable.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 22,
                "step_name": "I should see \"<li>title = Pass a variable</li>\" in \"_site/2013/06/22/pass-a-variable.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "include_tag.feature",
        "test_num": 125,
        "test_case": "Include a file from a variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an _includes directory",
                "step_name_cleaned": "I have an _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"_includes/snippet.html\" file that contains \"a snippet\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"_includes/parametrized.html\" file that contains \"works with {{include.what}}\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have an \"index.html\" page that contains \"{% include {{site.include_file1}} %} that {% include {{site.include_file2}} what='parameters' %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"a snippet that works with parameters\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "include_tag.feature",
        "test_num": 126,
        "test_case": "Include a variable file in a loop",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an _includes directory",
                "step_name_cleaned": "I have an _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"_includes/one.html\" file that contains \"one\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"_includes/two.html\" file that contains \"two\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page with files \"[one.html, two.html]\" that contains \"{% for file in page.files %}{% include {{file}} %} {% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page with files \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"one two\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "include_tag.feature",
        "test_num": 127,
        "test_case": "Include a file with variables and filters",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an _includes directory",
                "step_name_cleaned": "I have an _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"_includes/one.html\" file that contains \"one included\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page that contains \"{% include {{ site.include_file | append: '.html' }} %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"one included\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "include_tag.feature",
        "test_num": 128,
        "test_case": "Include a file with partial variables",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an _includes directory",
                "step_name_cleaned": "I have an _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"_includes/one.html\" file that contains \"one included\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page that contains \"{% include {{ site.include_file }}.html %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"one included\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "include_tag.feature",
        "test_num": 129,
        "test_case": "Include a file and rebuild when include content is changed",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an _includes directory",
                "step_name_cleaned": "I have an _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"_includes/one.html\" file that contains \"include\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" page that contains \"{% include one.html %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"include\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I wait 1 second",
                "step_name_cleaned": "I wait 1 second",
                "step_definition": "do\nsleep(time.to_f)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I have an \"_includes/one.html\" file that contains \"include content changed\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"include content changed\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "include_tag.feature",
        "test_num": 130,
        "test_case": "Include a file with multiple variables",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an _includes directory",
                "step_name_cleaned": "I have an _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"_includes/header-en.html\" file that contains \"include\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" page that contains \"{% assign name = 'header' %}{% assign locale = 'en' %}{% include {{name}}-{{locale}}.html %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"include\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "include_tag.feature",
        "test_num": 131,
        "test_case": "Include a file-path with non-alphanumeric character sequences",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an _includes directory",
                "step_name_cleaned": "I have an _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"_includes/header-en.html\" file that contains \"include\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" page that contains \"{% include ./header-en.html %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a non-zero exit status",
                "step_name_cleaned": "I should get a non-zero exit status",
                "step_definition": "do\nstep(\"I should not see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Invalid syntax for include tag.\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have an \"index.html\" page that contains \"{% include foo/.header-en.html %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a non-zero exit status",
                "step_name_cleaned": "I should get a non-zero exit status",
                "step_definition": "do\nstep(\"I should not see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"Invalid syntax for include tag.\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I have an \"index.html\" page that contains \"{% include //header-en.html %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should get a non-zero exit status",
                "step_name_cleaned": "I should get a non-zero exit status",
                "step_definition": "do\nstep(\"I should not see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see \"Invalid syntax for include tag.\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I have an \"index.html\" page that contains \"{% include ..header-en.html %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "I should get a non-zero exit status",
                "step_name_cleaned": "I should get a non-zero exit status",
                "step_definition": "do\nstep(\"I should not see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 18,
                "step_name": "I should see \"Invalid syntax for include tag.\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 19,
                "step_name": "I have an \"index.html\" page that contains \"{% include header-en.html %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 20,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 21,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 22,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 23,
                "step_name": "I should see \"include\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "incremental_rebuild.feature",
        "test_num": 132,
        "test_case": "Produce correct output site",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a default layout that contains \"Post Layout: {{ content }}\"",
                "step_name_cleaned": "I have a default layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build -I",
                "step_name_cleaned": "I run jekyll build -I",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post Layout: <p>The only winning move is not to play.</p>\" in \"_site/2009/03/27/wargames.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I run jekyll build -I",
                "step_name_cleaned": "I run jekyll build -I",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"Post Layout: <p>The only winning move is not to play.</p>\" in \"_site/2009/03/27/wargames.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "incremental_rebuild.feature",
        "test_num": 133,
        "test_case": "Generate a metadata file",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" file that contains \"Basic Site\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build -I",
                "step_name_cleaned": "I run jekyll build -I",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the \".jekyll-metadata\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "incremental_rebuild.feature",
        "test_num": 134,
        "test_case": "Rebuild when content is changed",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" file that contains \"Basic Site\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build -I",
                "step_name_cleaned": "I run jekyll build -I",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"Basic Site\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I wait 1 second",
                "step_name_cleaned": "I wait 1 second",
                "step_definition": "do\nsleep(time.to_f)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have an \"index.html\" file that contains \"Bacon Site\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build -I",
                "step_name_cleaned": "I run jekyll build -I",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Bacon Site\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "incremental_rebuild.feature",
        "test_num": 135,
        "test_case": "Rebuild when layout is changed",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" page with layout \"default\" that contains \"Basic Site with Layout\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a default layout that contains \"Page Layout: {{ content }}\"",
                "step_name_cleaned": "I have a default layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build -I",
                "step_name_cleaned": "I run jekyll build -I",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Page Layout: Basic Site with Layout\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I wait 1 second",
                "step_name_cleaned": "I wait 1 second",
                "step_definition": "do\nsleep(time.to_f)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I have a default layout that contains \"Page Layout Changed: {{ content }}\"",
                "step_name_cleaned": "I have a default layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"Page Layout Changed: Basic Site with Layout\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "incremental_rebuild.feature",
        "test_num": 136,
        "test_case": "Rebuild when an include is changed",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _includes directory",
                "step_name_cleaned": "I have a _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" page that contains \"Basic Site with include tag: {% include about.textile %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"_includes/about.textile\" file that contains \"Generated by Jekyll\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build -I",
                "step_name_cleaned": "I run jekyll build -I",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Basic Site with include tag: Generated by Jekyll\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I wait 1 second",
                "step_name_cleaned": "I wait 1 second",
                "step_definition": "do\nsleep(time.to_f)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I have an \"_includes/about.textile\" file that contains \"Regenerated by Jekyll\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I run jekyll build -I",
                "step_name_cleaned": "I run jekyll build -I",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"Basic Site with include tag: Regenerated by Jekyll\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "incremental_rebuild.feature",
        "test_num": 137,
        "test_case": "Rebuild when a dependency of document in custom collection_dir is changed",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _includes directory",
                "step_name_cleaned": "I have a _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with \"collections_dir\" set to \"collections\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a collections/_posts directory",
                "step_name_cleaned": "I have a collections/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post within the \"collections\" directory",
                "step_name_cleaned": "I have the following post within the \"\" directory",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n  filename = if type == \"draft\"\n    \"#{title}.markdown\"\n  else\n    \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.markdown\"\n  end\n  path = File.join(folder, \"_#{type}s\", filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have an \"_includes/about.html\" file that contains \"Generated by Jekyll\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build -I",
                "step_name_cleaned": "I run jekyll build -I",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Basic Site with include tag: Generated by Jekyll\" in \"_site/2009/03/27/wargames.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I wait 1 second",
                "step_name_cleaned": "I wait 1 second",
                "step_definition": "do\nsleep(time.to_f)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I have an \"_includes/about.html\" file that contains \"Regenerated by Jekyll\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I run jekyll build -I",
                "step_name_cleaned": "I run jekyll build -I",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should see \"Basic Site with include tag: Regenerated by Jekyll\" in \"_site/2009/03/27/wargames.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "incremental_rebuild.feature",
        "test_num": 138,
        "test_case": "A themed-site and incremental regeneration",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.md\" page that contains \"Themed site\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build --incremental --verbose",
                "step_name_cleaned": "I run jekyll build --incremental --verbose",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Rendering: index.md\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Themed site\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I wait 1 second",
                "step_name_cleaned": "I wait 1 second",
                "step_definition": "do\nsleep(time.to_f)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I have an \"about.md\" page that contains \"About Themed site\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I run jekyll build --incremental --verbose",
                "step_name_cleaned": "I run jekyll build --incremental --verbose",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should not see \"Rendering: index.md\" in the build output",
                "step_name_cleaned": "I should not see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see \"Themed site\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should see \"About Themed site\" in \"_site/about.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "layout_data.feature",
        "test_num": 139,
        "test_case": "Use custom layout data",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_layouts/999.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" page with layout \"custom\" that contains \"page content\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" file with content",
                "step_name_cleaned": "I have an \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"page content layout content\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "layout_data.feature",
        "test_num": 140,
        "test_case": "Use custom layout data",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_layouts/custom.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" page with layout \"custom\" that contains \"page content\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"page content\\n foo: my custom data\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "layout_data.feature",
        "test_num": 141,
        "test_case": "Inherit custom layout data",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_layouts/custom.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_layouts/base.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page with layout \"custom\" that contains \"page content\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"page content\\n foo: my custom data\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "layout_data.feature",
        "test_num": 142,
        "test_case": "Inherit custom layout data and clear when not present",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_layouts/default.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_layouts/special.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_layouts/page.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have an \"index.html\" page with layout \"special\" that contains \"page content\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have an \"jekyll.html\" page with layout \"page\" that contains \"page content\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"page content\\n foo: 'my special data' bar: 'im special'\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"page content\\n foo: '' bar: 'im page'\" in \"_site/jekyll.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "link_tag.feature",
        "test_num": 143,
        "test_case": "Basic site with two pages",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.md\" page that contains \"[About my projects]({% link about.md %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"about.md\" page that contains \"[Home]({% link index.md %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"<p><a href=\\\"/about.html\\\">About my projects</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/about.html\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"<p><a href=\\\"/\\\">Home</a></p>\" in \"_site/about.html\"",
                "step_name_cleaned": "I should see \"\"/\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "link_tag.feature",
        "test_num": 144,
        "test_case": "Basic site with custom page-permalinks",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.md\" page that contains \"[About my projects]({% link about.md %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"about.md\" page with permalink \"/about/\" that contains \"[Home]({% link index.md %})\"",
                "step_name_cleaned": "I have an \"\" page with permalink \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"<p><a href=\\\"/about/\\\">About my projects</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/about/\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"<p><a href=\\\"/\\\">Home</a></p>\" in \"_site/about/index.html\"",
                "step_name_cleaned": "I should see \"\"/\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "link_tag.feature",
        "test_num": 145,
        "test_case": "Basic site with custom site-wide-permalinks",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.md\" page that contains \"[About my projects]({% link about.md %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"about.md\" page that contains \"[Home]({% link index.md %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"permalink\" set to \"pretty\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"<p><a href=\\\"/about/\\\">About my projects</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/about/\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"<p><a href=\\\"/\\\">Home</a></p>\" in \"_site/about/index.html\"",
                "step_name_cleaned": "I should see \"\"/\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "link_tag.feature",
        "test_num": 146,
        "test_case": "Basic site with two pages and custom baseurl",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.md\" page that contains \"[About my projects]({% link about.md %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"about.md\" page that contains \"[Home]({% link index.md %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"baseurl\" set to \"/blog\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"<p><a href=\\\"/blog/about.html\\\">About my projects</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/blog/about.html\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"<p><a href=\\\"/blog/\\\">Home</a></p>\" in \"_site/about.html\"",
                "step_name_cleaned": "I should see \"\"/blog/\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "link_tag.feature",
        "test_num": 147,
        "test_case": "Basic site with two pages and custom baseurl and permalinks",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.md\" page that contains \"[About my projects]({% link about.md %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"about.md\" page that contains \"[Home]({% link index.md %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"<p><a href=\\\"/blog/about/\\\">About my projects</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/blog/about/\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"<p><a href=\\\"/blog/\\\">Home</a></p>\" in \"_site/about/index.html\"",
                "step_name_cleaned": "I should see \"\"/blog/\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "link_tag.feature",
        "test_num": 148,
        "test_case": "Linking to a ghost file",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.md\" page that contains \"[About my projects]({% link about.md %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"about.md\" page that contains \"[Contact]({% link contact.md %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a non-zero exit status",
                "step_name_cleaned": "I should get a non-zero exit status",
                "step_definition": "do\nstep(\"I should not see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should not exist",
                "step_name_cleaned": "the _site directory should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Could not find document 'contact.md' in tag 'link'\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "link_tag.feature",
        "test_num": 149,
        "test_case": "Complex site with a variety of files",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.md\" page that contains \"[About my projects]({% link about.md %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"about.md\" page that contains \"[Latest Hack]({% link _posts/2018-02-15-metaprogramming.md %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"_posts/2018-02-15-metaprogramming.md\" page that contains \"[Download This]({% link script.txt %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"script.txt\" file that contains \"Static Alert!\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"<p><a href=\\\"/about.html\\\">About my projects</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/about.html\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"<p><a href=\\\"/2018/02/15/metaprogramming.html\\\">Latest Hack</a></p>\" in \"_site/about.html\"",
                "step_name_cleaned": "I should see \"\"/2018/02/15/metaprogramming.html\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"<p><a href=\\\"/script.txt\\\">Download This</a></p>\" in \"_site/2018/02/15/metaprogramming.html\"",
                "step_name_cleaned": "I should see \"\"/script.txt\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"Static Alert!\" in \"_site/script.txt\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "markdown.feature",
        "test_num": 150,
        "test_case": "Markdown in list on index",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"paginate\" set to \"5\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" page that contains \"Index - {% for post in site.posts %} {{ post.content }} {% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Index\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"<h1 id=\\\"my-title\\\">My Title</h1>\" in \"_site/2009/03/27/hackers.html\"",
                "step_name_cleaned": "I should see \"\"my-title\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"<h1 id=\\\"my-title\\\">My Title</h1>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"my-title\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "markdown.feature",
        "test_num": 151,
        "test_case": "Markdown in pagination on index",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" page that contains \"Index - {% for post in paginator.posts %} {{ post.content }} {% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Index\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"<h1 id=\\\"my-title\\\">My Title</h1>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"my-title\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "pagination.feature",
        "test_num": 152,
        "test_case": "Paginate with N posts per page",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" page that contains \"{{ paginator.posts.size }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site/page<exist> directory should exist",
                "step_name_cleaned": "the _site/page<exist> directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the \"_site/page<exist>/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"<posts>\" in \"_site/page<exist>/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the \"_site/page<not_exist>/index.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "pagination.feature",
        "test_num": 153,
        "test_case": "Setting a custom pagination path",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a blog directory",
                "step_name_cleaned": "I have a blog directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"blog/index.html\" page that contains \"{{ paginator.posts.size }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site/blog/page-<exist> directory should exist",
                "step_name_cleaned": "the _site/blog/page-<exist> directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the \"_site/blog/page-<exist>/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"<posts>\" in \"_site/blog/page-<exist>/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the \"_site/blog/page-<not_exist>/index.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "pagination.feature",
        "test_num": 154,
        "test_case": "Setting a custom pagination path without an index.html in it",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a blog directory",
                "step_name_cleaned": "I have a blog directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"blog/index.html\" page that contains \"{{ paginator.posts.size }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page that contains \"Don't pick me!\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site/blog/page/<exist> directory should exist",
                "step_name_cleaned": "the _site/blog/page/<exist> directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/blog/page/<exist>/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"<posts>\" in \"_site/blog/page/<exist>/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "the \"_site/blog/page/<not_exist>/index.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "permalinks.feature",
        "test_num": 155,
        "test_case": "Use none permalink schema",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"permalink\" set to \"none\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Totally nothing.\" in \"_site/none-permalink-schema.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "permalinks.feature",
        "test_num": 156,
        "test_case": "Use pretty permalink schema",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"permalink\" set to \"pretty\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Totally wordpress.\" in \"_site/2009/03/27/pretty-permalink-schema/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "permalinks.feature",
        "test_num": 157,
        "test_case": "Use pretty permalink schema for pages",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"Totally index\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"awesome.html\" page that contains \"Totally awesome\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"sitemap.xml\" page that contains \"Totally uhm, sitemap\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a configuration file with \"permalink\" set to \"pretty\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Totally index\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Totally awesome\" in \"_site/awesome/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"Totally uhm, sitemap\" in \"_site/sitemap.xml\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "permalinks.feature",
        "test_num": 158,
        "test_case": "Use custom permalink schema with prefix",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"permalink\" set to \"/blog/:year/:month/:day/:title/\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Totally custom.\" in \"_site/blog/2009/03/27/custom-permalink-schema/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "permalinks.feature",
        "test_num": 159,
        "test_case": "Use custom permalink schema with category",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"permalink\" set to \"/:categories/:title.html\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Totally custom.\" in \"_site/stuff/custom-permalink-schema.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "permalinks.feature",
        "test_num": 160,
        "test_case": "Use custom permalink schema with squished date",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"permalink\" set to \"/:month-:day-:year/:title.html\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Totally custom.\" in \"_site/03-27-2009/custom-permalink-schema.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "permalinks.feature",
        "test_num": 161,
        "test_case": "Use custom permalink schema with date and time",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Totally custom.\" in \"_site/20090327223107.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "permalinks.feature",
        "test_num": 162,
        "test_case": "Use per-post permalink",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site/custom/posts/1 directory should exist",
                "step_name_cleaned": "the _site/custom/posts/1 directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"bla bla\" in \"_site/custom/posts/1/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "permalinks.feature",
        "test_num": 163,
        "test_case": "Use per-post ending in .html",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site/custom/posts directory should exist",
                "step_name_cleaned": "the _site/custom/posts directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"bla bla\" in \"_site/custom/posts/some.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "permalinks.feature",
        "test_num": 164,
        "test_case": "Use pretty permalink schema with cased file name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"_posts/2009-03-27-Pretty-Permalink-Schema.md\" page that contains \"Totally wordpress\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"permalink\" set to \"pretty\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Totally wordpress.\" in \"_site/2009/03/27/Pretty-Permalink-Schema/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "permalinks.feature",
        "test_num": 165,
        "test_case": "Use custom permalink schema with cased file name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"_posts/2009-03-27-Custom-Schema.md\" page with title \"Custom Schema\" that contains \"Totally awesome\"",
                "step_name_cleaned": "I have an \"\" page with title \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"permalink\" set to \"/:year/:month/:day/:slug/\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Totally awesome\" in \"_site/2009/03/27/custom-schema/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "permalinks.feature",
        "test_num": 166,
        "test_case": "Use pretty permalink schema with title containing underscore",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"_posts/2009-03-27-Custom_Schema.md\" page with title \"Custom Schema\" that contains \"Totally awesome\"",
                "step_name_cleaned": "I have an \"\" page with title \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"permalink\" set to \"pretty\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Totally awesome\" in \"_site/2009/03/27/Custom_Schema/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "permalinks.feature",
        "test_num": 167,
        "test_case": "Use a non-HTML file extension in the permalink",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"_posts/2016-01-18-i-am-php.md\" page with permalink \"/2016/i-am-php.php\" that contains \"I am PHP\"",
                "step_name_cleaned": "I have an \"\" page with permalink \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"i-am-also-php.md\" page with permalink \"/i-am-also-php.php\" that contains \"I am also PHP\"",
                "step_name_cleaned": "I have a \"\" page with permalink \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"I am PHP\" in \"_site/2016/i-am-php.php\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"I am also PHP\" in \"_site/i-am-also-php.php\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "permalinks.feature",
        "test_num": 168,
        "test_case": "Using the same permalink twice",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a \"cool.md\" page with permalink \"/amazing.html\" that contains \"I am cool\"",
                "step_name_cleaned": "I have a \"\" page with permalink \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"awesome.md\" page with permalink \"/amazing.html\" that contains \"I am also awesome\"",
                "step_name_cleaned": "I have an \"\" page with permalink \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"amazing.html\" file with content",
                "step_name_cleaned": "I have an \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a _puppies directory",
                "step_name_cleaned": "I have a _puppies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have the following documents under the puppies collection",
                "step_name_cleaned": "I have the following documents under the puppies collection",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  filename = \"#{title}.md\"\n  dest_folder = \"_#{folder}\"\n  path = File.join(dest_folder, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"Conflict: The following destination is shared by multiple files.\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"_site/amazing.html\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see \"awesome.md\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should see \"cool.md\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I should see \"amazing.html\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "I should see \"_site/puppies/2009/03/27/rover.html\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 18,
                "step_name": "I should see \"_posts/2009-03-27-rover.markdown\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 19,
                "step_name": "I should see \"_puppies/rover.md\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "permalinks.feature",
        "test_num": 169,
        "test_case": "Redirecting from an existing permalink",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"plugins\" set to \"[jekyll-redirect-from]\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"deals.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"offers.html\" page with permalink \"/offers/\" that contains \"Hurry! Limited time only!\"",
                "step_name_cleaned": "I have a \"\" page with permalink \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should not see \"Conflict: The following destination is shared by multiple files.\" in the build output",
                "step_name_cleaned": "I should not see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should not see \"_site/offers/index.html\" in the build output",
                "step_name_cleaned": "I should not see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should not see \"offers.html\" in the build output",
                "step_name_cleaned": "I should not see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should not see \"redirect.html\" in the build output",
                "step_name_cleaned": "I should not see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "plugins.feature",
        "test_num": 170,
        "test_case": "Add a gem-based plugin",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" file that contains \"Whatever\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with \"plugins\" set to \"[jekyll_test_plugin]\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Whatever\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"this is a test\" in \"_site/test.txt\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "plugins.feature",
        "test_num": 171,
        "test_case": "Add an empty whitelist to restrict all gems",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" file that contains \"Whatever\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build --safe",
                "step_name_cleaned": "I run jekyll build --safe",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Whatever\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the \"_site/test.txt\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "plugins.feature",
        "test_num": 172,
        "test_case": "Add a whitelist to restrict some gems but allow others",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" file that contains \"Whatever\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build --safe",
                "step_name_cleaned": "I run jekyll build --safe",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Whatever\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the \"_site/test.txt\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"this is a test\" in \"_site/test.txt\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 173,
        "test_case": "Use post.title variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"Post title: {{ page.title }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post title: Star Wars\" in \"_site/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 174,
        "test_case": "Use post.url variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"Post url: {{ page.url }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post url: /2009/03/27/star-wars.html\" in \"_site/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 175,
        "test_case": "Use page.name variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"Page name: {{ page.name }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Page name: 2009-03-27-star-wars.markdown\" in \"_site/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 176,
        "test_case": "Use post.date variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"Post date: {{ page.date | date_to_string }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post date: 27 Mar 2009\" in \"_site/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 177,
        "test_case": "Use post.date variable with invalid",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_posts/2016-01-01-test.md\" page with date \"tuesday\" that contains \"I have a bad date.\"",
                "step_name_cleaned": "I have a \"\" page with date \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the _site directory should not exist",
                "step_name_cleaned": "the _site directory should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"Document '_posts/2016-01-01-test.md' does not have a valid date in the YAML front matter.\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 178,
        "test_case": "Invalid date in filename",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_posts/2016-22-01-test.md\" page that contains \"I have a bad date.\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the _site directory should not exist",
                "step_name_cleaned": "the _site directory should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"Document '_posts/2016-22-01-test.md' does not have a valid date in the filename.\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 179,
        "test_case": "Use post.id variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"Post id: {{ page.id }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post id: /2009/03/27/star-wars\" in \"_site/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 180,
        "test_case": "Use post.content variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"Post content: {{ content }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post content: <p>Luke, I am your father.</p>\" in \"_site/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 181,
        "test_case": "Use post.categories variable when category is in a folder",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a movies directory",
                "step_name_cleaned": "I have a movies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a movies/_posts directory",
                "step_name_cleaned": "I have a movies/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post in \"movies\"",
                "step_name_cleaned": "I have the following post in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Post category: movies\" in \"_site/movies/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 182,
        "test_case": "Use post.categories variable when category is in a folder and has category in YAML",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a movies directory",
                "step_name_cleaned": "I have a movies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a movies/_posts directory",
                "step_name_cleaned": "I have a movies/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post in \"movies\"",
                "step_name_cleaned": "I have the following post in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Post category: movies\" in \"_site/movies/film/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 183,
        "test_case": "Use post.categories variable when category is in a folder and has categories in YAML",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a movies directory",
                "step_name_cleaned": "I have a movies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a movies/_posts directory",
                "step_name_cleaned": "I have a movies/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post in \"movies\"",
                "step_name_cleaned": "I have the following post in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Post category: movies\" in \"_site/movies/film/scifi/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 184,
        "test_case": "Use post.categories variable when category is in a folder and duplicated category is in YAML",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a movies directory",
                "step_name_cleaned": "I have a movies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a movies/_posts directory",
                "step_name_cleaned": "I have a movies/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post in \"movies\"",
                "step_name_cleaned": "I have the following post in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Post category: movies\" in \"_site/movies/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 185,
        "test_case": "Use post.categories when category is a composite of multiple words",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a Sci-Fi Movi3s directory",
                "step_name_cleaned": "I have a Sci-Fi Movi3s directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a Sci-Fi Movi3s/_posts directory",
                "step_name_cleaned": "I have a Sci-Fi Movi3s/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post in \"Sci-Fi Movi3s\"",
                "step_name_cleaned": "I have the following post in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_layouts/simple.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Post categories: Sci-Fi Movi3s, vintage\" in \"_site/sci-fi movi3s/vintage/2020/04/03/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"Post URL: /sci-fi%20movi3s/vintage/2020/04/03/star-wars.html\" in \"_site/sci-fi movi3s/vintage/2020/04/03/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 186,
        "test_case": "Use post.slugified_categories to generate URL when category is a composite of multiple words",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a Sci-Fi Movi3s directory",
                "step_name_cleaned": "I have a Sci-Fi Movi3s directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a Sci-Fi Movi3s/_posts directory",
                "step_name_cleaned": "I have a Sci-Fi Movi3s/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post in \"Sci-Fi Movi3s\"",
                "step_name_cleaned": "I have the following post in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_layouts/simple.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"Post categories: Sci-Fi Movi3s, vintage\" in \"_site/sci-fi-movi3s/vintage/2020/04/03/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Post URL: /sci-fi-movi3s/vintage/2020/04/03/star-wars.html\" in \"_site/sci-fi-movi3s/vintage/2020/04/03/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 187,
        "test_case": "Use post.tags variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"Post tags: {{ page.tags }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post tags: twist\" in \"_site/2009/05/18/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 188,
        "test_case": "Use post.categories variable when categories are in folders",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a scifi directory",
                "step_name_cleaned": "I have a scifi directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a scifi/movies directory",
                "step_name_cleaned": "I have a scifi/movies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a scifi/movies/_posts directory",
                "step_name_cleaned": "I have a scifi/movies/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have the following post in \"scifi/movies\"",
                "step_name_cleaned": "I have the following post in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a simple layout that contains \"Post categories: {{ page.categories | array_to_sentence_string }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"Post categories: scifi and movies\" in \"_site/scifi/movies/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 189,
        "test_case": "Use post.categories variable when categories are in folders with mixed case",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a scifi directory",
                "step_name_cleaned": "I have a scifi directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a scifi/Movies directory",
                "step_name_cleaned": "I have a scifi/Movies directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a scifi/Movies/_posts directory",
                "step_name_cleaned": "I have a scifi/Movies/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have the following post in \"scifi/Movies\"",
                "step_name_cleaned": "I have the following post in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a simple layout that contains \"Post categories: {{ page.categories | array_to_sentence_string }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"Post categories: scifi and Movies\" in \"_site/scifi/movies/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 190,
        "test_case": "Use post.categories variable when category is in YAML",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post category: movies\" in \"_site/movies/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 191,
        "test_case": "Use post.categories variable when category is in YAML and is mixed-case",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post category: Movies\" in \"_site/movies/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 192,
        "test_case": "Use post.categories variable when categories are in YAML",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"Post categories: {{ page.categories | array_to_sentence_string }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post categories: scifi and movies\" in \"_site/scifi/movies/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 193,
        "test_case": "Use post.categories variable when categories are in YAML and are duplicated",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post category: movies\" in \"_site/movies/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 194,
        "test_case": "Superdirectories of _posts applied to post.categories",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a movies/_posts directory",
                "step_name_cleaned": "I have a movies/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"movies/_posts/2009-03-27-star-wars.html\" page with layout \"simple\" that contains \"hi\"",
                "step_name_cleaned": "I have a \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post category: movies\" in \"_site/movies/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 195,
        "test_case": "Subdirectories of _posts not applied to post.categories",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a movies/_posts/scifi directory",
                "step_name_cleaned": "I have a movies/_posts/scifi directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"movies/_posts/scifi/2009-03-27-star-wars.html\" page with layout \"simple\" that contains \"hi\"",
                "step_name_cleaned": "I have a \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"Post category: {{ page.categories }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post category: movies\" in \"_site/movies/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 196,
        "test_case": "Use post.categories variable when categories are in YAML with mixed case",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"Post categories: {{ page.categories | array_to_sentence_string }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post categories: scifi and Movies\" in \"_site/scifi/movies/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Post categories: SciFi and movies\" in \"_site/scifi/movies/2013/03/17/star-trek.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 197,
        "test_case": "Use page.render_with_liquid variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should not see \"Hello Unrendered Post\" in \"_site/2017/07/06/unrendered-post.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Hello {{ page.title }}\" in \"_site/2017/07/06/unrendered-post.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Hello Rendered Post\" in \"_site/2017/07/06/rendered-post.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 198,
        "test_case": "Use page.path variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a <dir>/_posts directory",
                "step_name_cleaned": "I have a <dir>/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post in \"<dir>\"",
                "step_name_cleaned": "I have the following post in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Source path: <path_prefix>_posts/2013-04-12-my-post.html\" in \"_site/<dir>/2013/04/12/my-post.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 199,
        "test_case": "Cannot override page.path variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Non-custom path: _posts/2013-04-12-override.markdown\" in \"_site/2013/04/12/override.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 200,
        "test_case": "Disable a post from being published",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" file that contains \"Published!\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the \"_site/2009/03/27/star-wars.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Published!\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 201,
        "test_case": "Use a custom variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"Post author: {{ page.author }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Post author: Darth Vader\" in \"_site/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 202,
        "test_case": "Use a variable which is a reserved keyword in Ruby",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"{{page.title}} has class {{page.class}}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"My post has class kewl-post\" in \"_site/2016/01/21/my-post.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 203,
        "test_case": "Previous and next posts title",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a ordered layout that contains \"Previous post: {{ page.previous.title }} and next post: {{ page.next.title }}\"",
                "step_name_cleaned": "I have a ordered layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"next post: Some like it hot\" in \"_site/2009/03/27/star-wars.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Previous post: Some like it hot\" in \"_site/2009/05/27/terminator.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_data.feature",
        "test_num": 204,
        "test_case": "Deprecate calling data keys directly via Ruby",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _plugins directory",
                "step_name_cleaned": "I have a _plugins directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_plugins/foo.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_plugins/bar.rb\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Deprecation: Document#title\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"_plugins/foo.rb:2\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"_plugins/bar.rb:3\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should not see \"lib/jekyll/document.rb\" in the build output",
                "step_name_cleaned": "I should not see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_excerpts.feature",
        "test_num": 205,
        "test_case": "An excerpt without a layout",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"{% for post in site.posts %}{{ post.excerpt }}{% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see exactly \"<p>content for entry1.</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_excerpts.feature",
        "test_num": 206,
        "test_case": "An excerpt from a post with a layout",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"{% for post in site.posts %}{{ post.excerpt }}{% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a post layout that contains \"{{ page.excerpt }}\"",
                "step_name_cleaned": "I have a post layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site/2007 directory should exist",
                "step_name_cleaned": "the _site/2007 directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site/2007/12 directory should exist",
                "step_name_cleaned": "the _site/2007/12 directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "the _site/2007/12/31 directory should exist",
                "step_name_cleaned": "the _site/2007/12/31 directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the \"_site/2007/12/31/entry1.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see exactly \"<p>content for entry1.</p>\" in \"_site/2007/12/31/entry1.html\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see exactly \"<p>content for entry1.</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_excerpts.feature",
        "test_num": 207,
        "test_case": "An excerpt with Liquid constructs from a post with a layout",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"{% for post in site.posts %}{{ post.excerpt }}{% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with \"baseurl\" set to \"/blog\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a post layout that contains \"{{ page.excerpt }}\"",
                "step_name_cleaned": "I have a post layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site/2007 directory should exist",
                "step_name_cleaned": "the _site/2007 directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "the _site/2007/12 directory should exist",
                "step_name_cleaned": "the _site/2007/12 directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the _site/2007/12/31 directory should exist",
                "step_name_cleaned": "the _site/2007/12/31 directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "the \"_site/2007/12/31/entry1.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see exactly \"<p>/blog/assets/style.css</p>\" in \"_site/2007/12/31/entry1.html\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should see exactly \"<p>/blog/assets/style.css</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_excerpts.feature",
        "test_num": 208,
        "test_case": "An excerpt from a post with a layout which has context",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"{% for post in site.posts %}{{ post.excerpt }}{% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a post layout that contains \"<html><head></head><body>{{ page.excerpt }}</body></html>\"",
                "step_name_cleaned": "I have a post layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site/2007 directory should exist",
                "step_name_cleaned": "the _site/2007 directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site/2007/12 directory should exist",
                "step_name_cleaned": "the _site/2007/12 directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "the _site/2007/12/31 directory should exist",
                "step_name_cleaned": "the _site/2007/12/31 directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the \"_site/2007/12/31/entry1.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"<p>content for entry1.</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see \"<html><head></head><body><p>content for entry1.</p>\\n</body></html>\" in \"_site/2007/12/31/entry1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_excerpts.feature",
        "test_num": 209,
        "test_case": "Excerpts from posts having 'render_with_liquid' in their front matter",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"{% for post in site.posts %}{{ post.excerpt }}{% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a post layout that contains \"{{ page.excerpt }}\"",
                "step_name_cleaned": "I have a post layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site/2017/07/06 directory should exist",
                "step_name_cleaned": "the _site/2017/07/06 directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/2017/07/06/unrendered-post.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the \"_site/2017/07/06/rendered-post.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Liquid is not rendered at {{ page.url }}\" in \"_site/2017/07/06/unrendered-post.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"<p>Liquid is rendered at /2017/07/06/rendered-post.html</p>\" in \"_site/2017/07/06/rendered-post.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"<p>Liquid is not rendered at {{ page.url }}</p>\\n<p>Liquid is rendered at /2017/07/06/rendered-post.html</p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_excerpts.feature",
        "test_num": 210,
        "test_case": "Excerpts from posts with reference-style Markdown links",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" page that contains \"{% for post in site.posts %}{{ post.excerpt }}{% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a post layout that contains \"{{ page.excerpt }}\"",
                "step_name_cleaned": "I have a post layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should not see \"Kramdown warning\" in the build output",
                "step_name_cleaned": "I should not see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see exactly \"<p>Install Jekyll</p>\" in \"_site/just-text-excerpt.html\"",
                "step_name_cleaned": "I should see exactly \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"<p>Alpha <sup id=\\\"fnref:1\\\" role=\\\"doc-noteref\\\"><a href=\\\"#fn:1\\\" class=\\\"footnote\\\" rel=\\\"footnote\\\">1</a></sup></p>\" in \"_site/text-and-footnote.html\"",
                "step_name_cleaned": "I should see \"\"fnref:1\\\"\"doc-noteref\\\"\"#fn:1\\\"\"footnote\\\"\"footnote\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"<p>Omega sigma\u00a0<a href=\\\"#fnref:1\\\" class=\\\"reversefootnote\\\" role=\\\"doc-backlink\\\">&#8617;</a></p>\" in \"_site/text-and-footnote.html\"",
                "step_name_cleaned": "I should see \"\"#fnref:1\\\"\"reversefootnote\\\"\"doc-backlink\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"<p>Read <a href=\\\"docs.jekyll.com\\\">docs</a></p>\" in \"_site/text-and-reference-link.html\"",
                "step_name_cleaned": "I should see \"\"docs.jekyll.com\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see \"<p>Check out <a href=\\\"jekyllrb.com\\\">jekyll</a></p>\" in \"_site/text-and-self-referencing-link.html\"",
                "step_name_cleaned": "I should see \"\"jekyllrb.com\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_url_tag.feature",
        "test_num": 211,
        "test_case": "A site that is using the defaults for permalink",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.md\" page that contains \"[Welcome]({% post_url 2019-02-04-hello-world %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"<p><a href=\\\"/2019/02/04/hello-world.html\\\">Welcome</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/2019/02/04/hello-world.html\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_url_tag.feature",
        "test_num": 212,
        "test_case": "Site with site-wide custom permalink setting",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"permalink\" set to \"/:title:output_ext\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.md\" page that contains \"[Welcome]({% post_url 2019-02-04-hello-world %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"<p><a href=\\\"/hello-world.html\\\">Welcome</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/hello-world.html\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_url_tag.feature",
        "test_num": 213,
        "test_case": "Site with custom permalink settings on each post",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"permalink\" set to \"/:title:output_ext\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.md\" page that contains \"[Welcome]({% post_url 2019-02-04-hello-world %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"<p><a href=\\\"/2019/hello-world/\\\">Welcome</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/2019/hello-world/\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_url_tag.feature",
        "test_num": 214,
        "test_case": "Site with no posts",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.md\" page that contains \"[Welcome]({% post_url 2019-02-04-hello-world %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should get a non-zero exit status",
                "step_name_cleaned": "I should get a non-zero exit status",
                "step_definition": "do\nstep(\"I should not see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the _site directory should not exist",
                "step_name_cleaned": "the _site directory should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"Could not find post \\\"2019-02-04-hello-world\\\" in tag 'post_url'.\" in the build output",
                "step_name_cleaned": "I should see \"\"2019-02-04-hello-world\\\"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_url_tag.feature",
        "test_num": 215,
        "test_case": "Site with a future-dated post",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"permalink\" set to \"/:title:output_ext\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.md\" page that contains \"[Welcome Again]({% post_url 2119-02-04-we-meet-again %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build --future",
                "step_name_cleaned": "I run jekyll build --future",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"<p><a href=\\\"/we-meet-again.html\\\">Welcome Again</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/we-meet-again.html\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_url_tag.feature",
        "test_num": 216,
        "test_case": "Site with configured baseurl",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"baseurl\" set to \"blog\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.md\" page that contains \"[Welcome]({% post_url 2019-02-04-hello-world %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"<p><a href=\\\"/blog/2019/02/04/hello-world.html\\\">Welcome</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/blog/2019/02/04/hello-world.html\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_url_tag.feature",
        "test_num": 217,
        "test_case": "Posts with categories",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a movies/_posts directory",
                "step_name_cleaned": "I have a movies/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post in \"movies\"",
                "step_name_cleaned": "I have the following post in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have the following post in \"movies\"",
                "step_name_cleaned": "I have the following post in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have an \"index.md\" page with content",
                "step_name_cleaned": "I have an \"\" page with content",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"<p><a href=\\\"/2019/02/04/hello-world.html\\\">Welcome</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/2019/02/04/hello-world.html\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"<p><a href=\\\"/movies/2019/02/05/hello-movies.html\\\">Movies</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/movies/2019/02/05/hello-movies.html\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"<p><a href=\\\"/movies/film/2019/02/06/star-wars.html\\\">Film</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/movies/film/2019/02/06/star-wars.html\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_url_tag.feature",
        "test_num": 218,
        "test_case": "Duplicate posts with categories",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a movies/_posts directory",
                "step_name_cleaned": "I have a movies/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post in \"movies\"",
                "step_name_cleaned": "I have the following post in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have an \"index.md\" page with content",
                "step_name_cleaned": "I have an \"\" page with content",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"<p><a href=\\\"/2019/02/04/hello-world.html\\\">Welcome</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/2019/02/04/hello-world.html\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"<p><a href=\\\"/movies/2019/02/04/hello-world.html\\\">Movies</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/movies/2019/02/04/hello-world.html\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_url_tag.feature",
        "test_num": 219,
        "test_case": "Deprecated usage to link nested post",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a movies/_posts directory",
                "step_name_cleaned": "I have a movies/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post in \"movies\"",
                "step_name_cleaned": "I have the following post in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.md\" page that contains \"[Movies]({% post_url 2019-02-04-hello-world %})\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Deprecation: A call to '{% post_url 2019-02-04-hello-world %}' did not match a post\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"<p><a href=\\\"/movies/2019/02/04/hello-world.html\\\">Movies</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/movies/2019/02/04/hello-world.html\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "post_url_tag.feature",
        "test_num": 220,
        "test_case": "Nested posts in a directory with name containing spaces",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a Cats and Dogs/_posts directory",
                "step_name_cleaned": "I have a Cats and Dogs/_posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have the following post in \"Cats and Dogs\"",
                "step_name_cleaned": "I have the following post in \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a _posts/Salt and Pepper directory",
                "step_name_cleaned": "I have a _posts/Salt and Pepper directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have the following post under \"Salt and Pepper\"",
                "step_name_cleaned": "I have the following post under \"\"",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have an \"index.md\" file with content",
                "step_name_cleaned": "I have an \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should not see \"Deprecation: A call to '{% post_url\" in the build output",
                "step_name_cleaned": "I should not see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"<p><a href=\\\"/cats%20and%20dogs/2019/02/04/hello-world.html\\\">Post 1</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/cats%20and%20dogs/2019/02/04/hello-world.html\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"<p><a href=\\\"/2019/02/05/hello-again.html\\\">Post 2</a></p>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"/2019/02/05/hello-again.html\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 221,
        "test_case": "Rendering a site with parentheses in its path name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a blank site in \"omega(beta)\"",
                "step_name_cleaned": "I have a blank site in \"\"",
                "step_definition": "do\nunless File.exist?(path)\n  FileUtils.mkdir_p(path)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"omega(beta)/test.md\" page with layout \"simple\" that contains \"Hello World\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an omega(beta)/_includes directory",
                "step_name_cleaned": "I have an omega(beta)/_includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"omega(beta)/_includes/head.html\" file that contains \"Snippet\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a configuration file with \"source\" set to \"omega(beta)\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have an omega(beta)/_layouts directory",
                "step_name_cleaned": "I have an omega(beta)/_layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have an \"omega(beta)/_layouts/simple.html\" file that contains \"{% include head.html %}: {{ content }}\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build --profile",
                "step_name_cleaned": "I run jekyll build --profile",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"Snippet: <p>Hello World</p>\" in \"_site/test.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"_layouts/simple.html\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 222,
        "test_case": "When receiving bad Liquid",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a \"index.html\" page with layout \"simple\" that contains \"{% include invalid.html %}\"",
                "step_name_cleaned": "I have a \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a simple layout that contains \"{{ content }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a non-zero exit-status",
                "step_name_cleaned": "I should get a non-zero exit-status",
                "step_definition": "do\nstep(\"I should not see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"Liquid Exception\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 223,
        "test_case": "When receiving a liquid syntax error in included file",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _includes directory",
                "step_name_cleaned": "I have a _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_includes/invalid.html\" file that contains \"{% INVALID %}\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"index.html\" page with layout \"simple\" that contains \"{% include invalid.html %}\"",
                "step_name_cleaned": "I have a \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"{{ content }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a non-zero exit-status",
                "step_name_cleaned": "I should get a non-zero exit-status",
                "step_definition": "do\nstep(\"I should not see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Liquid Exception: Liquid syntax error \\(.+/invalid\\.html line 1\\): Unknown tag 'INVALID' included in index\\.html\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 224,
        "test_case": "When receiving a generic liquid error in included file",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _includes directory",
                "step_name_cleaned": "I have a _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_includes/invalid.html\" file that contains \"{{ site.title | prepend 'Prepended Text' }}\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"index.html\" page with layout \"simple\" that contains \"{% include invalid.html %}\"",
                "step_name_cleaned": "I have a \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"{{ content }}\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a non-zero exit-status",
                "step_name_cleaned": "I should get a non-zero exit-status",
                "step_definition": "do\nstep(\"I should not see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Liquid Exception: Liquid error \\(.+/_includes/invalid\\.html line 1\\): wrong number of arguments (\\(given 1, expected 2\\)|\\(1 for 2\\)) included in index\\.html\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 225,
        "test_case": "Rendering a default site containing a file with rogue Liquid constructs",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a \"index.html\" page with title \"Simple Test\" that contains \"{{ page.title | foobar }}\\n\\n{{ page.author }}\"",
                "step_name_cleaned": "I have a \"\" page with title \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should get a zero exit-status",
                "step_name_cleaned": "I should get a zero exit-status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should not see \"Liquid Exception:\" in the build output",
                "step_name_cleaned": "I should not see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 226,
        "test_case": "Rendering a default site containing a file with a non-existent Liquid variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a \"index.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with \"title\" set to \"Hello World\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit-status",
                "step_name_cleaned": "I should get a zero exit-status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 227,
        "test_case": "Rendering a custom site containing a file with a non-existent Liquid variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a \"index.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a non-zero exit-status",
                "step_name_cleaned": "I should get a non-zero exit-status",
                "step_definition": "do\nstep(\"I should not see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"Liquid error \\(line 3\\): undefined variable author in index.html\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 228,
        "test_case": "Rendering a custom site containing a file with a non-existent Liquid filter",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a \"index.html\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_config.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a non-zero exit-status",
                "step_name_cleaned": "I should get a non-zero exit-status",
                "step_definition": "do\nstep(\"I should not see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"Liquid error \\(line 3\\): undefined filter foobar in index.html\" in the build output",
                "step_name_cleaned": "I should see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 229,
        "test_case": "Render Liquid and place in layout",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a \"index.html\" page with layout \"simple\" that contains \"Hi there, Jekyll {{ jekyll.environment }}!\"",
                "step_name_cleaned": "I have a \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a simple layout that contains \"{{ content }}Ahoy, indeed!\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Hi there, Jekyll development!\\nAhoy, indeed\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 230,
        "test_case": "Don't place asset files in layout",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.scss\" page with layout \"simple\" that contains \".foo-bar { color:black; }\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.coffee\" page with layout \"simple\" that contains \"whatever()\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"plugins\" set to \"[jekyll-coffeescript]\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a simple layout that contains \"{{ content }}Ahoy, indeed!\"",
                "step_name_cleaned": "I have a simple layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should not see \"Ahoy, indeed!\" in \"_site/index.css\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should not see \"Ahoy, indeed!\" in \"_site/index.js\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 231,
        "test_case": "Ignore defaults and don't place pages and documents with layout set to 'none'",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a \"index.md\" page with layout \"none\" that contains \"Hi there, {{ site.author }}!\"",
                "step_name_cleaned": "I have a \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _trials directory",
                "step_name_cleaned": "I have a _trials directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_trials/no-layout.md\" page with layout \"none\" that contains \"Hi there, {{ site.author }}!\"",
                "step_name_cleaned": "I have a \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_trials/test.md\" page with layout \"null\" that contains \"Hi there, {{ site.author }}!\"",
                "step_name_cleaned": "I have a \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a none layout that contains \"{{ content }}Welcome!\"",
                "step_name_cleaned": "I have a none layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a page layout that contains \"{{ content }}Check this out!\"",
                "step_name_cleaned": "I have a page layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should not see \"Welcome!\" in \"_site/trials/no-layout.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should not see \"Check this out!\" in \"_site/trials/no-layout.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"Check this out!\" in \"_site/trials/test.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see \"Hi there, John Doe!\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should not see \"Welcome!\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I should not see \"Build Warning:\" in the build output",
                "step_name_cleaned": "I should not see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 232,
        "test_case": "Don't place pages and documents with layout set to 'none'",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a \"index.md\" page with layout \"none\" that contains \"Hi there, {{ site.author }}!\"",
                "step_name_cleaned": "I have a \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _trials directory",
                "step_name_cleaned": "I have a _trials directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_trials/no-layout.md\" page with layout \"none\" that contains \"Hi there, {{ site.author }}!\"",
                "step_name_cleaned": "I have a \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"_trials/test.md\" page with layout \"page\" that contains \"Hi there, {{ site.author }}!\"",
                "step_name_cleaned": "I have a \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a none layout that contains \"{{ content }}Welcome!\"",
                "step_name_cleaned": "I have a none layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a page layout that contains \"{{ content }}Check this out!\"",
                "step_name_cleaned": "I have a page layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should not see \"Welcome!\" in \"_site/trials/no-layout.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should not see \"Welcome!\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"Check this out!\" in \"_site/trials/test.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see \"Hi there, John Doe!\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should not see \"Build Warning:\" in the build output",
                "step_name_cleaned": "I should not see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 233,
        "test_case": "Render liquid in Sass",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.scss\" page that contains \".foo-bar { color:{{site.color}}; }\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with \"color\" set to \"red\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \".foo-bar {\\n  color: red;\\n}\\n\\n\\/\\*# sourceMappingURL=index.css.map \\*\\/\" in \"_site/index.css\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 234,
        "test_case": "Not render liquid in CoffeeScript without explicitly including jekyll-coffeescript",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.coffee\" page with animal \"cicada\" that contains \"hey='for {{page.animal}}'\"",
                "step_name_cleaned": "I have an \"\" page with animal \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the \"_site/index.js\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 235,
        "test_case": "Render liquid in CoffeeScript with jekyll-coffeescript enabled",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.coffee\" page with animal \"cicada\" that contains \"hey='for {{page.animal}}'\"",
                "step_name_cleaned": "I have an \"\" page with animal \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with \"plugins\" set to \"[jekyll-coffeescript]\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"hey = 'for cicada';\" in \"_site/index.js\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 236,
        "test_case": "Rendering Liquid expressions that return strings containing Liquid expressions",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.md\" file with content",
                "step_name_cleaned": "I have an \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with \"novel\" set to \"'{{ site.title }}'\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"series named {{ site.title }}\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"{% link series/first-part.md %}\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"{% link series/last-part.md %}\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "rendering.feature",
        "test_num": 237,
        "test_case": "Render content of another page",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.md\" page that contains \"__Hello World__\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"about.md\" page that contains \"{{ page.name }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"test.json\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should not see \"content\\\": \\\"{{ page.name }}\" in \"_site/test.json\"",
                "step_name_cleaned": "I should not see \"\": \\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should not see \"content\\\": \\\"__Hello World__\" in \"_site/test.json\"",
                "step_name_cleaned": "I should not see \"\": \\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"content\\\": \\\"<p>about.md</p>\" in \"_site/test.json\"",
                "step_name_cleaned": "I should see \"\": \\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"content\\\": \\\"<p><strong>Hello World</strong></p>\" in \"_site/test.json\"",
                "step_name_cleaned": "I should see \"\": \\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 238,
        "test_case": "Change source directory",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a blank site in \"_sourcedir\"",
                "step_name_cleaned": "I have a blank site in \"\"",
                "step_definition": "do\nunless File.exist?(path)\n  FileUtils.mkdir_p(path)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"_sourcedir/index.html\" file that contains \"Changing source directory\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with \"source\" set to \"_sourcedir\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Changing source directory\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 239,
        "test_case": "Change destination directory",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" file that contains \"Changing destination directory\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with \"destination\" set to \"_mysite\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the _mysite directory should exist",
                "step_name_cleaned": "the _mysite directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"Changing destination directory\" in \"_mysite/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 240,
        "test_case": "Similarly named source and destination",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a blank site in \"<source>\"",
                "step_name_cleaned": "I have a blank site in \"\"",
                "step_definition": "do\nunless File.exist?(path)\n  FileUtils.mkdir_p(path)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"<source>/index.md\" page that contains \"markdown\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the <source> directory should exist",
                "step_name_cleaned": "the <source> directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the \"<dest>/index.html\" file should <file_exist> exist",
                "step_name_cleaned": "the \"\" file should <file_exist> exist",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 7,
                "step_name": "I should see \"markdown\" in \"<source>/index.md\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 241,
        "test_case": "Exclude files inline",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"Rakefile\" file that contains \"I want to be excluded\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"README\" file that contains \"I want to be excluded\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" file that contains \"I want to be included\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"Gemfile\" file that contains \"gem 'include-me'\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a configuration file with \"exclude\" set to \"['Rakefile', 'README']\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"I want to be included\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the \"_site/Gemfile\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/Rakefile\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the \"_site/README\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 242,
        "test_case": "Exclude files with YAML array",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"Rakefile\" file that contains \"I want to be excluded\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"README\" file that contains \"I want to be excluded\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"index.html\" file that contains \"I want to be included\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"Gemfile\" file that contains \"gem 'include-me'\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a configuration file with \"exclude\" set to",
                "step_name_cleaned": "I have a configuration file with \"\" set to",
                "step_definition": "do\nFile.open(\"_config.yml\", \"w\") { |f,|\n  f.write(\"#{key}:\\n\")\n  table.hashes.each { |row,|\n    f.write(<<-HEREDOC)\n- #{row.[](\"value\")}\n    HEREDOC\n  }\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"I want to be included\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the \"_site/Rakefile\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/README\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the \"_site/Gemfile\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 243,
        "test_case": "Copy over excluded files when their directory is explicitly included",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a \".gitignore\" file that contains \".DS_Store\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \".htaccess\" file that contains \"SomeDirective\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"Gemfile\" file that contains \"gem 'include-me'\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a node_modules directory",
                "step_name_cleaned": "I have a node_modules directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"node_modules/bazinga.js\" file that contains \"var c = 'Bazinga!';\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a \"node_modules/warning.js\" file that contains \"var w = 'Winter is coming!';\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have a configuration file with \"include\" set to",
                "step_name_cleaned": "I have a configuration file with \"\" set to",
                "step_definition": "do\nFile.open(\"_config.yml\", \"w\") { |f,|\n  f.write(\"#{key}:\\n\")\n  table.hashes.each { |row,|\n    f.write(<<-HEREDOC)\n- #{row.[](\"value\")}\n    HEREDOC\n  }\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "the \"_site/.htaccess\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \".DS_Store\" in \"_site/.gitignore\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"gem 'include-me'\" in \"_site/Gemfile\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see \"var c = 'Bazinga!';\" in \"_site/node_modules/bazinga.js\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should see \"var w = 'Winter is coming!';\" in \"_site/node_modules/warning.js\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 244,
        "test_case": "Copy over excluded files only when they are explicitly included",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a \".gitignore\" file that contains \".DS_Store\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \".htaccess\" file that contains \"SomeDirective\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a node_modules directory",
                "step_name_cleaned": "I have a node_modules directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"node_modules/bazinga.js\" file that contains \"var c = 'Bazinga!';\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"node_modules/warning.js\" file that contains \"var w = 'Winter is coming!';\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a configuration file with \"include\" set to",
                "step_name_cleaned": "I have a configuration file with \"\" set to",
                "step_definition": "do\nFile.open(\"_config.yml\", \"w\") { |f,|\n  f.write(\"#{key}:\\n\")\n  table.hashes.each { |row,|\n    f.write(<<-HEREDOC)\n- #{row.[](\"value\")}\n    HEREDOC\n  }\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the \"_site/.htaccess\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \".DS_Store\" in \"_site/.gitignore\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"var c = 'Bazinga!';\" in \"_site/node_modules/bazinga.js\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "the \"_site/node_modules/warning.js\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 245,
        "test_case": "Copy over excluded wild-card files only when they are explicitly included",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a \".gitignore\" file that contains \".DS_Store\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \".htaccess\" file that contains \"SomeDirective\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"foo.txt\" file that contains \"Lorem Ipsum\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.md\" page that contains \"{{ site.title }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have an \"about.md\" page that contains \"{{ site.author }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the \"_site/.gitignore\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "the \"_site/foo.txt\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the \"_site/index.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "the \"_site/about.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "the \"_site/.htaccess\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 18,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 19,
                "step_name": "the \"_site/.gitignore\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 20,
                "step_name": "the \"_site/foo.txt\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 21,
                "step_name": "the \"_site/index.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 22,
                "step_name": "the \"_site/.htaccess\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 23,
                "step_name": "the \"_site/about.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 24,
                "step_name": "I should see \"John Doe\" in \"_site/about.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 246,
        "test_case": "Process included files only once",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a \".foobar\" page that contains \"dotfile with front matter\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \".htaccess\" file that contains \"SomeDirective\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_redirects\" file that contains \"/foo/* /bar/* 301!\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.md\" file with content",
                "step_name_cleaned": "I have an \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a configuration file with \"title\" set to \"Hello World\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/.foobar\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the \"_site/_redirects\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Dotpages: 0\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"Dotstatics: 0\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I should not see \"Conflict:\" in the build output",
                "step_name_cleaned": "I should not see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 18,
                "step_name": "the \"_site/.foobar\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 19,
                "step_name": "the \"_site/_redirects\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 20,
                "step_name": "I should see \"Dotpages: 1\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 21,
                "step_name": "I should see \"Dotstatics: 1\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 247,
        "test_case": "Use Kramdown for markup",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.markdown\" page that contains \"[Google](https://www.google.com)\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with \"markdown\" set to \"kramdown\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"<a href=\\\"https://www.google.com\\\">Google</a>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"https://www.google.com\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 248,
        "test_case": "Highlight code with rouge",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"{% highlight ruby %} puts 'Hello world!' {% endhighlight %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with \"highlighter\" set to \"rouge\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Hello world!\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"class=\\\"highlight\\\"\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"highlight\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 249,
        "test_case": "Rouge renders code block once",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"highlighter\" set to \"rouge\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following post",
                "step_name_cleaned": "I have the following post",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should not see \"highlight(.*)highlight\" in \"_site/2014/04/27/foo.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 250,
        "test_case": "Set time and no future dated posts",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a page layout that contains \"Page Layout: {{ site.posts.size }} on {{ site.time | date: \"%Y-%m-%d\" }}\"",
                "step_name_cleaned": "I have a page layout that contains \"\"%Y-%m-%d\"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a post layout that contains \"Post Layout: {{ content }}\"",
                "step_name_cleaned": "I have a post layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page with layout \"page\" that contains \"site index page\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Page Layout: 1 on 2010-01-01\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"Post Layout: <p>content for entry1.</p>\" in \"_site/2007/12/31/entry1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "the \"_site/2020/01/31/entry2.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 251,
        "test_case": "Set time and future dated posts allowed",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a page layout that contains \"Page Layout: {{ site.posts.size }} on {{ site.time | date: \"%Y-%m-%d\" }}\"",
                "step_name_cleaned": "I have a page layout that contains \"\"%Y-%m-%d\"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a post layout that contains \"Post Layout: {{ content }}\"",
                "step_name_cleaned": "I have a post layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page with layout \"page\" that contains \"site index page\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Page Layout: 2 on 2010-01-01\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"Post Layout: <p>content for entry1.</p>\" in \"_site/2007/12/31/entry1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"Post Layout: <p>content for entry2.</p>\" in \"_site/2020/01/31/entry2.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 252,
        "test_case": "Generate proper dates with explicitly set timezone (same as posts' time)",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a page layout that contains \"Page Layout: {{ site.posts.size }}\"",
                "step_name_cleaned": "I have a page layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a post layout that contains \"Post Layout: {{ content }} built at {{ page.date | date_to_xmlschema }}\"",
                "step_name_cleaned": "I have a post layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page with layout \"page\" that contains \"site index page\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Page Layout: 2\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"Post Layout: <p>content for entry1.</p>\\n built at\" in \"_site/2013/04/09/entry1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"Post Layout: <p>content for entry2.</p>\\n built at\" in \"_site/2013/04/10/entry2.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see date \"2013-04-09T23:22:00-04:00\" in \"_site/2013/04/09/entry1.html\" unless Windows",
                "step_name_cleaned": "I should see date \"\" in \"\" unless Windows",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text)\nif Jekyll::Utils::Platforms.really_windows? && !dst_active?\n  expect(file_contents(file)).not_to(match(regexp))\nelse\n  expect(file_contents(file)).to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should see date \"2013-04-09T22:22:00-05:00\" in \"_site/2013/04/09/entry1.html\" if on Windows",
                "step_name_cleaned": "I should see date \"\" in \"\" if on Windows",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text)\nif Jekyll::Utils::Platforms.really_windows? && !dst_active?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I should see date \"2013-04-10T03:14:00-04:00\" in \"_site/2013/04/10/entry2.html\" unless Windows",
                "step_name_cleaned": "I should see date \"\" in \"\" unless Windows",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text)\nif Jekyll::Utils::Platforms.really_windows? && !dst_active?\n  expect(file_contents(file)).not_to(match(regexp))\nelse\n  expect(file_contents(file)).to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "I should see date \"2013-04-10T02:14:00-05:00\" in \"_site/2013/04/10/entry2.html\" if on Windows",
                "step_name_cleaned": "I should see date \"\" in \"\" if on Windows",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text)\nif Jekyll::Utils::Platforms.really_windows? && !dst_active?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 253,
        "test_case": "Generate proper dates with explicitly set timezone (different than posts' time)",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a page layout that contains \"Page Layout: {{ site.posts.size }}\"",
                "step_name_cleaned": "I have a page layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a post layout that contains \"Post Layout: {{ content }} built at {{ page.date | date_to_xmlschema }}\"",
                "step_name_cleaned": "I have a post layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page with layout \"page\" that contains \"site index page\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Page Layout: 2\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the \"_site/2013/04/09/entry1.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "the \"_site/2013/04/09/entry2.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see \"Post Layout: <p>content for entry1.</p>\\n built at 2013-04-09T09:22:00-10:00\" in \"_site/2013/04/09/entry1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should see \"Post Layout: <p>content for entry2.</p>\\n built at 2013-04-09T13:14:00-10:00\" in \"_site/2013/04/09/entry2.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 254,
        "test_case": "Generate proper dates with explicitly set timezone (using non-half hour offset )",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a page layout that contains \"Page Layout: {{ site.posts.size }}\"",
                "step_name_cleaned": "I have a page layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a post layout that contains \"Post Layout: {{ content }} built at {{ page.date | date_to_xmlschema }}\"",
                "step_name_cleaned": "I have a post layout that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page with layout \"page\" that contains \"site index page\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Page Layout: 2\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the \"_site/2013/04/10/entry1.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "the \"_site/2013/04/10/entry2.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see \"Post Layout: <p>content for entry1.</p>\\n built at 2013-04-10T04:07:00\\+08:45\" in \"_site/2013/04/10/entry1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should see \"Post Layout: <p>content for entry2.</p>\\n built at 2013-04-10T07:59:00\\+08:45\" in \"_site/2013/04/10/entry2.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 255,
        "test_case": "Limit the number of posts generated by most recent date",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the \"_site/2009/04/05/bananas.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the \"_site/2009/04/01/oranges.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/2009/03/27/apples.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 256,
        "test_case": "Using a different layouts directory",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _theme directory",
                "step_name_cleaned": "I have a _theme directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a page theme that contains \"Page Layout: {{ site.posts.size }} on {{ site.time | date: \"%Y-%m-%d\" }}\"",
                "step_name_cleaned": "I have a page theme that contains \"\"%Y-%m-%d\"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a post theme that contains \"Post Layout: {{ content }}\"",
                "step_name_cleaned": "I have a post theme that contains \"\"",
                "step_definition": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page with layout \"page\" that contains \"site index page\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"Page Layout: 2 on 2010-01-01\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"Post Layout: <p>content for entry1.</p>\" in \"_site/2007/12/31/entry1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"Post Layout: <p>content for entry2.</p>\" in \"_site/2020/01/31/entry2.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_configuration.feature",
        "test_num": 257,
        "test_case": "arbitrary file reads via layouts",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page with layout \"page\" that contains \"FOO\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"_config.yml\" file that contains \"layouts: '../../../../../../../../../../../../../../usr/include'\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"FOO\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should not see \" \" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_data.feature",
        "test_num": 258,
        "test_case": "Use page variable in a page",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"contact.html\" page with title \"Contact\" that contains \"{{ page.title }}: email@example.com\"",
                "step_name_cleaned": "I have an \"\" page with title \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"Contact: email@example.com\" in \"_site/contact.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_data.feature",
        "test_num": 259,
        "test_case": "Use page.path variable in a page",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a <dir> directory",
                "step_name_cleaned": "I have a <dir> directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a \"<path>\" page that contains \"Source path: {{ page.path }}\"",
                "step_name_cleaned": "I have a \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Source path: <path>\" in \"_site/<path>\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_data.feature",
        "test_num": 260,
        "test_case": "Override page.path",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"override.html\" page with path \"custom-override.html\" that contains \"Custom path: {{ page.path }}\"",
                "step_name_cleaned": "I have an \"\" page with path \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"Custom path: custom-override.html\" in \"_site/override.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_data.feature",
        "test_num": 261,
        "test_case": "Use site.time variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"{{ site.time }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see today's time in \"_site/index.html\"",
                "step_name_cleaned": "I should see today's time in \"\"",
                "step_definition": "do\nstep(\"I should see \\\"#{seconds_agnostic_time(Time.now)}\\\" in \\\"#{file}\\\"\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_data.feature",
        "test_num": 262,
        "test_case": "Use site.posts variable for latest post",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" page that contains \"{{ site.posts.first.title }}: {{ site.posts.first.url }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Third Post: /2009/03/27/third-post.html\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_data.feature",
        "test_num": 263,
        "test_case": "Use site.posts variable in a loop",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" page that contains \"{% for post in site.posts %} {{ post.title }} {% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Third Post  Second Post  First Post\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_data.feature",
        "test_num": 264,
        "test_case": "Use site.categories.code variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" page that contains \"{% for post in site.categories.code %} {{ post.title }} {% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Awesome Hack\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_data.feature",
        "test_num": 265,
        "test_case": "Use site.tags variable",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" page that contains \"{% for post in site.tags.beer %} {{ post.content }} {% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"Yuengling\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_data.feature",
        "test_num": 266,
        "test_case": "Order Posts by name when on the same date",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" page that contains \"{% for post in site.posts %}{{ post.title }}:{{ post.previous.title}},{{ post.next.title}} {% endfor %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \"last:C, C:B,last B:A,C A:first,B first:,A\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_data.feature",
        "test_num": 267,
        "test_case": "Use configuration date in site payload",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"{{ site.url }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a configuration file with \"url\" set to \"http://example.com\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"http://example.com\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "site_data.feature",
        "test_num": 268,
        "test_case": "Access Jekyll version via jekyll.version",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an \"index.html\" page that contains \"{{ jekyll.version }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \"\\d+\\.\\d+\\.\\d+\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme.feature",
        "test_num": 269,
        "test_case": "Generating a new theme scaffold",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run jekyll new-theme my-cool-theme",
                "step_name_cleaned": "I run jekyll new-theme my-cool-theme",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the my-cool-theme directory should exist",
                "step_name_cleaned": "the my-cool-theme directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme.feature",
        "test_num": 270,
        "test_case": "Generating a new theme scaffold with a code of conduct",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run jekyll new-theme my-cool-theme --code-of-conduct",
                "step_name_cleaned": "I run jekyll new-theme my-cool-theme --code-of-conduct",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the my-cool-theme directory should exist",
                "step_name_cleaned": "the my-cool-theme directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the \"my-cool-theme/CODE_OF_CONDUCT.md\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme.feature",
        "test_num": 271,
        "test_case": "A theme with SCSS",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should see \".sample {\\n  color: red;\\n}\\n\\n\\/\\*# sourceMappingURL=style.css.map \\*\\/\" in \"_site/assets/style.css\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme.feature",
        "test_num": 272,
        "test_case": "Overriding a theme with SCSS",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an assets directory",
                "step_name_cleaned": "I have an assets directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"assets/style.scss\" page that contains \"@import 'test-theme-black';\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should see \".sample {\\n  color: black;\\n}\\n\\n\\/\\*# sourceMappingURL=style.css.map \\*\\/\" in \"_site/assets/style.css\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme.feature",
        "test_num": 273,
        "test_case": "A theme with an include",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an _includes directory",
                "step_name_cleaned": "I have an _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"_includes/in_project.html\" file that contains \"I'm in the project.\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page that contains \"{% include in_project.html %} {% include include.html %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"I'm in the project.\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"<span class=\\\"sample\\\">include.html from test-theme</span>\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\"sample\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme.feature",
        "test_num": 274,
        "test_case": "A theme without data",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"theme\" set to \"test-theme-skinny\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _data directory",
                "step_name_cleaned": "I have a _data directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_data/greetings.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page that contains \"{{ site.data.greetings.foo }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Hello! I\u2019m foo. And who are you?\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme.feature",
        "test_num": 275,
        "test_case": "A theme with data overridden by data in source directory",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _data directory",
                "step_name_cleaned": "I have a _data directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_data/greetings.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page that contains \"{{ site.data.greetings.foo }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"Hello! I\u2019m foo. And who are you?\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should not see \"Hello! I\u2019m bar. What\u2019s up so far?\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme.feature",
        "test_num": 276,
        "test_case": "A theme with a layout",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an _layouts directory",
                "step_name_cleaned": "I have an _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"_layouts/post.html\" file that contains \"post.html from the project: {{ content }}\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page with layout \"default\" that contains \"I'm content.\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"post.html\" page with layout \"post\" that contains \"I'm more content.\"",
                "step_name_cleaned": "I have a \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"default.html from test-theme: I'm content.\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"post.html from the project: I'm more content.\" in \"_site/post.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme.feature",
        "test_num": 277,
        "test_case": "A theme with assets",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an assets directory",
                "step_name_cleaned": "I have an assets directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have an \"assets/application.coffee\" file that contains \"From your site.\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"assets/base.js\" file that contains \"From your site.\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should see \"From your site.\" in \"_site/assets/application.coffee\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"From your site.\" in \"_site/assets/base.js\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme.feature",
        "test_num": 278,
        "test_case": "A theme with *just* layouts",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"theme\" set to \"test-theme-skinny\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.html\" page with layout \"home\" that contains \"The quick brown fox.\"",
                "step_name_cleaned": "I have an \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"Message: The quick brown fox.\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I should not see \"_includes\" in the build output",
                "step_name_cleaned": "I should not see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should not see \"_sass\" in the build output",
                "step_name_cleaned": "I should not see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should not see \"assets\" in the build output",
                "step_name_cleaned": "I should not see \"\" in the build output",
                "step_definition": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme.feature",
        "test_num": 279,
        "test_case": "Requiring dependencies of a theme",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"theme\" set to \"test-dependency-theme\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the \"_site/test.txt\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme.feature",
        "test_num": 280,
        "test_case": "Complicated site that puts it all together",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _posts directory",
                "step_name_cleaned": "I have a _posts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have the following posts",
                "step_name_cleaned": "I have the following posts",
                "step_definition": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a _layouts directory",
                "step_name_cleaned": "I have a _layouts directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have a \"_layouts/post.html\" page with layout \"default\" that contains \"I am a post layout! {{ content }}\"",
                "step_name_cleaned": "I have a \"\" page with layout \"\" that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I have an _includes directory",
                "step_name_cleaned": "I have an _includes directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I have an \"_includes/in_project.html\" file that contains \"I am in the project, not the theme.\"",
                "step_name_cleaned": "I have an \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should see \"I am in the project, not the theme.\" in \"_site/2016/04/21/entry2.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "I should see \"<span class=\\\"sample\\\">include.html from test-theme</span>\" in \"_site/2016/04/21/entry2.html\"",
                "step_name_cleaned": "I should see \"\"sample\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "I should see \"default.html from test-theme:\" in \"_site/2016/04/21/entry2.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "I should see \"I am using a themed layout.\" in \"_site/2016/04/21/entry2.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "I should not see \"I am a post layout!\" in \"_site/2016/04/21/entry2.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "I should not see \"I am in the project, not the theme.\" in \"_site/2016/04/21/entry1.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "I should see \"<span class=\\\"sample\\\">include.html from test-theme</span>\" in \"_site/2016/04/21/entry1.html\"",
                "step_name_cleaned": "I should see \"\"sample\\\"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 18,
                "step_name": "I should see \"default.html from test-theme:\" in \"_site/2016/04/21/entry1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 19,
                "step_name": "I should see \"I am using a local layout.\" in \"_site/2016/04/21/entry1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 20,
                "step_name": "I should see \"I am a post layout!\" in \"_site/2016/04/21/entry1.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme.feature",
        "test_num": 281,
        "test_case": "Complicated site that puts it all together in respect to data folders",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a _data directory",
                "step_name_cleaned": "I have a _data directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a \"_data/i18n.yml\" file with content",
                "step_name_cleaned": "I have a \"\" file with content",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have an \"index.html\" page that contains \"{% include testimonials.html %}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should not see \"Testimonials\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I should see \"Kundenstimmen\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "I should see \"Design by FTC\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme_configuration.feature",
        "test_num": 282,
        "test_case": "Easy onboarding with a pre-configured theme",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.md\" page that contains \"{{ site.test_theme.skin }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should see \"aero\" in \"_site/index.html\"",
                "step_name_cleaned": "I should see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme_configuration.feature",
        "test_num": 283,
        "test_case": "Disabling import of theme configuration entirely",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with",
                "step_name_cleaned": "I have a configuration file with",
                "step_definition": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.md\" page that contains \"{{ site.test_theme.skin }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should not see \"aero\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme_configuration.feature",
        "test_num": 284,
        "test_case": "A pre-configured theme with valid config file overriding Jekyll defaults",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a configuration file with \"theme\" set to \"test-theme\"",
                "step_name_cleaned": "I have a configuration file with \"\" set to \"\"",
                "step_definition": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an \"index.md\" page that contains \"{{ site.baseurl }}\"",
                "step_name_cleaned": "I have an \"\" page that contains \"\"",
                "step_definition": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I have a node_modules directory",
                "step_name_cleaned": "I have a node_modules directory",
                "step_definition": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a \"node_modules/alert.js\" file that contains \"alert('foo');\"",
                "step_name_cleaned": "I have a \"\" file that contains \"\"",
                "step_definition": "do\nFile.write(file, text)\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run jekyll build",
                "step_name_cleaned": "I run jekyll build",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the _site directory should exist",
                "step_name_cleaned": "the _site directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the \"_site/index.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "the \"_site/node_modules/alert.js\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the \"_site/extras/banner.html\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I should not see \"/test-theme\" in \"_site/index.html\"",
                "step_name_cleaned": "I should not see \"\" in \"\"",
                "step_definition": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme_gem.feature",
        "test_num": 285,
        "test_case": "Generating a new Jekyll Theme",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run jekyll new-theme my-cool-theme",
                "step_name_cleaned": "I run jekyll new-theme my-cool-theme",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I should get a zero exit status",
                "step_name_cleaned": "I should get a zero exit status",
                "step_definition": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the my-cool-theme directory should exist",
                "step_name_cleaned": "the my-cool-theme directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "theme_gem.feature",
        "test_num": 286,
        "test_case": "Checking if a bonafide Theme gem will be built from generated scaffolding",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run jekyll new-theme my-cool-theme",
                "step_name_cleaned": "I run jekyll new-theme my-cool-theme",
                "step_definition": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "the my-cool-theme directory should exist",
                "step_name_cleaned": "the my-cool-theme directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I decide to build the theme gem",
                "step_name_cleaned": "I decide to build the theme gem",
                "step_definition": "do\nDir.chdir(Paths.theme_gem_dir)\n[\"_includes/blank.html\", \"_sass/blank.scss\", \"assets/blank.scss\", \"_config.yml\"].each { |filename,|\n  File.new(filename, \"w\")\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the \"_includes/blank.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the \"_sass/blank.scss\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the \"assets/blank.scss\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "I run git add .",
                "step_name_cleaned": "I run git add .",
                "step_definition": "do\nrun_in_shell(\"git\", \"add\", \".\", \"--verbose\")\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "I should get an updated git index",
                "step_name_cleaned": "I should get an updated git index",
                "step_definition": "do\nindex = [\".gitignore\", \"Gemfile\", \"LICENSE.txt\", \"README.md\", \"_config.yml\", \"_includes/blank.html\", \"_layouts/default.html\", \"_layouts/page.html\", \"_layouts/post.html\", \"_sass/blank.scss\", \"assets/blank.scss\", \"my-cool-theme.gemspec\"]\nindex.each { |file,|\n  expect(jekyll_run_output).to(match(file))\n}\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "I run gem build --force my-cool-theme.gemspec",
                "step_name_cleaned": "I run gem build --force my-cool-theme.gemspec",
                "step_definition": "do\nrun_rubygem(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 10,
                "step_name": "the \"./my-cool-theme-0.1.0.gem\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 11,
                "step_name": "I run gem unpack my-cool-theme-0.1.0.gem",
                "step_name_cleaned": "I run gem unpack my-cool-theme-0.1.0.gem",
                "step_definition": "do\nrun_rubygem(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 12,
                "step_name": "the my-cool-theme-0.1.0 directory should exist",
                "step_name_cleaned": "the my-cool-theme-0.1.0 directory should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 13,
                "step_name": "the \"my-cool-theme-0.1.0/_layouts/default.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 14,
                "step_name": "the \"my-cool-theme-0.1.0/_includes/blank.html\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 15,
                "step_name": "the \"my-cool-theme-0.1.0/_sass/blank.scss\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 16,
                "step_name": "the \"my-cool-theme-0.1.0/assets/blank.scss\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 17,
                "step_name": "the \"my-cool-theme-0.1.0/_config.yml\" file should exist",
                "step_name_cleaned": "the \"\" file should exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 18,
                "step_name": "the my-cool-theme-0.1.0/.git directory should not exist",
                "step_name_cleaned": "the my-cool-theme-0.1.0/.git directory should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 19,
                "step_name": "the \"my-cool-theme-0.1.0/.gitignore\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 20,
                "step_name": "the \"my-cool-theme-0.1.0/Gemfile\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            },
            {
                "step_num": 21,
                "step_name": "the \"my-cool-theme-0.1.0/my-cool-theme.gemspec\" file should not exist",
                "step_name_cleaned": "the \"\" file should not exist",
                "step_definition": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
                "step_definition_file": "features/step_definitions.rb"
            }
        ]
    }
]