{
  "^I have a blank site in \"(.*)\"$": {
    "Code": "do\nunless File.exist?(path)\n  FileUtils.mkdir_p(path)\nend\nend",
    "File": "features/step_definitions.rb"
  },
  "^I do not have a \"(.*)\" directory$": {
    "Code": "do\nPaths.test_dir.join(path).directory?\nend",
    "File": "features/step_definitions.rb"
  },
  "^I have an? \"(.*)\" page(?: with (.*) \"(.*)\")? that contains \"(.*)\"$": {
    "Code": "do\nFile.write(file, <<-HEREDOC)\n---\n#{key || \"layout\"}: #{value || \"none\"}\n---\n\n#{text}\nHEREDOC\nend",
    "File": "features/step_definitions.rb"
  },
  "^I have an? \"(.*)\" file that contains \"(.*)\"$": {
    "Code": "do\nFile.write(file, text)\nend",
    "File": "features/step_definitions.rb"
  },
  "^I have an? (.*) (layout|theme) that contains \"(.*)\"$": {
    "Code": "do\nfolder = if type == \"layout\"\n  \"_layouts\"\nelse\n  \"_theme\"\nend\ndestination_file = Pathname.new(File.join(folder, \"#{name}.html\"))\nunless destination_file.parent.directory?\n  FileUtils.mkdir_p(destination_file.parent)\nend\nFile.write(destination_file, text)\nend",
    "File": "features/step_definitions.rb"
  },
  "^I have an? \"(.*)\" file with content:$": {
    "Code": "do\nFile.write(file, text)\nend",
    "File": "features/step_definitions.rb"
  },
  "^I have an? \"(.*)\" page with content:$": {
    "Code": "do\nFile.write(file, <<-HEREDOC)\n---\n---\n\n#{text}\nHEREDOC\nend",
    "File": "features/step_definitions.rb"
  },
  "^I have an? (.*) directory$": {
    "Code": "do\nunless File.directory?(dir)\n  FileUtils.mkdir_p(dir)\nend\nend",
    "File": "features/step_definitions.rb"
  },
  "^I have the following (draft|page|post)s?(?: (in|under) \"([^\"]+)\")?:$": {
    "Code": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  ext = input_hash.[](\"type\") || \"markdown\"\n  if [\"draft\", \"page\"].include?(status)\n    filename = \"#{title}.#{ext}\"\n  end\n  (before, after) = location(folder, direction)\n  if status == \"draft\"\n    dest_folder = \"_drafts\"\n  end\n  if status == \"post\"\n    dest_folder = \"_posts\"\n  end\n  if status == \"page\"\n    dest_folder = \"\"\n  end\n  if status == \"post\"\n    parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n    input_hash.[]=(\"date\", parsed_date)\n    filename = \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.#{ext}\"\n  end\n  path = File.join(before, dest_folder, after, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
    "File": "features/step_definitions.rb"
  },
  "^I have the following (draft|post)s? within the \"(.*)\" directory:$": {
    "Code": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  parsed_date = Time.xmlschema(input_hash.[](\"date\")) rescue Time.parse(input_hash.[](\"date\"))\n  filename = if type == \"draft\"\n    \"#{title}.markdown\"\n  else\n    \"#{parsed_date.strftime(\"%Y-%m-%d\")}-#{title}.markdown\"\n  end\n  path = File.join(folder, \"_#{type}s\", filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
    "File": "features/step_definitions.rb"
  },
  "^I have the following documents? under the (.*) collection:$": {
    "Code": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  filename = \"#{title}.md\"\n  dest_folder = \"_#{folder}\"\n  path = File.join(dest_folder, filename)\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
    "File": "features/step_definitions.rb"
  },
  "^I have the following documents? under the \"(.*)\" collection within the \"(.*)\" directory:$": {
    "Code": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  path = File.join(dir, \"_#{label}\", \"#{title}.md\")\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
    "File": "features/step_definitions.rb"
  },
  "^I have the following documents? nested inside \"(.*)\" directory under the \"(.*)\" collection within the \"(.*)\" directory:$": {
    "Code": "do\ntable.hashes.each { |input_hash,|\n  title = slug(input_hash.[](\"title\"))\n  path = File.join(dir, \"_#{label}\", subdir, \"#{title}.md\")\n  File.write(path, file_content_from_hash(input_hash))\n}\nend",
    "File": "features/step_definitions.rb"
  },
  "^I have a configuration file with \"(.*)\" set to \"(.*)\"$": {
    "Code": "do\nconfig = if source_dir.join(\"_config.yml\").exist?\n  SafeYAML.load_file(source_dir.join(\"_config.yml\"))\nelse\n  {}\nend\nconfig.[]=(key, SafeYAML.load(value))\nif key == \"timezone\"\n  Jekyll.set_timezone(value)\nend\nFile.write(\"_config.yml\", YAML.dump(config))\nend",
    "File": "features/step_definitions.rb"
  },
  "^I have a configuration file with:$": {
    "Code": "do\ntable.hashes.each { |row,|\n  step(\"I have a configuration file with \\\"#{row.[](\"key\")}\\\" set to \\\"#{row.[](\"value\")}\\\"\")\n}\nend",
    "File": "features/step_definitions.rb"
  },
  "^I have a configuration file with \"([^\\\"]*)\" set to:$": {
    "Code": "do\nFile.open(\"_config.yml\", \"w\") { |f,|\n  f.write(\"#{key}:\\n\")\n  table.hashes.each { |row,|\n    f.write(<<-HEREDOC)\n- #{row.[](\"value\")}\n    HEREDOC\n  }\n}\nend",
    "File": "features/step_definitions.rb"
  },
  "^I have fixture collections(?: in \"(.*)\" directory)?$": {
    "Code": "do\ncollections_dir = File.join(source_dir, directory.to_s)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_methods\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_thanksgiving\"), collections_dir)\nFileUtils.cp_r(Paths.source_dir.join(\"test\", \"source\", \"_tutorials\"), collections_dir)\nend",
    "File": "features/step_definitions.rb"
  },
  "^I wait (\\d+) second(s?)$": {
    "Code": "do\nsleep(time.to_f)\nend",
    "File": "features/step_definitions.rb"
  },
  "^I run jekyll(.*)$": {
    "Code": "do\nrun_jekyll(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
    "File": "features/step_definitions.rb"
  },
  "^I run bundle(.*)$": {
    "Code": "do\nrun_bundle(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
    "File": "features/step_definitions.rb"
  },
  "^I run gem(.*)$": {
    "Code": "do\nrun_rubygem(args)\nif args.include?(\"--verbose\") || ENV.[](\"DEBUG\")\n  warn(<<-HEREDOC)\n\n#{jekyll_run_output}\n  HEREDOC\nend\nend",
    "File": "features/step_definitions.rb"
  },
  "^I run git add .$": {
    "Code": "do\nrun_in_shell(\"git\", \"add\", \".\", \"--verbose\")\nend",
    "File": "features/step_definitions.rb"
  },
  "^I decide to build the theme gem$": {
    "Code": "do\nDir.chdir(Paths.theme_gem_dir)\n[\"_includes/blank.html\", \"_sass/blank.scss\", \"assets/blank.scss\", \"_config.yml\"].each { |filename,|\n  File.new(filename, \"w\")\n}\nend",
    "File": "features/step_definitions.rb"
  },
  "^I change \"(.*)\" to contain \"(.*)\"$": {
    "Code": "do\nFile.open(file, \"a\") { |f,|\n  f.write(text)\n}\nend",
    "File": "features/step_definitions.rb"
  },
  "^I delete the file \"(.*)\"$": {
    "Code": "do\nFile.delete(file)\nend",
    "File": "features/step_definitions.rb"
  },
  "^the (.*) directory should +(not )?exist$": {
    "Code": "do\nif negative.nil?\n  expect(Pathname.new(dir)).to(exist)\nelse\n  expect(Pathname.new(dir)).to_not(exist)\nend\nend",
    "File": "features/step_definitions.rb"
  },
  "^I should (not )?see \"(.*)\" in \"(.*)\"$": {
    "Code": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
    "File": "features/step_definitions.rb"
  },
  "^I should (not )?see \"(.*)\" in \"(.*)\" if on Windows$": {
    "Code": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  if Jekyll::Utils::Platforms.really_windows?\n    expect(file_contents(file)).to(match(regexp))\n  else\n    expect(file_contents(file)).not_to(match(regexp))\n  end\nend\nend",
    "File": "features/step_definitions.rb"
  },
  "^I should (not )?see \"(.*)\" in \"(.*)\" unless Windows$": {
    "Code": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text, Regexp::MULTILINE)\nif negative.nil? || negative.empty?\n  if Jekyll::Utils::Platforms.really_windows?\n    expect(file_contents(file)).not_to(match(regexp))\n  else\n    expect(file_contents(file)).to(match(regexp))\n  end\nend\nend",
    "File": "features/step_definitions.rb"
  },
  "^I should see date \"(.*)\" in \"(.*)\" unless Windows$": {
    "Code": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text)\nif Jekyll::Utils::Platforms.really_windows? && !dst_active?\n  expect(file_contents(file)).not_to(match(regexp))\nelse\n  expect(file_contents(file)).to(match(regexp))\nend\nend",
    "File": "features/step_definitions.rb"
  },
  "^I should see date \"(.*)\" in \"(.*)\" if on Windows$": {
    "Code": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nregexp = Regexp.new(text)\nif Jekyll::Utils::Platforms.really_windows? && !dst_active?\n  expect(file_contents(file)).to(match(regexp))\nelse\n  expect(file_contents(file)).not_to(match(regexp))\nend\nend",
    "File": "features/step_definitions.rb"
  },
  "^I should see exactly \"(.*)\" in \"(.*)\"$": {
    "Code": "do\nstep(\"the \\\"#{file}\\\" file should exist\")\nexpect(file_contents(file).strip).to(eq(text))\nend",
    "File": "features/step_definitions.rb"
  },
  "^I should see escaped \"(.*)\" in \"(.*)\"$": {
    "Code": "do\nstep(\"I should see \\\"#{Regexp.escape(text)}\\\" in \\\"#{file}\\\"\")\nend",
    "File": "features/step_definitions.rb"
  },
  "^the \"(.*)\" file should +(not )?exist$": {
    "Code": "do\nif negative.nil?\n  expect(Pathname.new(file)).to(exist)\nelse\n  expect(Pathname.new(file)).to_not(exist)\nend\nend",
    "File": "features/step_definitions.rb"
  },
  "^I should see today's time in \"(.*)\"$": {
    "Code": "do\nstep(\"I should see \\\"#{seconds_agnostic_time(Time.now)}\\\" in \\\"#{file}\\\"\")\nend",
    "File": "features/step_definitions.rb"
  },
  "^I should see today's date in \"(.*)\"$": {
    "Code": "do\nstep(\"I should see \\\"#{Date.today}\\\" in \\\"#{file}\\\"\")\nend",
    "File": "features/step_definitions.rb"
  },
  "^I should (not )?see \"(.*)\" in the build output$": {
    "Code": "do\nif negative.nil? || negative.empty?\n  expect(jekyll_run_output).to(match(Regexp.new(text)))\nelse\n  expect(jekyll_run_output).not_to(match(Regexp.new(text)))\nend\nend",
    "File": "features/step_definitions.rb"
  },
  "^I should get an updated git index$": {
    "Code": "do\nindex = [\".gitignore\", \"Gemfile\", \"LICENSE.txt\", \"README.md\", \"_config.yml\", \"_includes/blank.html\", \"_layouts/default.html\", \"_layouts/page.html\", \"_layouts/post.html\", \"_sass/blank.scss\", \"assets/blank.scss\", \"my-cool-theme.gemspec\"]\nindex.each { |file,|\n  expect(jekyll_run_output).to(match(file))\n}\nend",
    "File": "features/step_definitions.rb"
  },
  "^I should get a zero exit(?:-| )status$": {
    "Code": "do\nstep(\"I should see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
    "File": "features/step_definitions.rb"
  },
  "^I should get a non-zero exit(?:-| )status$": {
    "Code": "do\nstep(\"I should not see \\\"EXIT STATUS: 0\\\" in the build output\")\nend",
    "File": "features/step_definitions.rb"
  }
}