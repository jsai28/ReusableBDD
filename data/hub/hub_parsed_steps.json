[
    {
        "feature_file": "alias.feature",
        "test_num": 1,
        "test_case": "bash instructions",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$SHELL is \"/bin/bash\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub alias`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "alias.feature",
        "test_num": 2,
        "test_case": "fish instructions",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$SHELL is \"/usr/local/bin/fish\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub alias`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "alias.feature",
        "test_num": 3,
        "test_case": "rc instructions",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$SHELL is \"/usr/local/bin/rc\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub alias`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "alias.feature",
        "test_num": 4,
        "test_case": "zsh instructions",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$SHELL is \"/bin/zsh\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub alias`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "alias.feature",
        "test_num": 5,
        "test_case": "csh instructions",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$SHELL is \"/bin/csh\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub alias`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "alias.feature",
        "test_num": 6,
        "test_case": "tcsh instructions",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$SHELL is \"/bin/tcsh\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub alias`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "alias.feature",
        "test_num": 7,
        "test_case": "bash code",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$SHELL is \"/bin/bash\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub alias -s`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "alias.feature",
        "test_num": 8,
        "test_case": "fish code",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$SHELL is \"/usr/local/bin/fish\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub alias -s`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "alias.feature",
        "test_num": 9,
        "test_case": "rc code",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$SHELL is \"/usr/local/bin/rc\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub alias -s`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "alias.feature",
        "test_num": 10,
        "test_case": "zsh code",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$SHELL is \"/bin/zsh\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub alias -s`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "alias.feature",
        "test_num": 11,
        "test_case": "csh code",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$SHELL is \"/bin/csh\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub alias -s`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "alias.feature",
        "test_num": 12,
        "test_case": "tcsh code",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$SHELL is \"/bin/tcsh\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub alias -s`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "alias.feature",
        "test_num": 13,
        "test_case": "unsupported shell",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$SHELL is \"/bin/zwoosh\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub alias -s`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "alias.feature",
        "test_num": 14,
        "test_case": "unknown shell",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$SHELL is \"\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub alias`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "alias.feature",
        "test_num": 15,
        "test_case": "unknown shell output",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$SHELL is \"\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub alias -s`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "am.feature",
        "test_num": 16,
        "test_case": "Apply a local patch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub am some.patch`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "am.feature",
        "test_num": 17,
        "test_case": "Apply commits from pull request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub am -q -3 https://github.com/mislav/dotfiles/pull/387`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the latest commit message should be \"Create a README\"",
                "step_definition": "do\nstep(\"I successfully run `git log -1 --format=%s`\")\nstep(\"the output should contain exactly \\\"#{subject}\\\\n\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "am.feature",
        "test_num": 18,
        "test_case": "Apply commits when TMPDIR is empty",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$TMPDIR is \"\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub am -q https://github.com/mislav/dotfiles/pull/387`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the latest commit message should be \"Create a README\"",
                "step_definition": "do\nstep(\"I successfully run `git log -1 --format=%s`\")\nstep(\"the output should contain exactly \\\"#{subject}\\\\n\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "am.feature",
        "test_num": 19,
        "test_case": "Enterprise repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://git.my.org/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am \"mislav\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub am -q -3 https://git.my.org/mislav/dotfiles/pull/387`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the latest commit message should be \"Create a README\"",
                "step_definition": "do\nstep(\"I successfully run `git log -1 --format=%s`\")\nstep(\"the output should contain exactly \\\"#{subject}\\\\n\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "am.feature",
        "test_num": 20,
        "test_case": "Apply patch from commit",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub am -q https://github.com/davidbalbert/dotfiles/commit/fdb9921`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the latest commit message should be \"Create a README\"",
                "step_definition": "do\nstep(\"I successfully run `git log -1 --format=%s`\")\nstep(\"the output should contain exactly \\\"#{subject}\\\\n\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "am.feature",
        "test_num": 21,
        "test_case": "Apply patch from commit in a pull request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub am -q https://github.com/davidbalbert/dotfiles/pull/123/commits/fdb9921`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the latest commit message should be \"Create a README\"",
                "step_definition": "do\nstep(\"I successfully run `git log -1 --format=%s`\")\nstep(\"the output should contain exactly \\\"#{subject}\\\\n\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "am.feature",
        "test_num": 22,
        "test_case": "Apply patch from gist",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub am -q https://gist.github.com/8da7fb575debd88c54cf`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the latest commit message should be \"Create a README\"",
                "step_definition": "do\nstep(\"I successfully run `git log -1 --format=%s`\")\nstep(\"the output should contain exactly \\\"#{subject}\\\\n\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 23,
        "test_case": "GET resource",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub api hello/world`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 24,
        "test_case": "GET Enterprise resource",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am \"octokitten\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "$GITHUB_HOST is \"git.my.org\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub api hello/world`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 25,
        "test_case": "Non-success response",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub api hello/world`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 22",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stdout should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 26,
        "test_case": "Non-success response flat output",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub api -t hello/world`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 22",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stdout should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 27,
        "test_case": "Non-success response doesn't choke on non-JSON",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub api -t hello/world`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 22",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stdout should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 28,
        "test_case": "GET query string",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub api -XGET -Fname=Ed -Fnum=12 -Fbool=false -Fvoid=null hello/world`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 29,
        "test_case": "GET full URL",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub api https://api.github.com/hello/world`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 30,
        "test_case": "Paginate REST",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub api --paginate comments?per_page=6`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 31,
        "test_case": "Paginate GraphQL",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub api --paginate graphql -f query=QUERY`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 32,
        "test_case": "Avoid leaking token to a 3rd party",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub api http://example.com/hello/world`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 33,
        "test_case": "Request headers",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub api hello/world -H 'x-foo:bar' -H 'Accept: text/json'`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 34,
        "test_case": "Response headers",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub api hello/world -i`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain \"HTTP/1.1 200 OK\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the output should contain \"Content-Length: 2\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 35,
        "test_case": "POST fields",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub api -f name=@hubot -Fnum=12 -Fbool=false -Fvoid=null hello/world`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 36,
        "test_case": "POST raw fields",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub api -fnum=12 -fbool=false hello/world`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 37,
        "test_case": "POST from stdin",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub api -t -F query=@- graphql` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I pass in",
                "step_definition": "do\ntype(input)\nclose_input\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 38,
        "test_case": "POST body from file",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "a file named \"payload.json\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub api create --input payload.json`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 39,
        "test_case": "POST body from stdin",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub api create --input -` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I pass in",
                "step_definition": "do\ntype(input)\nclose_input\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 40,
        "test_case": "Pass extra GraphQL variables",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub api -F query='query {}' -Fname=Jet -Fsize=2 graphql`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 41,
        "test_case": "Enterprise GraphQL",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am \"octokitten\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "$GITHUB_HOST is \"git.my.org\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub api graphql -f query=QUERY`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 42,
        "test_case": "Repo context",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/octocat/Hello-World.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub api repos/{owner}/{repo}/commits`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 43,
        "test_case": "Multiple string interpolation",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/octocat/Hello-World.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub api repos/{owner}/{repo}/pulls?head={owner}:{repo}`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 44,
        "test_case": "Repo context in graphql",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/octocat/Hello-World.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub api -t -F query=@- graphql` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I pass in",
                "step_definition": "do\ntype(input)\nclose_input\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 45,
        "test_case": "Cache response",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub api -t 'count?a=1&b=2' --cache 5`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "it should pass with \".count\t1\"",
                "step_definition": "do\nlast_command_started.stop\nif pass_fail == \"pass\"\n  expect(last_command_stopped).to(be_successfully_executed)\nelse\n  expect(last_command_stopped).not_to(be_successfully_executed)\nend\nexpect(last_command_stopped).to(have_output(an_output_string_including(expected)))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run `hub api -t 'count?b=2&a=1' --cache 5`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "it should pass with \".count\t1\"",
                "step_definition": "do\nlast_command_started.stop\nif pass_fail == \"pass\"\n  expect(last_command_stopped).to(be_successfully_executed)\nelse\n  expect(last_command_stopped).not_to(be_successfully_executed)\nend\nexpect(last_command_stopped).to(have_output(an_output_string_including(expected)))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 46,
        "test_case": "Cache graphql response",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub api -t graphql -F query=Q1 --cache 5`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "it should pass with \".count\t1\"",
                "step_definition": "do\nlast_command_started.stop\nif pass_fail == \"pass\"\n  expect(last_command_stopped).to(be_successfully_executed)\nelse\n  expect(last_command_stopped).not_to(be_successfully_executed)\nend\nexpect(last_command_stopped).to(have_output(an_output_string_including(expected)))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run `hub api -t graphql -F query=Q1 --cache 5`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "it should pass with \".count\t1\"",
                "step_definition": "do\nlast_command_started.stop\nif pass_fail == \"pass\"\n  expect(last_command_stopped).to(be_successfully_executed)\nelse\n  expect(last_command_stopped).not_to(be_successfully_executed)\nend\nexpect(last_command_stopped).to(have_output(an_output_string_including(expected)))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run `hub api -t graphql -F query=Q2 --cache 5`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "it should pass with \".count\t2\"",
                "step_definition": "do\nlast_command_started.stop\nif pass_fail == \"pass\"\n  expect(last_command_stopped).to(be_successfully_executed)\nelse\n  expect(last_command_stopped).not_to(be_successfully_executed)\nend\nexpect(last_command_stopped).to(have_output(an_output_string_including(expected)))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 47,
        "test_case": "Cache client error response",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub api -t count --cache 5`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "it should fail with \".count\t1\"",
                "step_definition": "do\nlast_command_started.stop\nif pass_fail == \"pass\"\n  expect(last_command_stopped).to(be_successfully_executed)\nelse\n  expect(last_command_stopped).not_to(be_successfully_executed)\nend\nexpect(last_command_stopped).to(have_output(an_output_string_including(expected)))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run `hub api -t count --cache 5`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "it should fail with \".count\t1\"",
                "step_definition": "do\nlast_command_started.stop\nif pass_fail == \"pass\"\n  expect(last_command_stopped).to(be_successfully_executed)\nelse\n  expect(last_command_stopped).not_to(be_successfully_executed)\nend\nexpect(last_command_stopped).to(have_output(an_output_string_including(expected)))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the exit status should be 22",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 48,
        "test_case": "Avoid caching server error response",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub api -t count --cache 5`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "it should fail with \".count\t1\"",
                "step_definition": "do\nlast_command_started.stop\nif pass_fail == \"pass\"\n  expect(last_command_stopped).to(be_successfully_executed)\nelse\n  expect(last_command_stopped).not_to(be_successfully_executed)\nend\nexpect(last_command_stopped).to(have_output(an_output_string_including(expected)))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run `hub api -t count --cache 5`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "it should pass with \".count\t2\"",
                "step_definition": "do\nlast_command_started.stop\nif pass_fail == \"pass\"\n  expect(last_command_stopped).to(be_successfully_executed)\nelse\n  expect(last_command_stopped).not_to(be_successfully_executed)\nend\nexpect(last_command_stopped).to(have_output(an_output_string_including(expected)))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run `hub api -t count --cache 5`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "it should pass with \".count\t2\"",
                "step_definition": "do\nlast_command_started.stop\nif pass_fail == \"pass\"\n  expect(last_command_stopped).to(be_successfully_executed)\nelse\n  expect(last_command_stopped).not_to(be_successfully_executed)\nend\nexpect(last_command_stopped).to(have_output(an_output_string_including(expected)))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 49,
        "test_case": "Avoid caching response if the OAuth token changes",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub api -t count --cache 5`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "it should pass with \".count\t1\"",
                "step_definition": "do\nlast_command_started.stop\nif pass_fail == \"pass\"\n  expect(last_command_stopped).to(be_successfully_executed)\nelse\n  expect(last_command_stopped).not_to(be_successfully_executed)\nend\nexpect(last_command_stopped).to(have_output(an_output_string_including(expected)))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I am \"octocat\" on github.com with OAuth token \"TOKEN2\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run `hub api -t count --cache 5`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "it should pass with \".count\t2\"",
                "step_definition": "do\nlast_command_started.stop\nif pass_fail == \"pass\"\n  expect(last_command_stopped).to(be_successfully_executed)\nelse\n  expect(last_command_stopped).not_to(be_successfully_executed)\nend\nexpect(last_command_stopped).to(have_output(an_output_string_including(expected)))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 50,
        "test_case": "Honor rate limit with pagination",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub api --obey-ratelimit --paginate hello`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain \"API rate limit exceeded; pausing until \"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 51,
        "test_case": "Succumb to rate limit with pagination",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub api --paginate -t hello`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 22",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should not contain \"API rate limit exceeded\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the stdout should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 52,
        "test_case": "Honor rate limit for 403s",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub api --obey-ratelimit hello`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain \"API rate limit exceeded; pausing until \"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 53,
        "test_case": "403 unrelated to rate limit",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub api --obey-ratelimit hello`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 22",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should not contain \"API rate limit exceeded\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 54,
        "test_case": "Warn about insufficient OAuth scopes",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub api hello`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 22",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "api.feature",
        "test_num": 55,
        "test_case": "Print the SSO challenge to stderr",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub api orgs/acme`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 22",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "apply.feature",
        "test_num": 56,
        "test_case": "Apply a local patch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub apply some.patch`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the file \"README.md\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "apply.feature",
        "test_num": 57,
        "test_case": "Apply commits from pull request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub apply -3 https://github.com/mislav/dotfiles/pull/387`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "a file named \"README.md\" should exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "apply.feature",
        "test_num": 58,
        "test_case": "Apply commits when TMPDIR is empty",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$TMPDIR is \"\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub apply https://github.com/mislav/dotfiles/pull/387`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "a file named \"README.md\" should exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "apply.feature",
        "test_num": 59,
        "test_case": "Enterprise repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://git.my.org/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am \"mislav\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub apply https://git.my.org/mislav/dotfiles/pull/387`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "a file named \"README.md\" should exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "apply.feature",
        "test_num": 60,
        "test_case": "Apply patch from commit",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub apply https://github.com/davidbalbert/dotfiles/commit/fdb9921`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "a file named \"README.md\" should exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "apply.feature",
        "test_num": 61,
        "test_case": "Apply patch from gist",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub apply https://gist.github.com/8da7fb575debd88c54cf`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "a file named \"README.md\" should exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 62,
        "test_case": "Ask for username & password, create authorization",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub create` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I type \"mislav\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "I type \"kitty\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the output should contain \"github.com username:\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the output should contain \"github.com password for mislav (never stored):\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 7,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 8,
                "step_name": "the file \"~/.config/hub\" should contain \"user: MiSlAv\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 9,
                "step_name": "the file \"~/.config/hub\" should contain \"oauth_token: OTOKEN\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 10,
                "step_name": "the file \"~/.config/hub\" should have mode \"0600\"",
                "step_definition": "do\nmode = File.stat(expand_path(file)).mode\nexpect(mode.to_s(8)).to(match(/#{expected_mode}$/))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 63,
        "test_case": "Prompt for username & password, receive personal access token",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub create` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I type \"llimllib\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "I type \"0123456789012345678901234567890123456789\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the file \"../home/.config/hub\" should contain \"user: llIMLLib\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 7,
                "step_name": "the file \"../home/.config/hub\" should contain",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 64,
        "test_case": "Ask for username & password, receive password that looks like a token",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub create` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I type \"llimllib\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "I type \"0123456789012345678901234567890123456789\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the file \"../home/.config/hub\" should contain \"user: llIMLLib\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 7,
                "step_name": "the file \"../home/.config/hub\" should contain \"oauth_token: OTOKEN\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 65,
        "test_case": "Rename & retry creating authorization if there's a token name collision",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub create` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I type \"mislav\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "I type \"kitty\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the output should contain \"github.com username:\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the file \"../home/.config/hub\" should contain \"oauth_token: OTOKEN\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 66,
        "test_case": "Avoid getting caught up in infinite recursion while retrying token names",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub create` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I type \"mislav\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "I type \"kitty\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the output should contain",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the file \"../home/.config/hub\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 67,
        "test_case": "Credentials from GITHUB_USER & GITHUB_PASSWORD",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "$GITHUB_USER is \"mislav\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "$GITHUB_PASSWORD is \"kitty\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should not contain \"github.com password for mislav\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the file \"../home/.config/hub\" should contain \"oauth_token: OTOKEN\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 68,
        "test_case": "XDG: legacy config found, credentials from GITHUB_USER & GITHUB_PASSWORD",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am \"mislav\" on github.com with OAuth token \"LTOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "$GITHUB_USER is \"mislav\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "$GITHUB_PASSWORD is \"kitty\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "$XDG_CONFIG_HOME is \"$HOME/.xdg\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the file \"../home/.xdg/hub\" should contain \"oauth_token: OTOKEN\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 8,
                "step_name": "the stderr with expanded variables should contain exactly",
                "step_definition": "do\nstep(\"#{prefix}#{postfix}\", text.gsub(/<\\$(\\w+)>/) {\n  aruba.environment.[]($1)\n})\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 69,
        "test_case": "XDG: config from secondary directories",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am \"mislav\" on github.com with OAuth token \"OTOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "$GITHUB_USER is \"mislav\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "$GITHUB_PASSWORD is \"kitty\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "$XDG_CONFIG_HOME is \"$HOME/.xdg\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "$XDG_CONFIG_DIRS is \"/etc/xdg-nonsense:$HOME/.xdg-dir\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 7,
                "step_name": "I move the file named \"../home/.config/hub\" to \"../home/.xdg-dir/hub\"",
                "step_definition": "do\nmove(source, destination)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 8,
                "step_name": "I successfully run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 9,
                "step_name": "the file \"../home/.xdg/hub\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 10,
                "step_name": "the stderr should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 70,
        "test_case": "Credentials from GITHUB_TOKEN",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "$GITHUB_TOKEN is \"OTOKEN\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain \"github.com password\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the output should not contain \"github.com username\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the file \"../home/.config/hub\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 71,
        "test_case": "Credentials from GITHUB_TOKEN when obtaining username fails",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/monalisa/playground.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "$GITHUB_TOKEN is \"OTOKEN\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "$GITHUB_USER is \"\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run `hub release show v1.2.0`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should not contain \"github.com password\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 7,
                "step_name": "the output should not contain \"github.com username\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 8,
                "step_name": "the file \"../home/.config/hub\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 9,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 10,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 72,
        "test_case": "Credentials from GITHUB_TOKEN and GITHUB_USER",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/monalisa/playground.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "$GITHUB_TOKEN is \"OTOKEN\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "$GITHUB_USER is \"hubot\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub release show v1.2.0`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should not contain \"github.com password\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 7,
                "step_name": "the output should not contain \"github.com username\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 8,
                "step_name": "the file \"../home/.config/hub\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 73,
        "test_case": "Credentials from GITHUB_TOKEN and GITHUB_REPOSITORY",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/monalisa/playground.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "$GITHUB_TOKEN is \"OTOKEN\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "$GITHUB_REPOSITORY is \"mona-lisa/play-ground\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "$GITHUB_USER is \"\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `hub release show v1.2.0`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the output should not contain \"github.com password\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 8,
                "step_name": "the output should not contain \"github.com username\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 9,
                "step_name": "the file \"../home/.config/hub\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 74,
        "test_case": "Credentials from GITHUB_TOKEN override those from config file",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am \"mislav\" on github.com with OAuth token \"OTOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "$GITHUB_TOKEN is \"PTOKEN\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub clone dotfiles`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "it should clone \"https://github.com/parkr/dotfiles.git\"",
                "step_definition": "do\nstep(\"\\\"git clone #{repo}\\\" should be run\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the file \"../home/.config/hub\" should contain \"user: mislav\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 7,
                "step_name": "the file \"../home/.config/hub\" should contain \"oauth_token: OTOKEN\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 75,
        "test_case": "Wrong password",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub create` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I type \"mislav\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "I type \"WRONG\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the file \"../home/.config/hub\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 76,
        "test_case": "Two-factor authentication, create authorization",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub create` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I type \"mislav\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "I type \"kitty\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "I type \"112233\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the output should contain \"github.com password for mislav (never stored):\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 7,
                "step_name": "the output should contain \"two-factor authentication code:\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 8,
                "step_name": "the output should not contain \"warning: invalid two-factor code\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 9,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 10,
                "step_name": "the file \"../home/.config/hub\" should contain \"oauth_token: OTOKEN\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 77,
        "test_case": "Retry entering two-factor authentication code",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub create` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I type \"mislav\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "I type \"kitty\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "I type \"666\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "I type \"112233\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 7,
                "step_name": "the output should contain \"warning: invalid two-factor code\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 8,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 9,
                "step_name": "the file \"../home/.config/hub\" should contain \"oauth_token: OTOKEN\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 78,
        "test_case": "Special characters in username & password",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub create` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I type \"mislav@example.com\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "I type \"my pass@phrase ok?\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the output should contain \"github.com password for mislav@example.com (never stored):\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the file \"../home/.config/hub\" should contain \"user: mislav\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 8,
                "step_name": "the file \"../home/.config/hub\" should contain \"oauth_token: OTOKEN\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 79,
        "test_case": "Enterprise fork authentication with username & password, re-using existing authorization",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the \"origin\" remote has url \"git@git.my.org:evilchelu/dotfiles.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run `hub fork` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "I type \"mislav\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "I type \"kitty\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 7,
                "step_name": "the output should contain \"git.my.org password for mislav (never stored):\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 8,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 9,
                "step_name": "the file \"../home/.config/hub\" should contain \"git.my.org\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 10,
                "step_name": "the file \"../home/.config/hub\" should contain \"user: mislav\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 11,
                "step_name": "the file \"../home/.config/hub\" should contain \"oauth_token: OTOKEN\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 12,
                "step_name": "the url for \"mislav\" should be \"https://git.my.org/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 80,
        "test_case": "Broken config is missing user.",
        "steps": [
            {
                "step_num": 1,
                "step_name": "a file named \"../home/.config/hub\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"origin\" remote has url \"git://github.com/mislav/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub browse -u` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I type \"pcorpet\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the output should contain \"github.com username:\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the file \"../home/.config/hub\" should contain \"- user: pcorpet\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 7,
                "step_name": "the file \"../home/.config/hub\" should contain \"  oauth_token: OTOKEN\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 81,
        "test_case": "Broken config is missing user and interactive input is empty.",
        "steps": [
            {
                "step_num": 1,
                "step_name": "a file named \"../home/.config/hub\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"origin\" remote has url \"git://github.com/mislav/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub browse -u` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I type \"\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the output should contain \"github.com username:\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the output should contain \"missing user\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 7,
                "step_name": "the file \"../home/.config/hub\" should not contain \"user\"",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 82,
        "test_case": "Config file is not writeable, should exit before asking for credentials",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$HUB_CONFIG is \"/InvalidConfigFile\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub create` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the file \"../home/.config/hub\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 83,
        "test_case": "Config file is not writeable on default location, should exit before asking for credentials",
        "steps": [
            {
                "step_num": 1,
                "step_name": "a directory named \"../home/.config\" with mode \"600\"",
                "step_definition": "do\ncreate_directory(dir_name)\nchmod(dir_mode, dir_name)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub create` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output with expanded variables should contain",
                "step_definition": "do\nstep(\"#{prefix}#{postfix}\", text.gsub(/<\\$(\\w+)>/) {\n  aruba.environment.[]($1)\n})\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the file \"../home/.config/hub\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "authentication.feature",
        "test_num": 84,
        "test_case": "GitHub SSO challenge",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am \"monalisa\" on github.com with OAuth token \"OTOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am in \"git://github.com/acme/playground.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run `hub release show v1.2.0`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "bash_completion.feature",
        "test_num": 85,
        "test_case": "\"pu\" matches multiple commands including \"pull-request\"",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I type \"git pu\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "the command should not expand",
                "step_definition": "do\ntmux_wait_for_completion {\n  false\n}\nexpect(tmux_pane_contents).to(match(/^\\$ #{@last_command}$/))\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 3,
                "step_name": "I press <Tab> again",
                "step_definition": "do\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 4,
                "step_name": "the completion menu should offer \"pull pull-request push\"",
                "step_definition": "do\nmenu = tmux_completion_menu_basic\nif unsorted\n  menu.sort!\n  items = items.split(\" \").sort.join(\" \")\nend\nexpect(menu.join(\" \")).to(eq(items))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    },
    {
        "feature_file": "bash_completion.feature",
        "test_num": 86,
        "test_case": "\"ci-\" expands to \"ci-status\"",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I type \"git ci-\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "the command should expand to \"git ci-status\"",
                "step_definition": "do\ntmux_wait_for_completion\nexpect(tmux_pane_contents).to(match(/^\\$ #{cmd}$/))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    },
    {
        "feature_file": "bash_completion.feature",
        "test_num": 87,
        "test_case": "Offers pull-request flags",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I type \"git pull-request -\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "I press <Tab> again",
                "step_definition": "do\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 3,
                "step_name": "the completion menu should offer \"-F -b -f -h -i -m -a -M -l\" unsorted",
                "step_definition": "do\nmenu = tmux_completion_menu_basic\nif unsorted\n  menu.sort!\n  items = items.split(\" \").sort.join(\" \")\nend\nexpect(menu.join(\" \")).to(eq(items))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    },
    {
        "feature_file": "bash_completion.feature",
        "test_num": 88,
        "test_case": "Doesn't offer already used pull-request flags",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I type \"git pull-request -F myfile -h mybranch -\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "I press <Tab> again",
                "step_definition": "do\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 3,
                "step_name": "the completion menu should offer \"-b -f -i -m -a -M -l\" unsorted",
                "step_definition": "do\nmenu = tmux_completion_menu_basic\nif unsorted\n  menu.sort!\n  items = items.split(\" \").sort.join(\" \")\nend\nexpect(menu.join(\" \")).to(eq(items))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    },
    {
        "feature_file": "bash_completion.feature",
        "test_num": 89,
        "test_case": "Browse to issues",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I type \"git browse -- i\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "the command should expand to \"git browse -- issues\"",
                "step_definition": "do\ntmux_wait_for_completion\nexpect(tmux_pane_contents).to(match(/^\\$ #{cmd}$/))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    },
    {
        "feature_file": "bash_completion.feature",
        "test_num": 90,
        "test_case": "Browse to punch-card graph",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I type \"git browse -- graphs/p\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "the command should expand to \"git browse -- graphs/punch-card\"",
                "step_definition": "do\ntmux_wait_for_completion\nexpect(tmux_pane_contents).to(match(/^\\$ #{cmd}$/))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    },
    {
        "feature_file": "bash_completion.feature",
        "test_num": 91,
        "test_case": "Completion of fork argument",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I type \"git fork -\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "I press <Tab> again",
                "step_definition": "do\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 3,
                "step_name": "the completion menu should offer \"--no-remote --remote-name --org\" unsorted",
                "step_definition": "do\nmenu = tmux_completion_menu_basic\nif unsorted\n  menu.sort!\n  items = items.split(\" \").sort.join(\" \")\nend\nexpect(menu.join(\" \")).to(eq(items))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    },
    {
        "feature_file": "bash_completion.feature",
        "test_num": 92,
        "test_case": "Completion of user/repo in \"browse\"",
        "steps": []
    },
    {
        "feature_file": "bash_completion.feature",
        "test_num": 93,
        "test_case": "Completion of branch names in \"compare\"",
        "steps": []
    },
    {
        "feature_file": "bash_completion.feature",
        "test_num": 94,
        "test_case": "Completion of \"owner/repo:branch\" in \"pull-request -h/b\"",
        "steps": []
    },
    {
        "feature_file": "browse.feature",
        "test_num": 95,
        "test_case": "No repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"Usage: hub browse [-uc] [[<USER>/]<REPOSITORY>|--] [<SUBPAGE>]\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 96,
        "test_case": "Project with owner",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub browse mislav/dotfiles`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/mislav/dotfiles\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 97,
        "test_case": "Project without owner",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am \"mislav\" on github.com",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub browse dotfiles`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/mislav/dotfiles\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 98,
        "test_case": "Explicit project overrides current",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/josh/rails-behaviors.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am \"mislav\" on github.com",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub browse dotfiles`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"open https://github.com/mislav/dotfiles\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 99,
        "test_case": "Project issues",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub browse mislav/dotfiles issues`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"open https://github.com/mislav/dotfiles/issues\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 100,
        "test_case": "Project wiki",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub browse mislav/dotfiles wiki`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"open https://github.com/mislav/dotfiles/wiki\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 101,
        "test_case": "Project commits on master",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub browse mislav/dotfiles commits`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"open https://github.com/mislav/dotfiles/commits/master\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 102,
        "test_case": "Specific commit in project",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub browse mislav/dotfiles commit/4173c3b`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"open https://github.com/mislav/dotfiles/commit/4173c3b\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 103,
        "test_case": "Output the URL instead of browse",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub browse -u mislav/dotfiles`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should contain exactly \"https://github.com/mislav/dotfiles\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/mislav/dotfiles\" should not be run",
                "step_definition": "do\nhistory.each { |h,|\n  expect(h).to_not(include(pattern))\n}\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 104,
        "test_case": "Current project",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"open https://github.com/mislav/dotfiles\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 105,
        "test_case": "Commit in current project",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub browse -- commit/abcd1234`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/mislav/dotfiles/commit/abcd1234\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 106,
        "test_case": "Current branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git \"push.default\" is set to \"upstream\"",
                "step_definition": "do\nrun_ignored_command(\"git config #{key} \\\"#{value}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/experimental\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"open https://github.com/mislav/dotfiles/tree/experimental\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 107,
        "test_case": "Current branch pushed to fork",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/blueyed/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"mislav\" remote has url \"git@github.com:mislav/dotfiles.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"feature\" branch with upstream \"mislav/experimental\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "git \"push.default\" is set to \"upstream\"",
                "step_definition": "do\nrun_ignored_command(\"git config #{key} \\\"#{value}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"open https://github.com/mislav/dotfiles/tree/experimental\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 108,
        "test_case": "Current branch pushed to fork with simple tracking",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/blueyed/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"mislav\" remote has url \"git@github.com:mislav/dotfiles.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"feature\" branch with upstream \"mislav/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "git \"push.default\" is set to \"simple\"",
                "step_definition": "do\nrun_ignored_command(\"git config #{key} \\\"#{value}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"open https://github.com/mislav/dotfiles/tree/feature\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 109,
        "test_case": "Default branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the default branch for \"origin\" is \"develop\"",
                "step_definition": "do\ncd(\".\") {\n  ref_file = \".git/refs/remotes/#{remote}/#{branch}\"\n  unless File.exist?(ref_file)\n    unless File.exist?(\".git/refs/heads/master\")\n      empty_commit\n    end\n    FileUtils.mkdir_p(File.dirname(ref_file))\n    FileUtils.cp(\".git/refs/heads/master\", ref_file)\n  end\n}\nrun_ignored_command(\"git remote set-head #{remote} #{branch}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"develop\" branch with upstream \"origin/develop\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"open https://github.com/mislav/dotfiles\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 110,
        "test_case": "Current branch, no tracking",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"feature\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"open https://github.com/mislav/dotfiles\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 111,
        "test_case": "Default branch in upstream repo as opposed to fork",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/jashkenas/coffee-script.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"mislav\" remote has url \"git@github.com:mislav/coffee-script.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the default branch for \"origin\" is \"master\"",
                "step_definition": "do\ncd(\".\") {\n  ref_file = \".git/refs/remotes/#{remote}/#{branch}\"\n  unless File.exist?(ref_file)\n    unless File.exist?(\".git/refs/heads/master\")\n      empty_commit\n    end\n    FileUtils.mkdir_p(File.dirname(ref_file))\n    FileUtils.cp(\".git/refs/heads/master\", ref_file)\n  end\n}\nrun_ignored_command(\"git remote set-head #{remote} #{branch}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the \"master\" branch is pushed to \"mislav/master\"",
                "step_definition": "do\nfull_upstream = \".git/refs/remotes/#{upstream}\"\ncd(\".\") {\n  FileUtils.mkdir_p(File.dirname(full_upstream))\n  FileUtils.cp(\".git/refs/heads/#{name}\", full_upstream)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"open https://github.com/jashkenas/coffee-script\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 112,
        "test_case": "Current branch with special chars",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"fix-bug-#123\" branch with upstream \"origin/fix-bug-#123\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"open https://github.com/mislav/dotfiles/tree/fix-bug-%23123\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 113,
        "test_case": "Commits on current branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git \"push.default\" is set to \"upstream\"",
                "step_definition": "do\nrun_ignored_command(\"git config #{key} \\\"#{value}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/experimental\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub browse -- commits`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"open https://github.com/mislav/dotfiles/commits/experimental\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 114,
        "test_case": "Issues subpage ignores tracking configuration",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/jashkenas/coffee-script.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"mislav\" remote has url \"git@github.com:mislav/coffee-script.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "git \"push.default\" is set to \"upstream\"",
                "step_definition": "do\nrun_ignored_command(\"git config #{key} \\\"#{value}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I am on the \"feature\" branch with upstream \"mislav/experimental\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub browse -- issues`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"open https://github.com/jashkenas/coffee-script/issues\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 115,
        "test_case": "Issues subpage ignores current branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/jashkenas/coffee-script.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"mislav\" remote has url \"git@github.com:mislav/coffee-script.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"feature\" branch pushed to \"mislav/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub browse -- issues`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"open https://github.com/jashkenas/coffee-script/issues\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 116,
        "test_case": "Forward Slash Delimited branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git \"push.default\" is set to \"upstream\"",
                "step_definition": "do\nrun_ignored_command(\"git config #{key} \\\"#{value}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"foo/bar\" branch with upstream \"origin/baz/qux/moo\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"open https://github.com/mislav/dotfiles/tree/baz/qux/moo\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 117,
        "test_case": "No branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am in detached HEAD",
                "step_definition": "do\nempty_commit\nempty_commit\nrun_ignored_command(\"git checkout HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"open https://github.com/mislav/dotfiles\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 118,
        "test_case": "No branch to pulls",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am in detached HEAD",
                "step_definition": "do\nempty_commit\nempty_commit\nrun_ignored_command(\"git checkout HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub browse -- pulls`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"open https://github.com/mislav/dotfiles/pulls\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 119,
        "test_case": "Dot Delimited branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git \"push.default\" is set to \"upstream\"",
                "step_definition": "do\nrun_ignored_command(\"git config #{key} \\\"#{value}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"fix-glob-for.js\" branch with upstream \"origin/fix-glob-for.js\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"open https://github.com/mislav/dotfiles/tree/fix-glob-for.js\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 120,
        "test_case": "Wiki repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/defunkt/hub.wiki.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/defunkt/hub/wiki\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 121,
        "test_case": "Wiki commits",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/defunkt/hub.wiki.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub browse -- commits`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/defunkt/hub/wiki/_history\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 122,
        "test_case": "Wiki pages",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/defunkt/hub.wiki.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub browse -- pages`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/defunkt/hub/wiki/_pages\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 123,
        "test_case": "Repo with remote with local path",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"upstream\" remote has url \"../path/to/another/repo.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"open https://github.com/mislav/dotfiles\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 124,
        "test_case": "Enterprise repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://git.my.org/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am \"mislav\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"open https://git.my.org/mislav/dotfiles\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 125,
        "test_case": "Multiple Enterprise repos",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://git.my.org/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am \"mislav\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git.another.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"open https://git.my.org/mislav/dotfiles\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 126,
        "test_case": "Enterprise repo over HTTP",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://git.my.org/mislav/dotfiles.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am \"mislav\" on http://git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"open http://git.my.org/mislav/dotfiles\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 127,
        "test_case": "SSH alias",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the SSH config",
                "step_definition": "do\nssh_config = expand_path(\"~/.ssh/config\")\nFileUtils.mkdir_p(File.dirname(ssh_config))\nFile.open(ssh_config, \"w\") { |f,|\n  f << config_lines\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am in \"gh:singingwolfboy/sekrit.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"open https://github.com/singingwolfboy/sekrit\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "browse.feature",
        "test_num": 128,
        "test_case": "SSH GitHub alias",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the SSH config",
                "step_definition": "do\nssh_config = expand_path(\"~/.ssh/config\")\nFileUtils.mkdir_p(File.dirname(ssh_config))\nFile.open(ssh_config, \"w\") { |f,|\n  f << config_lines\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am in \"git@github.com:suan/git-sanity.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub browse`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"open https://github.com/suan/git-sanity\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "checkout.feature",
        "test_num": 129,
        "test_case": "Unchanged command",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub checkout master`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"git checkout master\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "checkout.feature",
        "test_num": 130,
        "test_case": "Checkout a pull request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub checkout -f https://github.com/mojombo/jekyll/pull/77 -q`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch origin refs/pull/77/head:fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git checkout -f fixes -q\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"fixes\" should merge \"refs/pull/77/head\" from remote \"origin\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all branch.#{name}.remote\")\nexpect(output).to(include(remote))\noutput = run_ignored_command(\"git config --get-all branch.#{name}.merge\")\nexpect(output).to(include(merge))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "checkout.feature",
        "test_num": 131,
        "test_case": "Avoid overriding existing merge configuration",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `git config branch.fixes.remote ORIG_REMOTE`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `git config branch.fixes.merge custom/ref/spec`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub checkout https://github.com/mojombo/jekyll/pull/77`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"git fetch origin refs/pull/77/head:fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"git checkout fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 7,
                "step_name": "\"fixes\" should merge \"custom/ref/spec\" from remote \"ORIG_REMOTE\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all branch.#{name}.remote\")\nexpect(output).to(include(remote))\noutput = run_ignored_command(\"git config --get-all branch.#{name}.merge\")\nexpect(output).to(include(merge))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "checkout.feature",
        "test_num": 132,
        "test_case": "Head ref matches default branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub checkout https://github.com/mojombo/jekyll/pull/77`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch origin refs/pull/77/head:mislav-master\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git checkout mislav-master\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"mislav-master\" should merge \"refs/pull/77/head\" from remote \"origin\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all branch.#{name}.remote\")\nexpect(output).to(include(remote))\noutput = run_ignored_command(\"git config --get-all branch.#{name}.merge\")\nexpect(output).to(include(merge))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "checkout.feature",
        "test_num": 133,
        "test_case": "No matching remotes for pull request base",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub checkout -f https://github.com/mislav/jekyll/pull/77 -q`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "checkout.feature",
        "test_num": 134,
        "test_case": "Custom name for new branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub checkout https://github.com/mojombo/jekyll/pull/77 fixes-from-mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch origin refs/pull/77/head:fixes-from-mislav\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git checkout fixes-from-mislav\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"fixes-from-mislav\" should merge \"refs/pull/77/head\" from remote \"origin\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all branch.#{name}.remote\")\nexpect(output).to(include(remote))\noutput = run_ignored_command(\"git config --get-all branch.#{name}.merge\")\nexpect(output).to(include(merge))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "checkout.feature",
        "test_num": 135,
        "test_case": "Same-repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub checkout -f https://github.com/mojombo/jekyll/pull/77 -q`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch origin +refs/heads/fixes:refs/remotes/origin/fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git checkout -f -b fixes --no-track origin/fixes -q\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"fixes\" should merge \"refs/heads/fixes\" from remote \"origin\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all branch.#{name}.remote\")\nexpect(output).to(include(remote))\noutput = run_ignored_command(\"git config --get-all branch.#{name}.merge\")\nexpect(output).to(include(merge))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "checkout.feature",
        "test_num": 136,
        "test_case": "Same-repo with custom branch name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub checkout https://github.com/mojombo/jekyll/pull/77 mycustombranch`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch origin +refs/heads/fixes:refs/remotes/origin/fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git checkout -b mycustombranch --no-track origin/fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"mycustombranch\" should merge \"refs/heads/fixes\" from remote \"origin\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all branch.#{name}.remote\")\nexpect(output).to(include(remote))\noutput = run_ignored_command(\"git config --get-all branch.#{name}.merge\")\nexpect(output).to(include(merge))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "checkout.feature",
        "test_num": 137,
        "test_case": "Unavailable fork",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub checkout https://github.com/mojombo/jekyll/pull/77`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch origin refs/pull/77/head:fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git checkout fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"fixes\" should merge \"refs/pull/77/head\" from remote \"origin\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all branch.#{name}.remote\")\nexpect(output).to(include(remote))\noutput = run_ignored_command(\"git config --get-all branch.#{name}.merge\")\nexpect(output).to(include(merge))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "checkout.feature",
        "test_num": 138,
        "test_case": "Reuse existing remote for head branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"mislav\" remote has url \"git://github.com/mislav/jekyll.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub checkout -f https://github.com/mojombo/jekyll/pull/77 -q`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git fetch mislav +refs/heads/fixes:refs/remotes/mislav/fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"git checkout -f -b fixes --no-track mislav/fixes -q\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"fixes\" should merge \"refs/heads/fixes\" from remote \"mislav\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all branch.#{name}.remote\")\nexpect(output).to(include(remote))\noutput = run_ignored_command(\"git config --get-all branch.#{name}.merge\")\nexpect(output).to(include(merge))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "checkout.feature",
        "test_num": 139,
        "test_case": "Reuse existing remote and branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"mislav\" remote has url \"git://github.com/mislav/jekyll.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"fixes\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub checkout -f https://github.com/mojombo/jekyll/pull/77 -q`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"git fetch mislav +refs/heads/fixes:refs/remotes/mislav/fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"git checkout -f fixes -q\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 7,
                "step_name": "\"git merge --ff-only refs/remotes/mislav/fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "checkout.feature",
        "test_num": 140,
        "test_case": "Modifiable fork",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub checkout -f https://github.com/mojombo/jekyll/pull/77 -q`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git fetch origin refs/pull/77/head:fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"git checkout -f fixes -q\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"fixes\" should merge \"refs/heads/fixes\" from remote \"git@github.com:mislav/jekyll.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all branch.#{name}.remote\")\nexpect(output).to(include(remote))\noutput = run_ignored_command(\"git config --get-all branch.#{name}.merge\")\nexpect(output).to(include(merge))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "checkout.feature",
        "test_num": 141,
        "test_case": "Modifiable fork into current branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"fixes\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "there is a git FETCH_HEAD",
                "step_definition": "do\nempty_commit\nempty_commit\ncd(\".\") {\n  File.open(\".git/FETCH_HEAD\", \"w\") { |fetch_head,|\n    fetch_head.puts(\"%s\\t\\t'refs/heads/made-up' of git://github.com/made/up.git\" % `git rev-parse HEAD`.chomp)\n  }\n}\nrun_ignored_command(\"git reset --quiet --hard HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub checkout https://github.com/mojombo/jekyll/pull/77`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"git fetch origin refs/pull/77/head\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 7,
                "step_name": "\"git checkout fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 8,
                "step_name": "\"git merge --ff-only FETCH_HEAD\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 9,
                "step_name": "\"fixes\" should merge \"refs/heads/fixes\" from remote \"git@github.com:mislav/jekyll.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all branch.#{name}.remote\")\nexpect(output).to(include(remote))\noutput = run_ignored_command(\"git config --get-all branch.#{name}.merge\")\nexpect(output).to(include(merge))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "checkout.feature",
        "test_num": 142,
        "test_case": "Modifiable fork with HTTPS",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub checkout -f https://github.com/mojombo/jekyll/pull/77 -q`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch origin refs/pull/77/head:fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git checkout -f fixes -q\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"fixes\" should merge \"refs/heads/fixes\" from remote \"https://github.com/mislav/jekyll.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all branch.#{name}.remote\")\nexpect(output).to(include(remote))\noutput = run_ignored_command(\"git config --get-all branch.#{name}.merge\")\nexpect(output).to(include(merge))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "cherry_pick.feature",
        "test_num": 143,
        "test_case": "Unchanged",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub cherry-pick a319d88`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "cherry_pick.feature",
        "test_num": 144,
        "test_case": "From GitHub commit URL",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub cherry-pick https://github.com/rtomayko/ronn/commit/a319d88#comments`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"git fetch -q --no-tags origin\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git cherry-pick a319d88\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "cherry_pick.feature",
        "test_num": 145,
        "test_case": "From GitHub pull request URL",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub cherry-pick https://github.com/blueyed/ronn/pull/560/commits/a319d88`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"git fetch -q --no-tags origin refs/pull/560/head\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git cherry-pick a319d88\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "cherry_pick.feature",
        "test_num": 146,
        "test_case": "From fork that has existing remote",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"mislav\" remote has url \"git@github.com:mislav/ronn.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub cherry-pick https://github.com/mislav/ronn/commit/a319d88`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch -q --no-tags mislav\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git cherry-pick a319d88\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "cherry_pick.feature",
        "test_num": 147,
        "test_case": "Using GitHub owner@SHA notation",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"mislav\" remote has url \"git@github.com:mislav/ronn.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub cherry-pick mislav@a319d88`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch -q --no-tags mislav\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git cherry-pick a319d88\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "cherry_pick.feature",
        "test_num": 148,
        "test_case": "Using GitHub owner@SHA notation that is too short",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub cherry-pick mislav@a319`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "cherry_pick.feature",
        "test_num": 149,
        "test_case": "Unsupported GitHub owner/repo@SHA notation",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub cherry-pick mislav/ronn@a319d88`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "cherry_pick.feature",
        "test_num": 150,
        "test_case": "Skips processing if `-m/--mainline` is specified",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub cherry-pick -m 42 mislav@a319d88`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub cherry-pick --mainline 42 mislav@a319d88`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "cherry_pick.feature",
        "test_num": 151,
        "test_case": "Using GitHub owner@SHA notation with remote add",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub cherry-pick mislav@a319d88`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"git remote add _hub-cherry-pick https://github.com/mislav/ronn.git\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch -q --no-tags _hub-cherry-pick\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git remote rm _hub-cherry-pick\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"git cherry-pick a319d88\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "cherry_pick.feature",
        "test_num": 152,
        "test_case": "From fork that doesn't have a remote",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub cherry-pick https://github.com/jingweno/ronn/commit/a319d88`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"git remote add _hub-cherry-pick https://github.com/jingweno/ronn.git\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch -q --no-tags _hub-cherry-pick\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git remote rm _hub-cherry-pick\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"git cherry-pick a319d88\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "ci_status.feature",
        "test_num": 153,
        "test_case": "Fetch commit SHA",
        "steps": [
            {
                "step_num": 1,
                "step_name": "there is a commit named \"the_sha\"",
                "step_definition": "do\nempty_commit\nempty_commit\nrun_ignored_command(\"git tag #{name}\")\nrun_ignored_command(\"git reset --quiet --hard HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the remote commit state of \"michiels/pencilbox\" \"the_sha\" is \"success\"",
                "step_definition": "do\nstep(\"the remote commit states of \\\"#{proj}\\\" \\\"#{ref}\\\" are:\", <<-HEREDOC)\n    { :state => \"#{status}\",\n      :statuses => [\n        { :state => \"#{status}\",\n          :context => \"continuous-integration/travis-ci/push\",\n          :target_url => 'https://travis-ci.org/#{proj}/builds/1234567' }\n      ]\n    }\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub ci-status the_sha`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"success\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "ci_status.feature",
        "test_num": 154,
        "test_case": "Fetch commit SHA with URL",
        "steps": [
            {
                "step_num": 1,
                "step_name": "there is a commit named \"the_sha\"",
                "step_definition": "do\nempty_commit\nempty_commit\nrun_ignored_command(\"git tag #{name}\")\nrun_ignored_command(\"git reset --quiet --hard HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the remote commit state of \"michiels/pencilbox\" \"the_sha\" is \"success\"",
                "step_definition": "do\nstep(\"the remote commit states of \\\"#{proj}\\\" \\\"#{ref}\\\" are:\", <<-HEREDOC)\n    { :state => \"#{status}\",\n      :statuses => [\n        { :state => \"#{status}\",\n          :context => \"continuous-integration/travis-ci/push\",\n          :target_url => 'https://travis-ci.org/#{proj}/builds/1234567' }\n      ]\n    }\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub ci-status the_sha -v`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "ci_status.feature",
        "test_num": 155,
        "test_case": "Multiple statuses with verbose output",
        "steps": [
            {
                "step_num": 1,
                "step_name": "there is a commit named \"the_sha\"",
                "step_definition": "do\nempty_commit\nempty_commit\nrun_ignored_command(\"git tag #{name}\")\nrun_ignored_command(\"git reset --quiet --hard HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the remote commit states of \"michiels/pencilbox\" \"the_sha\" are",
                "step_definition": "do\nif ref == \"HEAD\"\n  empty_commit\nend\noutput = run_ignored_command(\"git rev-parse #{ref}\")\nrev = output.chomp\n(host, owner, repo) = proj.split(\"/\", 3)\nif repo.nil?\n  repo = owner\n  owner = host\n  host = nil\nend\nstatus_endpoint = <<-HEREDOC\n    get('#{if host\n  \"/api/v3\"\nend}/repos/#{owner}/#{repo}/commits/#{rev}/status'#{if host\n  \", :host_name => '#{host}'\"\nend}) {\n      json(#{json_value})\n    }\n    get('#{if host\n  \"/api/v3\"\nend}/repos/#{owner}/#{repo}/commits/#{rev}/check-runs'#{if host\n  \", :host_name => '#{host}'\"\nend}) {\n      status 422\n    }\nHEREDOC\nstep(\"the GitHub API server:\", status_endpoint)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub ci-status -v the_sha`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "ci_status.feature",
        "test_num": 156,
        "test_case": "Multiple statuses with format string",
        "steps": [
            {
                "step_num": 1,
                "step_name": "there is a commit named \"the_sha\"",
                "step_definition": "do\nempty_commit\nempty_commit\nrun_ignored_command(\"git tag #{name}\")\nrun_ignored_command(\"git reset --quiet --hard HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the remote commit states of \"michiels/pencilbox\" \"the_sha\" are",
                "step_definition": "do\nif ref == \"HEAD\"\n  empty_commit\nend\noutput = run_ignored_command(\"git rev-parse #{ref}\")\nrev = output.chomp\n(host, owner, repo) = proj.split(\"/\", 3)\nif repo.nil?\n  repo = owner\n  owner = host\n  host = nil\nend\nstatus_endpoint = <<-HEREDOC\n    get('#{if host\n  \"/api/v3\"\nend}/repos/#{owner}/#{repo}/commits/#{rev}/status'#{if host\n  \", :host_name => '#{host}'\"\nend}) {\n      json(#{json_value})\n    }\n    get('#{if host\n  \"/api/v3\"\nend}/repos/#{owner}/#{repo}/commits/#{rev}/check-runs'#{if host\n  \", :host_name => '#{host}'\"\nend}) {\n      status 422\n    }\nHEREDOC\nstep(\"the GitHub API server:\", status_endpoint)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub ci-status the_sha --format '%S: %t (%U)%n'`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "ci_status.feature",
        "test_num": 157,
        "test_case": "Exit status 1 for 'error' and 'failure'",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the remote commit state of \"michiels/pencilbox\" \"HEAD\" is \"error\"",
                "step_definition": "do\nstep(\"the remote commit states of \\\"#{proj}\\\" \\\"#{ref}\\\" are:\", <<-HEREDOC)\n    { :state => \"#{status}\",\n      :statuses => [\n        { :state => \"#{status}\",\n          :context => \"continuous-integration/travis-ci/push\",\n          :target_url => 'https://travis-ci.org/#{proj}/builds/1234567' }\n      ]\n    }\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub ci-status`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"error\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "ci_status.feature",
        "test_num": 158,
        "test_case": "Use HEAD when no sha given",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the remote commit state of \"michiels/pencilbox\" \"HEAD\" is \"pending\"",
                "step_definition": "do\nstep(\"the remote commit states of \\\"#{proj}\\\" \\\"#{ref}\\\" are:\", <<-HEREDOC)\n    { :state => \"#{status}\",\n      :statuses => [\n        { :state => \"#{status}\",\n          :context => \"continuous-integration/travis-ci/push\",\n          :target_url => 'https://travis-ci.org/#{proj}/builds/1234567' }\n      ]\n    }\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub ci-status`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 2",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"pending\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "ci_status.feature",
        "test_num": 159,
        "test_case": "Exit status 3 for no statuses available",
        "steps": [
            {
                "step_num": 1,
                "step_name": "there is a commit named \"the_sha\"",
                "step_definition": "do\nempty_commit\nempty_commit\nrun_ignored_command(\"git tag #{name}\")\nrun_ignored_command(\"git reset --quiet --hard HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the remote commit state of \"michiels/pencilbox\" \"the_sha\" is nil",
                "step_definition": "do\nstep(\"the remote commit states of \\\"#{proj}\\\" \\\"#{ref}\\\" are:\", \"{ :state => \\\"pending\\\", :statuses => [] }\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub ci-status the_sha`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"no status\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the exit status should be 3",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "ci_status.feature",
        "test_num": 160,
        "test_case": "Exit status 3 for no statuses available without URL",
        "steps": [
            {
                "step_num": 1,
                "step_name": "there is a commit named \"the_sha\"",
                "step_definition": "do\nempty_commit\nempty_commit\nrun_ignored_command(\"git tag #{name}\")\nrun_ignored_command(\"git reset --quiet --hard HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the remote commit state of \"michiels/pencilbox\" \"the_sha\" is nil",
                "step_definition": "do\nstep(\"the remote commit states of \\\"#{proj}\\\" \\\"#{ref}\\\" are:\", \"{ :state => \\\"pending\\\", :statuses => [] }\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub ci-status -v the_sha`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"no status\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the exit status should be 3",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "ci_status.feature",
        "test_num": 161,
        "test_case": "Abort with message when invalid ref given",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub ci-status this-is-an-invalid-ref`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"Aborted: no revision could be determined from 'this-is-an-invalid-ref'\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "ci_status.feature",
        "test_num": 162,
        "test_case": "Non-GitHub repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"mygh:Manganeez/repo.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub ci-status`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "ci_status.feature",
        "test_num": 163,
        "test_case": "Enterprise CI statuses",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"git@git.my.org:michiels/pencilbox.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am \"michiels\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "there is a commit named \"the_sha\"",
                "step_definition": "do\nempty_commit\nempty_commit\nrun_ignored_command(\"git tag #{name}\")\nrun_ignored_command(\"git reset --quiet --hard HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the remote commit state of \"git.my.org/michiels/pencilbox\" \"the_sha\" is \"success\"",
                "step_definition": "do\nstep(\"the remote commit states of \\\"#{proj}\\\" \\\"#{ref}\\\" are:\", <<-HEREDOC)\n    { :state => \"#{status}\",\n      :statuses => [\n        { :state => \"#{status}\",\n          :context => \"continuous-integration/travis-ci/push\",\n          :target_url => 'https://travis-ci.org/#{proj}/builds/1234567' }\n      ]\n    }\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `hub ci-status the_sha`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the output should contain exactly \"success\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "ci_status.feature",
        "test_num": 164,
        "test_case": "If alias named ci-status exists, it should not be expanded.",
        "steps": [
            {
                "step_num": 1,
                "step_name": "there is a commit named \"the_sha\"",
                "step_definition": "do\nempty_commit\nempty_commit\nrun_ignored_command(\"git tag #{name}\")\nrun_ignored_command(\"git reset --quiet --hard HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the remote commit state of \"michiels/pencilbox\" \"the_sha\" is \"success\"",
                "step_definition": "do\nstep(\"the remote commit states of \\\"#{proj}\\\" \\\"#{ref}\\\" are:\", <<-HEREDOC)\n    { :state => \"#{status}\",\n      :statuses => [\n        { :state => \"#{status}\",\n          :context => \"continuous-integration/travis-ci/push\",\n          :target_url => 'https://travis-ci.org/#{proj}/builds/1234567' }\n      ]\n    }\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `git config --global alias.ci-status \"ci-status -v\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub ci-status the_sha`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly \"success\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "ci_status.feature",
        "test_num": 165,
        "test_case": "Has Checks",
        "steps": [
            {
                "step_num": 1,
                "step_name": "there is a commit named \"the_sha\"",
                "step_definition": "do\nempty_commit\nempty_commit\nrun_ignored_command(\"git tag #{name}\")\nrun_ignored_command(\"git reset --quiet --hard HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub ci-status the_sha`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"action_required\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "ci_status.feature",
        "test_num": 166,
        "test_case": "Older Enterprise version doesn't have Checks",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"git@git.my.org:michiels/pencilbox.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am \"michiels\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "there is a commit named \"the_sha\"",
                "step_definition": "do\nempty_commit\nempty_commit\nrun_ignored_command(\"git tag #{name}\")\nrun_ignored_command(\"git reset --quiet --hard HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `hub ci-status the_sha`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the output should contain exactly \"success\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 167,
        "test_case": "Clone a public repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub clone rtomayko/ronn`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "it should clone \"https://github.com/rtomayko/ronn.git\"",
                "step_definition": "do\nstep(\"\\\"git clone #{repo}\\\" should be run\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 168,
        "test_case": "Clone a public repo with period in name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub clone hookio/hook.js`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "it should clone \"https://github.com/hookio/hook.js.git\"",
                "step_definition": "do\nstep(\"\\\"git clone #{repo}\\\" should be run\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 169,
        "test_case": "Clone a public repo that starts with a period",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub clone zhuangya/.vim`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "it should clone \"https://github.com/zhuangya/.vim.git\"",
                "step_definition": "do\nstep(\"\\\"git clone #{repo}\\\" should be run\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 170,
        "test_case": "Clone a repo even if same-named directory exists",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "a directory named \"rtomayko/ronn\"",
                "step_definition": "do\ncreate_directory(dir_name)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub clone rtomayko/ronn`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "it should clone \"https://github.com/rtomayko/ronn.git\"",
                "step_definition": "do\nstep(\"\\\"git clone #{repo}\\\" should be run\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 171,
        "test_case": "Clone a public repo with git",
        "steps": [
            {
                "step_num": 1,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub clone rtomayko/ronn`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "it should clone \"git://github.com/rtomayko/ronn.git\"",
                "step_definition": "do\nstep(\"\\\"git clone #{repo}\\\" should be run\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 172,
        "test_case": "Clone a public repo with HTTPS",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub clone rtomayko/ronn`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "it should clone \"https://github.com/rtomayko/ronn.git\"",
                "step_definition": "do\nstep(\"\\\"git clone #{repo}\\\" should be run\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 173,
        "test_case": "Clone command aliased",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `git config --global alias.c \"clone --bare\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub c rtomayko/ronn`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git clone --bare https://github.com/rtomayko/ronn.git\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 174,
        "test_case": "Unchanged public clone",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub clone git://github.com/rtomayko/ronn.git`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 175,
        "test_case": "Unchanged public clone with path",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub clone git://github.com/rtomayko/ronn.git ronnie`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 176,
        "test_case": "Unchanged private clone",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub clone git@github.com:rtomayko/ronn.git`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 177,
        "test_case": "Unchanged clone with complex arguments",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub clone --template=one/two git://github.com/defunkt/resque.git --origin master resquetastic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 178,
        "test_case": "Unchanged local clone",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub clone ./dotfiles`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 179,
        "test_case": "Unchanged local clone with destination",
        "steps": [
            {
                "step_num": 1,
                "step_name": "a directory named \".git\"",
                "step_definition": "do\ncreate_directory(dir_name)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub clone -l . ../copy`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 180,
        "test_case": "Unchanged local clone from bare repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "a bare git repo in \"rtomayko/ronn\"",
                "step_definition": "do\nrun_ignored_command(\"git -c init.defaultBranch=master init --quiet #{if bare\n  \"--bare\"\nend} '#{dir_name}'\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub clone rtomayko/ronn`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 181,
        "test_case": "Unchanged clone with host alias",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub clone shortcut:git/repo.git`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 182,
        "test_case": "Preview cloning a private repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub --noop clone rtomayko/ronn`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"git clone https://github.com/rtomayko/ronn.git\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "it should not clone anything",
                "step_definition": "do\nhistory.each { |h,|\n  expect(h).to_not(match(/^git clone/))\n}\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 183,
        "test_case": "Clone a private repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub clone -p rtomayko/ronn`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "it should clone \"https://github.com/rtomayko/ronn.git\"",
                "step_definition": "do\nstep(\"\\\"git clone #{repo}\\\" should be run\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 184,
        "test_case": "Clone my repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub clone dotfiles`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "it should clone \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\nstep(\"\\\"git clone #{repo}\\\" should be run\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 185,
        "test_case": "Clone my repo that doesn't exist",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub clone dotfiles`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stdout should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly \"Error: repository mislav/dotfiles doesn't exist\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "it should not clone anything",
                "step_definition": "do\nhistory.each { |h,|\n  expect(h).to_not(match(/^git clone/))\n}\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 186,
        "test_case": "Clone my repo with arguments",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub clone --bare -o master dotfiles`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git clone --bare -o master https://github.com/mislav/dotfiles.git\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 187,
        "test_case": "Clone repo to which I have push access to",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub clone sstephenson/rbenv`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git clone git@github.com:sstephenson/rbenv.git\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 188,
        "test_case": "Preview cloning a repo I have push access to",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub --noop clone sstephenson/rbenv`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"git clone git@github.com:sstephenson/rbenv.git\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "it should not clone anything",
                "step_definition": "do\nhistory.each { |h,|\n  expect(h).to_not(match(/^git clone/))\n}\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 189,
        "test_case": "Clone my Enterprise repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am \"mifi\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "$GITHUB_HOST is \"git.my.org\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub clone myorg/myrepo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "it should clone \"https://git.my.org/myorg/myrepo.git\"",
                "step_definition": "do\nstep(\"\\\"git clone #{repo}\\\" should be run\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 190,
        "test_case": "Clone from existing directory is a local clone",
        "steps": [
            {
                "step_num": 1,
                "step_name": "a directory named \"dotfiles/.git\"",
                "step_definition": "do\ncreate_directory(dir_name)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub clone dotfiles`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 191,
        "test_case": "Clone from git bundle is a local clone",
        "steps": [
            {
                "step_num": 1,
                "step_name": "a git bundle named \"my-bundle\"",
                "step_definition": "do\ndest = expand_path(file)\nFileUtils.mkdir_p(File.dirname(dest))\nDir.mktmpdir { |tmpdir,|\n  Dir.chdir(tmpdir) {\n    `git -c init.defaultBranch=master init --quiet`\n    `GIT_COMMITTER_NAME=a GIT_COMMITTER_EMAIL=b git commit --quiet -m 'empty' --allow-empty --author='a <b>'`\n    `git bundle create \"#{dest}\" master 2>&1`\n  }\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub clone my-bundle`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 192,
        "test_case": "Clone a wiki",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub clone rtomayko/ronn.wiki`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "it should clone \"https://github.com/RTomayko/ronin.wiki.git\"",
                "step_definition": "do\nstep(\"\\\"git clone #{repo}\\\" should be run\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 193,
        "test_case": "Clone a nonexisting wiki",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub clone rtomayko/ronn.wiki`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stdout should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly \"Error: RTomayko/ronin doesn't have a wiki\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "it should not clone anything",
                "step_definition": "do\nhistory.each { |h,|\n  expect(h).to_not(match(/^git clone/))\n}\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "clone.feature",
        "test_num": 194,
        "test_case": "Clone a redirected repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub clone rtomayko/ronn`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "it should clone \"https://github.com/RTomayko/ronin.git\"",
                "step_definition": "do\nstep(\"\\\"git clone #{repo}\\\" should be run\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 195,
        "test_case": "Compare branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub compare refactor`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/refactor\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 196,
        "test_case": "Compare complex branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub compare feature/foo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/feature/foo\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 197,
        "test_case": "Compare branch with funky characters",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub compare 'my#branch!with.special+chars'`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/my%23branch!with.special%2Bchars\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 198,
        "test_case": "No args, no upstream",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub compare`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain exactly \"the current branch 'master' doesn't seem pushed to a remote\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 199,
        "test_case": "Can't compare default branch to self",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the default branch for \"origin\" is \"develop\"",
                "step_definition": "do\ncd(\".\") {\n  ref_file = \".git/refs/remotes/#{remote}/#{branch}\"\n  unless File.exist?(ref_file)\n    unless File.exist?(\".git/refs/heads/master\")\n      empty_commit\n    end\n    FileUtils.mkdir_p(File.dirname(ref_file))\n    FileUtils.cp(\".git/refs/heads/master\", ref_file)\n  end\n}\nrun_ignored_command(\"git remote set-head #{remote} #{branch}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"develop\" branch with upstream \"origin/develop\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub compare`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly \"the branch to compare 'develop' is the default branch\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 200,
        "test_case": "No args, has upstream branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/experimental\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git \"push.default\" is set to \"upstream\"",
                "step_definition": "do\nrun_ignored_command(\"git config #{key} \\\"#{value}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub compare`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/experimental\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 201,
        "test_case": "Current branch has funky characters",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/my#branch!with.special+chars\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git \"push.default\" is set to \"upstream\"",
                "step_definition": "do\nrun_ignored_command(\"git config #{key} \\\"#{value}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub compare`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/my%23branch!with.special%2Bchars\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 202,
        "test_case": "Current branch pushed to fork",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am \"monalisa\" on github.com with OAuth token \"MONATOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"monalisa\" remote has url \"git@github.com:monalisa/dotfiles.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"topic\" branch pushed to \"monalisa/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub compare`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/monalisa:topic\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 203,
        "test_case": "Current branch with full URL in upstream configuration",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"local-topic\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `git config branch.local-topic.remote https://github.com/monalisa/dotfiles.git`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `git config branch.local-topic.merge refs/remotes/remote-topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub compare`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/monalisa:remote-topic\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 204,
        "test_case": "Compare range",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub compare 1.0...fix`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/1.0...fix\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 205,
        "test_case": "Output URL without opening the browser",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub compare -u 1.0...fix`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/1.0...fix\" should not be run",
                "step_definition": "do\nhistory.each { |h,|\n  expect(h).to_not(include(pattern))\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stdout should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 206,
        "test_case": "Compare base in branch that is not master",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/experimental\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git \"push.default\" is set to \"upstream\"",
                "step_definition": "do\nrun_ignored_command(\"git config #{key} \\\"#{value}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub compare -b master`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/master...experimental\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 207,
        "test_case": "Compare base in master branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"master\" branch with upstream \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git \"push.default\" is set to \"upstream\"",
                "step_definition": "do\nrun_ignored_command(\"git config #{key} \\\"#{value}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub compare -b experimental`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/experimental...master\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 208,
        "test_case": "Compare base with same branch as the current branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/experimental\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git \"push.default\" is set to \"upstream\"",
                "step_definition": "do\nrun_ignored_command(\"git config #{key} \\\"#{value}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub compare -b experimental`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/experimental...experimental\" should not be run",
                "step_definition": "do\nhistory.each { |h,|\n  expect(h).to_not(include(pattern))\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the stderr should contain exactly \"the branch to compare 'experimental' is the same as --base\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 209,
        "test_case": "Compare base with parameters",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"master\" branch with upstream \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub compare -b master experimental..master`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/experimental...master\" should not be run",
                "step_definition": "do\nhistory.each { |h,|\n  expect(h).to_not(include(pattern))\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain \"Usage: hub compare\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 210,
        "test_case": "Compare 2-dots range for tags",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub compare 1.0..fix`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/1.0...fix\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 211,
        "test_case": "Compare 2-dots range for SHAs",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub compare 1234abc..3456cde`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/1234abc...3456cde\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 212,
        "test_case": "Compare 2-dots range with \"user:repo\" notation",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub compare henrahmagix:master..2b10927`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/henrahmagix:master...2b10927\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 213,
        "test_case": "Compare 2-dots range with slashes in branch names",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub compare one/foo..two/bar/baz`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/one/foo...two/bar/baz\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 214,
        "test_case": "Complex range is unchanged",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub compare @{a..b}..@{c..d}`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/@{a..b}..@{c..d}\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 215,
        "test_case": "Compare wiki",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"git://github.com/mislav/dotfiles.wiki.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub compare 1.0..fix`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"open https://github.com/mislav/dotfiles/wiki/_compare/1.0...fix\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 216,
        "test_case": "Compare fork",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub compare anotheruser feature`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/anotheruser/dotfiles/compare/feature\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 217,
        "test_case": "Enterprise repo over HTTP",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"git://git.my.org/mislav/dotfiles.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am \"mislav\" on http://git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub compare refactor`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"open http://git.my.org/mislav/dotfiles/compare/refactor\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 218,
        "test_case": "Enterprise repo with explicit upstream project",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"git://git.my.org/mislav/dotfiles.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am \"mislav\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub compare fehmicansaglam a..b`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"open https://git.my.org/fehmicansaglam/dotfiles/compare/a...b\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 219,
        "test_case": "Compare in non-GitHub repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"git@bitbucket.org:mislav/dotfiles.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"feature\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub compare`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stdout should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "compare.feature",
        "test_num": 220,
        "test_case": "Comparing two branches while not on a local branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in detached HEAD",
                "step_definition": "do\nempty_commit\nempty_commit\nrun_ignored_command(\"git checkout HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub compare refactor...master`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"open https://github.com/mislav/dotfiles/compare/refactor...master\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 221,
        "test_case": "Create repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"origin\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"https://github.com/mislav/dotfiles\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 222,
        "test_case": "Create private repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub create -p`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the url for \"origin\" should be \"git@github.com:mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 223,
        "test_case": "Alternate origin remote name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub create --remote-name=work`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"work\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "there should be no \"origin\" remote",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nexpect(remotes.split(\"\\n\")).to_not(include(remote_name))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 224,
        "test_case": "Create in organization",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub create acme/dotfiles`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"origin\" should be \"https://github.com/acme/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"https://github.com/acme/dotfiles\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 225,
        "test_case": "Creating repo failed",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain \"Error creating repository: Internal Server Error (HTTP 500)\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "there should be no \"origin\" remote",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nexpect(remotes.split(\"\\n\")).to_not(include(remote_name))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 226,
        "test_case": "With custom name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub create myconfig`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"origin\" should be \"https://github.com/mislav/myconfig.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 227,
        "test_case": "With description and homepage",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub create -d mydesc -h http://example.com`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"origin\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 228,
        "test_case": "Not in git repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the current dir is not a repo",
                "step_definition": "do\nFileUtils.rm_rf(expand_path(\".git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain \"'create' must be run from inside a git repository\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 229,
        "test_case": "Cannot create from bare repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the current dir is not a repo",
                "step_definition": "do\nFileUtils.rm_rf(expand_path(\".git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `git -c init.defaultBranch=main init --bare`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly \"unable to determine git working directory\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 230,
        "test_case": "Origin remote already exists",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"origin\" remote has url \"git://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the url for \"origin\" should be \"git://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly \"https://github.com/mislav/dotfiles\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 231,
        "test_case": "Unrelated origin remote already exists",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"origin\" remote has url \"git://example.com/unrelated.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the url for \"origin\" should be \"git://example.com/unrelated.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stdout should contain exactly \"https://github.com/mislav/dotfiles\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 232,
        "test_case": "Another remote already exists",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"github\" remote has url \"git://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the url for \"origin\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 233,
        "test_case": "GitHub repo already exists",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain \"Existing repository detected\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the url for \"origin\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 234,
        "test_case": "GitHub repo already exists and is not private",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub create -p`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain \"Repository 'mislav/dotfiles' already exists and is public\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "there should be no \"origin\" remote",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nexpect(remotes.split(\"\\n\")).to_not(include(remote_name))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 235,
        "test_case": "GitHub repo already exists and is private",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub create -p`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the url for \"origin\" should be \"git@github.com:mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 236,
        "test_case": "Renamed GitHub repo already exists",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"origin\" should be \"https://github.com/mislav/DOTfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 237,
        "test_case": "Renamed GitHub repo is unrelated",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"origin\" should be \"https://github.com/mislav/mydotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 238,
        "test_case": "API response changes the clone URL",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"origin\" should be \"https://github.com/Mooslav/myconfig.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"https://github.com/Mooslav/myconfig\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 239,
        "test_case": "Open new repository in web browser",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub create -o`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "\"open https://github.com/Mooslav/myconfig\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 240,
        "test_case": "Current directory contains spaces",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"my dot files\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the url for \"origin\" should be \"https://github.com/mislav/my-dot-files.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 241,
        "test_case": "Verbose API output",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "$HUB_VERBOSE is \"on\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain",
                "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
                "step_definition_file": "features/lib/step_definitions/command_line_steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain",
                "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
                "step_definition_file": "features/lib/step_definitions/command_line_steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the stderr should contain",
                "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
                "step_definition_file": "features/lib/step_definitions/command_line_steps.rb"
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 242,
        "test_case": "Create Enterprise repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am \"nsartor\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "$GITHUB_HOST is \"git.my.org\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the url for \"origin\" should be \"https://git.my.org/nsartor/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should contain exactly \"https://git.my.org/nsartor/dotfiles\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "create.feature",
        "test_num": 243,
        "test_case": "Invalid GITHUB_HOST",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am \"nsartor\" on {} with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "$GITHUB_HOST is \"{}\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "delete.feature",
        "test_num": 244,
        "test_case": "No argument in current repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/github/hub.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub delete`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "delete.feature",
        "test_num": 245,
        "test_case": "Successful confirmation",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub delete my-repo` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I type \"yes\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the output should contain",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "delete.feature",
        "test_num": 246,
        "test_case": "Org repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub delete our-org/my-repo` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I type \"yes\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the output should contain",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "delete.feature",
        "test_num": 247,
        "test_case": "Invalid confirmation",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub delete my-repo` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "I type \"y\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "delete.feature",
        "test_num": 248,
        "test_case": "HTTP 403",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub delete -y my-repo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain",
                "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
                "step_definition_file": "features/lib/step_definitions/command_line_steps.rb"
            }
        ]
    },
    {
        "feature_file": "delete.feature",
        "test_num": 249,
        "test_case": "HTTP 403 on GitHub Enterprise",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am \"mislav\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "$GITHUB_HOST is \"git.my.org\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run `hub delete -y my-repo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the stderr should contain",
                "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
                "step_definition_file": "features/lib/step_definitions/command_line_steps.rb"
            }
        ]
    },
    {
        "feature_file": "fetch.feature",
        "test_num": 250,
        "test_case": "Fetch existing remote",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub fetch origin`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "fetch.feature",
        "test_num": 251,
        "test_case": "Fetch existing remote from non-GitHub source",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"ssh://dev@codeserver.dev.xxx.drush.in/~/repository.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub fetch origin`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "fetch.feature",
        "test_num": 252,
        "test_case": "Fetch from non-GitHub source via refspec",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"ssh://dev@codeserver.dev.xxx.drush.in/~/repository.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub fetch ssh://myusername@a.specific.server:1234/existing-project/gerrit-project-name refs/changes/16/6116/1`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "fetch.feature",
        "test_num": 253,
        "test_case": "Fetch from local bundle",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "a git bundle named \"mislav\"",
                "step_definition": "do\ndest = expand_path(file)\nFileUtils.mkdir_p(File.dirname(dest))\nDir.mktmpdir { |tmpdir,|\n  Dir.chdir(tmpdir) {\n    `git -c init.defaultBranch=master init --quiet`\n    `GIT_COMMITTER_NAME=a GIT_COMMITTER_EMAIL=b git commit --quiet -m 'empty' --allow-empty --author='a <b>'`\n    `git bundle create \"#{dest}\" master 2>&1`\n  }\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub fetch mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "there should be no \"mislav\" remote",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nexpect(remotes.split(\"\\n\")).to_not(include(remote_name))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fetch.feature",
        "test_num": 254,
        "test_case": "Creates new remote",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub fetch mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch mislav\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the url for \"mislav\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "fetch.feature",
        "test_num": 255,
        "test_case": "Creates new remote with git",
        "steps": [
            {
                "step_num": 1,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub fetch mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git fetch mislav\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the url for \"mislav\" should be \"git://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "fetch.feature",
        "test_num": 256,
        "test_case": "Owner name with dash",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub fetch ankit-maverick`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch ankit-maverick\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the url for \"ankit-maverick\" should be \"https://github.com/ankit-maverick/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "fetch.feature",
        "test_num": 257,
        "test_case": "Private repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub fetch mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git fetch mislav\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the url for \"mislav\" should be \"git@github.com:mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "fetch.feature",
        "test_num": 258,
        "test_case": "Writeable repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub fetch mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git fetch mislav\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the url for \"mislav\" should be \"git@github.com:mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "fetch.feature",
        "test_num": 259,
        "test_case": "Fetch with options",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub fetch --depth=1 mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch --depth=1 mislav\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fetch.feature",
        "test_num": 260,
        "test_case": "Fetch multiple",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub fetch --multiple mislav rtomayko`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch --multiple mislav rtomayko\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the url for \"mislav\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the url for \"rtomayko\" should be \"https://github.com/rtomayko/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fetch.feature",
        "test_num": 261,
        "test_case": "Fetch multiple with filtering",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `git config remotes.mygrp \"foo bar\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub fetch --multiple origin mislav mygrp https://example.com typo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git fetch --multiple origin mislav mygrp https://example.com typo\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the url for \"mislav\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "there should be no \"mygrp\" remote",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nexpect(remotes.split(\"\\n\")).to_not(include(remote_name))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 7,
                "step_name": "there should be no \"typo\" remote",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nexpect(remotes.split(\"\\n\")).to_not(include(remote_name))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fetch.feature",
        "test_num": 262,
        "test_case": "Fetch multiple comma-separated",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub fetch mislav,rtomayko,dustinleblanc`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch --multiple mislav rtomayko dustinleblanc\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the url for \"mislav\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the url for \"rtomayko\" should be \"https://github.com/rtomayko/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the url for \"dustinleblanc\" should be \"https://github.com/dustinleblanc/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fetch.feature",
        "test_num": 263,
        "test_case": "Doesn't create a new remote if repo doesn't exist on GitHub",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub fetch mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "there should be no \"mislav\" remote",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nexpect(remotes.split(\"\\n\")).to_not(include(remote_name))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fish_completion.feature",
        "test_num": 264,
        "test_case": "\"pu\" matches multiple commands including \"pull-request\"",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I type \"git pu\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "the command should not expand",
                "step_definition": "do\ntmux_wait_for_completion {\n  false\n}\nexpect(tmux_pane_contents).to(match(/^\\$ #{@last_command}$/))\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 3,
                "step_name": "I press <Tab> again",
                "step_definition": "do\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 4,
                "step_name": "the completion menu should offer \"pull push pull-request\" unsorted",
                "step_definition": "do\nmenu = tmux_completion_menu_basic\nif unsorted\n  menu.sort!\n  items = items.split(\" \").sort.join(\" \")\nend\nexpect(menu.join(\" \")).to(eq(items))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    },
    {
        "feature_file": "fish_completion.feature",
        "test_num": 265,
        "test_case": "\"ci-\" expands to \"ci-status\"",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I type \"git ci-\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "the command should expand to \"git ci-status\"",
                "step_definition": "do\ntmux_wait_for_completion\nexpect(tmux_pane_contents).to(match(/^\\$ #{cmd}$/))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    },
    {
        "feature_file": "fish_completion.feature",
        "test_num": 266,
        "test_case": "Offers pull-request flags",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I type \"git pull-request -\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "I press <Tab> again",
                "step_definition": "do\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 3,
                "step_name": "the completion menu should offer \"-F -b -f -h -m -a -M -l -o --browse -p --help\" unsorted",
                "step_definition": "do\nmenu = tmux_completion_menu_basic\nif unsorted\n  menu.sort!\n  items = items.split(\" \").sort.join(\" \")\nend\nexpect(menu.join(\" \")).to(eq(items))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    },
    {
        "feature_file": "fish_completion.feature",
        "test_num": 267,
        "test_case": "Browse to issues",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I type \"git browse -- i\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "the command should expand to \"git browse -- issues\"",
                "step_definition": "do\ntmux_wait_for_completion\nexpect(tmux_pane_contents).to(match(/^\\$ #{cmd}$/))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 268,
        "test_case": "Fork the repository",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"new remote: mislav\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "\"git remote add -f mislav https://github.com/evilchelu/dotfiles.git\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"git remote set-url mislav https://github.com/mislav/dotfiles.git\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the url for \"mislav\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 269,
        "test_case": "Fork the repository with new remote name specified",
        "steps": [
            {
                "step_num": 1,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub fork --remote-name=origin`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "\"git remote add -f origin git://github.com/evilchelu/dotfiles.git\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"git remote set-url origin git@github.com:mislav/dotfiles.git\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 7,
                "step_name": "the url for \"origin\" should be \"git@github.com:mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 8,
                "step_name": "the url for \"upstream\" should be \"git://github.com/evilchelu/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 270,
        "test_case": "Fork the repository with redirect",
        "steps": [
            {
                "step_num": 1,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"new remote: mislav\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "\"git remote add -f mislav git://github.com/evilchelu/dotfiles.git\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"git remote set-url mislav git@github.com:MiSlAv/my-dotfiles.git\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 7,
                "step_name": "the url for \"mislav\" should be \"git@github.com:MiSlAv/my-dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 271,
        "test_case": "Fork the repository when origin URL is private",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"git@github.com:evilchelu/dotfiles.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly \"new remote: mislav\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "\"git remote add -f mislav git://github.com/evilchelu/dotfiles.git\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 7,
                "step_name": "\"git remote set-url mislav git@github.com:mislav/dotfiles.git\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 8,
                "step_name": "the url for \"mislav\" should be \"git@github.com:mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 272,
        "test_case": "--no-remote",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub fork --no-remote`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "there should be no \"mislav\" remote",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nexpect(remotes.split(\"\\n\")).to_not(include(remote_name))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 273,
        "test_case": "Fork failed",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "there should be no \"mislav\" remote",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nexpect(remotes.split(\"\\n\")).to_not(include(remote_name))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 274,
        "test_case": "Unrelated fork already exists",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "there should be no \"mislav\" remote",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nexpect(remotes.split(\"\\n\")).to_not(include(remote_name))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 275,
        "test_case": "Related fork already exists",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stdout should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the url for \"mislav\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 276,
        "test_case": "Redirected repo already exists",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stdout should contain exactly \"new remote: mislav\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 277,
        "test_case": "Unrelated remote already exists",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"mislav\" remote has url \"git@github.com:mislav/unrelated.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the exit status should not be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain",
                "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
                "step_definition_file": "features/lib/step_definitions/command_line_steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the url for \"mislav\" should be \"git@github.com:mislav/unrelated.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 278,
        "test_case": "Related fork and related remote already exist",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"mislav\" remote has url \"git@github.com:mislav/dotfiles.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stdout should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the url for \"mislav\" should be \"git@github.com:mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 279,
        "test_case": "Related fork and related remote, but with differing protocol, already exist",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"mislav\" remote has url \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stdout should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the url for \"mislav\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 280,
        "test_case": "Invalid OAuth token",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am \"mislav\" on github.com with OAuth token \"WRONGTOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 281,
        "test_case": "Not in repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the current dir is not a repo",
                "step_definition": "do\nFileUtils.rm_rf(expand_path(\".git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain \"fatal: Not a git repository\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 282,
        "test_case": "Origin remote doesn't exist",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `git remote rm origin`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "there should be no \"origin\" remote",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nexpect(remotes.split(\"\\n\")).to_not(include(remote_name))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 283,
        "test_case": "Unknown host",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"git@git.my.org:evilchelu/dotfiles.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 284,
        "test_case": "Enterprise fork",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"origin\" remote has url \"git@git.my.org:evilchelu/dotfiles.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am \"mislav\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the url for \"mislav\" should be \"https://git.my.org/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 285,
        "test_case": "Enterprise fork using regular HTTP",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"origin\" remote has url \"git@git.my.org:evilchelu/dotfiles.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am \"mislav\" on http://git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the url for \"mislav\" should be \"https://git.my.org/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "fork.feature",
        "test_num": 286,
        "test_case": "Fork a repo to a specific organization",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub fork --org=acme`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"new remote: acme\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the url for \"acme\" should be \"https://github.com/acme/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "gist.feature",
        "test_num": 287,
        "test_case": "Fetch a gist with a single file",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub gist show myhash`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "gist.feature",
        "test_num": 288,
        "test_case": "Fetch a gist with many files",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub gist show myhash`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain",
                "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
                "step_definition_file": "features/lib/step_definitions/command_line_steps.rb"
            }
        ]
    },
    {
        "feature_file": "gist.feature",
        "test_num": 289,
        "test_case": "Fetch a single file from gist",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub gist show myhash hub_gist1.txt`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "gist.feature",
        "test_num": 290,
        "test_case": "Create a gist from file",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "a file named \"testfile.txt\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub gist create testfile.txt`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "gist.feature",
        "test_num": 291,
        "test_case": "Open the new gist in a browser",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "a file named \"testfile.txt\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub gist create -o testfile.txt`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "\"open http://gists.github.com/somehash\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "gist.feature",
        "test_num": 292,
        "test_case": "Create a gist with multiple files",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "a file named \"testfile.txt\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 3,
                "step_name": "a file named \"testfile2.txt\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub gist create testfile.txt testfile2.txt`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "gist.feature",
        "test_num": 293,
        "test_case": "Create a gist from stdin",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub gist create` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I pass in",
                "step_definition": "do\ntype(input)\nclose_input\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "gist.feature",
        "test_num": 294,
        "test_case": "Insufficient OAuth scopes",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "a file named \"testfile.txt\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub gist create testfile.txt`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "gist.feature",
        "test_num": 295,
        "test_case": "Infer correct OAuth scopes for gist",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "a file named \"testfile.txt\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub gist create testfile.txt`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "gist.feature",
        "test_num": 296,
        "test_case": "Create error",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "a file named \"testfile.txt\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub gist create testfile.txt`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "git_compatibility.feature",
        "test_num": 297,
        "test_case": "If alias named branch exists, it should not be expanded.",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in \"git://github.com/rtomayko/ronn.git\" git repo",
                "step_definition": "do\n(origin_url = dir_name; dir_name = File.basename(origin_url, \".git\")) if dir_name.include?(\":\")\nstep(\"a git repo in \\\"#{dir_name}\\\"\")\nstep(\"I cd to \\\"#{dir_name}\\\"\")\nif origin_url\n  step(\"the \\\"origin\\\" remote has url \\\"#{origin_url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the default branch for \"origin\" is \"master\"",
                "step_definition": "do\ncd(\".\") {\n  ref_file = \".git/refs/remotes/#{remote}/#{branch}\"\n  unless File.exist?(ref_file)\n    unless File.exist?(\".git/refs/heads/master\")\n      empty_commit\n    end\n    FileUtils.mkdir_p(File.dirname(ref_file))\n    FileUtils.cp(\".git/refs/heads/master\", ref_file)\n  end\n}\nrun_ignored_command(\"git remote set-head #{remote} #{branch}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `git config --global alias.branch \"branch -a\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run `hub branch`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stdout should contain exactly \"* master\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "git_compatibility.feature",
        "test_num": 298,
        "test_case": "List commands",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub --list-cmds=others`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the stdout should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "git_compatibility.feature",
        "test_num": 299,
        "test_case": "Doesn't sabotage --exec-path",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub --exec-path`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should not contain \"These GitHub commands\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "git_compatibility.feature",
        "test_num": 300,
        "test_case": "Shows help with --git-dir",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub --git-dir=.git`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain \"usage: git \"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "help.feature",
        "test_num": 301,
        "test_case": "Appends hub help to regular help text",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub help`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should contain",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 3,
                "step_name": "the output should contain \"usage: git \"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "help.feature",
        "test_num": 302,
        "test_case": "Shows help text with no arguments",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the stdout should contain \"usage: git \"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "help.feature",
        "test_num": 303,
        "test_case": "Appends hub commands to `--all` output",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub help -a`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should contain \"pull-request\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "help.feature",
        "test_num": 304,
        "test_case": "Shows help for a hub extension",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub help hub-help`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"man hub-help\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "help.feature",
        "test_num": 305,
        "test_case": "Shows help for a hub command",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub help fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"man hub-fork\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "help.feature",
        "test_num": 306,
        "test_case": "Show help in HTML format",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub help -w fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"man hub-fork\" should not be run",
                "step_definition": "do\nhistory.each { |h,|\n  expect(h).to_not(include(pattern))\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git web--browse PATH/hub-fork.1.html\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "help.feature",
        "test_num": 307,
        "test_case": "Show help in HTML format by default",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `git config --global help.format html`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub help fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git web--browse PATH/hub-fork.1.html\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "help.feature",
        "test_num": 308,
        "test_case": "Override HTML format back to man",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `git config --global help.format html`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub help -m fork`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"man hub-fork\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "help.feature",
        "test_num": 309,
        "test_case": "The --help flag opens man page",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub fork --help`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"man hub-fork\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "help.feature",
        "test_num": 310,
        "test_case": "The --help flag expands alias first",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `git config --global alias.ci ci-status`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub ci --help`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"man hub-ci-status\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "init.feature",
        "test_num": 311,
        "test_case": "Initializes a git repo with remote",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub init -g`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the url for \"origin\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "init.feature",
        "test_num": 312,
        "test_case": "Initializes a git repo in a new directory with remote",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub init -g new_dir`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "I cd to \"new_dir\"",
                "step_definition": "do\ncd(dir)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"origin\" should be \"https://github.com/mislav/new_dir.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "init.feature",
        "test_num": 313,
        "test_case": "Enterprise host",
        "steps": [
            {
                "step_num": 1,
                "step_name": "$GITHUB_HOST is \"git.my.org\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am \"mislav\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub init -g`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the url for \"origin\" should be \"https://git.my.org/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "issue-transfer.feature",
        "test_num": 314,
        "test_case": "Transfer issue",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue transfer 123 spoon-knife`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue-transfer.feature",
        "test_num": 315,
        "test_case": "Transfer to another owner",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub issue transfer 123 monalisa/playground`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 316,
        "test_case": "Fetch issues",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue -a Cornwe19`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 317,
        "test_case": "List limited number of issues",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue -L 2`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 318,
        "test_case": "Fetch issues and pull requests",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue -a Cornwe19 --include-pulls`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 319,
        "test_case": "Fetch issues not assigned to any milestone",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue -M none`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 320,
        "test_case": "Fetch issues assigned to milestone by number",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue -M 12`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 321,
        "test_case": "Fetch issues assigned to milestone by name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue -M v1`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 322,
        "test_case": "Fetch issues created by a given user",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue -c octocat`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 323,
        "test_case": "Fetch issues mentioning a given user",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue -@ octocat`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 324,
        "test_case": "Fetch issues with certain labels",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue -l foo,bar`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 325,
        "test_case": "Fetch issues updated after a certain date and time",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue -d 2016-08-18T09:11:32Z`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 326,
        "test_case": "Fetch issues sorted by number of comments ascending",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue -o comments -^`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 327,
        "test_case": "Fetch issues across multiple pages",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 328,
        "test_case": "Custom format for issues list",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue -f \"%I,%au%n\" -a Cornwe19`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 329,
        "test_case": "Custom format with no-color labels",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue -f \"%I: %L%n\" --color=never`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 330,
        "test_case": "List all assignees",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue -f \"%I:%as%n\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 331,
        "test_case": "Create an issue",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue create -m \"Not workie, pls fix\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 332,
        "test_case": "Create an issue and open in browser",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue create -o -m hello`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "\"open the://url\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 333,
        "test_case": "Create an issue with labels",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue create -m \"hello\" -l \"wont fix,docs\" -lnope`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 334,
        "test_case": "Create an issue with milestone and assignees",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue create -m \"hello\" -M 12 --assign mislav,josh -apcorpet`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 335,
        "test_case": "Create an issue with milestone by name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue create -m \"hello\" -M \"hello world!\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 336,
        "test_case": "Editing empty issue message",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the git commit editor is \"vim\"",
                "step_definition": "do\nset_environment_variable(\"GIT_EDITOR\", cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub issue create -m '' --edit`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 337,
        "test_case": "Issue template",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the git commit editor is \"vim\"",
                "step_definition": "do\nset_environment_variable(\"GIT_EDITOR\", cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "a file named \"issue_template.md\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub issue create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 338,
        "test_case": "Issue template from a subdirectory",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the git commit editor is \"vim\"",
                "step_definition": "do\nset_environment_variable(\"GIT_EDITOR\", cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "a file named \".github/issue_template.md\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "a directory named \"subdir\"",
                "step_definition": "do\ncreate_directory(dir_name)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 6,
                "step_name": "I cd to \"subdir\"",
                "step_definition": "do\ncd(dir)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 7,
                "step_name": "I successfully run `hub issue create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 8,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 339,
        "test_case": "Multiple issue templates",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the git commit editor is \"vim\"",
                "step_definition": "do\nset_environment_variable(\"GIT_EDITOR\", cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "a file named \".github/ISSUE_TEMPLATE/bug_report.md\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 4,
                "step_name": "a file named \".github/ISSUE_TEMPLATE/feature_request.md\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 5,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `hub issue create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 340,
        "test_case": "Multiple issue templates with default",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the git commit editor is \"vim\"",
                "step_definition": "do\nset_environment_variable(\"GIT_EDITOR\", cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "a directory named \".github/ISSUE_TEMPLATE\"",
                "step_definition": "do\ncreate_directory(dir_name)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 4,
                "step_name": "a file named \".github/ISSUE_TEMPLATE.md\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 5,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `hub issue create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 341,
        "test_case": "A file named \".github\"",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the git commit editor is \"vim\"",
                "step_definition": "do\nset_environment_variable(\"GIT_EDITOR\", cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "a file named \".github\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub issue create`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 342,
        "test_case": "Update an issue's title",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue update 1337 -m \"Not workie, pls fix\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 343,
        "test_case": "Update an issue's state",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue update 1337 -s closed`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 344,
        "test_case": "Update an issue's labels",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue update 1337 -l bug,important`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 345,
        "test_case": "Update an issue's milestone",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue update 1337 -M 42`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 346,
        "test_case": "Update an issue's milestone by name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue update 1337 -M \"hello world!\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 347,
        "test_case": "Update an issue's assignees",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue update 1337 -a Cornwe19`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 348,
        "test_case": "Update an issue's title, labels, milestone, and assignees",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue update 1337  -m \"Not workie, pls fix\" -M 42 -l bug,important -a Cornwe19`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 349,
        "test_case": "Clear existing issue labels, assignees, milestone",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue update 1337 --milestone= --assign= --labels=`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 350,
        "test_case": "Update an issue's title and body manually",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the git commit editor is \"vim\"",
                "step_definition": "do\nset_environment_variable(\"GIT_EDITOR\", cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub issue update 1337 --edit`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 351,
        "test_case": "Update an issue's title and body via a file",
        "steps": [
            {
                "step_num": 1,
                "step_name": "a file named \"my-issue.md\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub issue update 1337 -F my-issue.md`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 352,
        "test_case": "Update an issue without specifying fields to update",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub issue update 1337`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain \"please specify fields to update\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain \"Usage: hub issue\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 353,
        "test_case": "Fetch issue labels",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue labels`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 354,
        "test_case": "Fetch single issue",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue show 102`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 355,
        "test_case": "Format single issue",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue show 102 --format='%I %t%n%n%b%n'`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 356,
        "test_case": "Format with literal % characters",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub issue show 102 --format='%t%%t%%n%n'`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 357,
        "test_case": "Did not supply an issue number",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub issue show`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain \"Usage: hub issue\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 358,
        "test_case": "Show error message if http code is not 200 for issues endpoint",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub issue show 102`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "issue.feature",
        "test_num": 359,
        "test_case": "Show error message if http code is not 200 for comments endpoint",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub issue show 102`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "merge.feature",
        "test_num": 360,
        "test_case": "Normal merge",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub merge master`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "merge.feature",
        "test_num": 361,
        "test_case": "Merge pull request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "there is a git FETCH_HEAD",
                "step_definition": "do\nempty_commit\nempty_commit\ncd(\".\") {\n  File.open(\".git/FETCH_HEAD\", \"w\") { |fetch_head,|\n    fetch_head.puts(\"%s\\t\\t'refs/heads/made-up' of git://github.com/made/up.git\" % `git rev-parse HEAD`.chomp)\n  }\n}\nrun_ignored_command(\"git reset --quiet --hard HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub merge https://github.com/defunkt/hub/pull/164`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git fetch origin refs/pull/164/head\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"git merge FETCH_HEAD --no-ff -m Merge pull request #164 from jfirebaugh/hub_merge\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `git show -s --format=%B`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the output should contain",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "merge.feature",
        "test_num": 362,
        "test_case": "Merge pull request with options",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "there is a git FETCH_HEAD",
                "step_definition": "do\nempty_commit\nempty_commit\ncd(\".\") {\n  File.open(\".git/FETCH_HEAD\", \"w\") { |fetch_head,|\n    fetch_head.puts(\"%s\\t\\t'refs/heads/made-up' of git://github.com/made/up.git\" % `git rev-parse HEAD`.chomp)\n  }\n}\nrun_ignored_command(\"git reset --quiet --hard HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub merge --squash https://github.com/defunkt/hub/pull/164 --no-edit`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git fetch origin refs/pull/164/head\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"git merge --squash --no-edit FETCH_HEAD -m Merge pull request #164 from jfirebaugh/hub_merge\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "merge.feature",
        "test_num": 363,
        "test_case": "Merge pull request no repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub merge https://github.com/defunkt/hub/pull/164`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-checkout.feature",
        "test_num": 364,
        "test_case": "Checkout a pull request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr checkout 77`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch origin refs/pull/77/head:fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git checkout fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"fixes\" should merge \"refs/pull/77/head\" from remote \"origin\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all branch.#{name}.remote\")\nexpect(output).to(include(remote))\noutput = run_ignored_command(\"git config --get-all branch.#{name}.merge\")\nexpect(output).to(include(merge))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "pr-checkout.feature",
        "test_num": 365,
        "test_case": "Custom name for new branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr checkout 77 fixes-from-mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch origin refs/pull/77/head:fixes-from-mislav\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git checkout fixes-from-mislav\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"fixes-from-mislav\" should merge \"refs/pull/77/head\" from remote \"origin\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all branch.#{name}.remote\")\nexpect(output).to(include(remote))\noutput = run_ignored_command(\"git config --get-all branch.#{name}.merge\")\nexpect(output).to(include(merge))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "pr-checkout.feature",
        "test_num": 366,
        "test_case": "Same-repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr checkout 77`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch origin +refs/heads/fixes:refs/remotes/origin/fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git checkout -b fixes --no-track origin/fixes\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"fixes\" should merge \"refs/heads/fixes\" from remote \"origin\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all branch.#{name}.remote\")\nexpect(output).to(include(remote))\noutput = run_ignored_command(\"git config --get-all branch.#{name}.merge\")\nexpect(output).to(include(merge))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "pr-list.feature",
        "test_num": 367,
        "test_case": "List pulls",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr list`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-list.feature",
        "test_num": 368,
        "test_case": "List pull requests with requested reviewers",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr list -f \"%sC%>(8)%i %rs%n\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-list.feature",
        "test_num": 369,
        "test_case": "List draft status",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr list --format \"%I %pC %pS %Creset%n\" --color`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "its output should contain exactly",
                "step_definition": "do\nmatcher = case channel.to_sym\nwhen :output\n  :have_output\nwhen :stderr\n  :have_output_on_stderr\nwhen :stdout\n  :have_output_on_stdout\nend\ncommands = [last_command_started]\noutput_string_matcher = if exactly\n  :an_output_string_being_eq\nelse\n  :an_output_string_including\nend\nif negated\n  expect(commands).not_to(include_an_object(send(matcher, send(output_string_matcher, expected))))\nelse\n  expect(commands).to(include_an_object(send(matcher, send(output_string_matcher, expected))))\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub -c color.ui=always pr list --format \"%I %pC %pS %Creset%n\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "its output should contain exactly",
                "step_definition": "do\nmatcher = case channel.to_sym\nwhen :output\n  :have_output\nwhen :stderr\n  :have_output_on_stderr\nwhen :stdout\n  :have_output_on_stdout\nend\ncommands = [last_command_started]\noutput_string_matcher = if exactly\n  :an_output_string_being_eq\nelse\n  :an_output_string_including\nend\nif negated\n  expect(commands).not_to(include_an_object(send(matcher, send(output_string_matcher, expected))))\nelse\n  expect(commands).to(include_an_object(send(matcher, send(output_string_matcher, expected))))\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `hub -c color.ui=false pr list --format \"%I %pC%pS%Creset%n\" --color=auto`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "its output should contain exactly",
                "step_definition": "do\nmatcher = case channel.to_sym\nwhen :output\n  :have_output\nwhen :stderr\n  :have_output_on_stderr\nwhen :stdout\n  :have_output_on_stdout\nend\ncommands = [last_command_started]\noutput_string_matcher = if exactly\n  :an_output_string_being_eq\nelse\n  :an_output_string_including\nend\nif negated\n  expect(commands).not_to(include_an_object(send(matcher, send(output_string_matcher, expected))))\nelse\n  expect(commands).to(include_an_object(send(matcher, send(output_string_matcher, expected))))\nend\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "pr-list.feature",
        "test_num": 370,
        "test_case": "Sort by number of comments ascending",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr list -o comments -^`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-list.feature",
        "test_num": 371,
        "test_case": "Filter by base and head",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr list -b develop -h patch-1`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-list.feature",
        "test_num": 372,
        "test_case": "Filter by head with owner",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr list -h mislav:patch-1`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-list.feature",
        "test_num": 373,
        "test_case": "Filter by merged state",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr list --state=merged`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-merge.feature",
        "test_num": 374,
        "test_case": "Default merge",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr merge 12`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-merge.feature",
        "test_num": 375,
        "test_case": "Squash merge",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr merge --squash 12`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-merge.feature",
        "test_num": 376,
        "test_case": "Merge with rebase",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr merge --rebase 12`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-merge.feature",
        "test_num": 377,
        "test_case": "Merge with title",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr merge 12 -m mytitle`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-merge.feature",
        "test_num": 378,
        "test_case": "Merge with title and body",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr merge 12 -m mytitle -m msg1 -m msg2`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-merge.feature",
        "test_num": 379,
        "test_case": "Merge with title and body from file",
        "steps": [
            {
                "step_num": 1,
                "step_name": "a file named \"msg.txt\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pr merge 12 -F msg.txt`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-merge.feature",
        "test_num": 380,
        "test_case": "Merge with head SHA",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr merge 12 --head-sha MYSHA`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-merge.feature",
        "test_num": 381,
        "test_case": "Delete branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr merge -d 12`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-merge.feature",
        "test_num": 382,
        "test_case": "Delete already deleted branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr merge -d 12`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-merge.feature",
        "test_num": 383,
        "test_case": "Delete branch on cross-repo PR",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr merge -d 12`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-show.feature",
        "test_num": 384,
        "test_case": "Current branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pr show`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"open https://github.com/ashemesh/hub/pull/102\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "pr-show.feature",
        "test_num": 385,
        "test_case": "Current branch output URL",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pr show -u`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"open https://github.com/ashemesh/hub/pull/102\" should not be run",
                "step_definition": "do\nhistory.each { |h,|\n  expect(h).to_not(include(pattern))\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-show.feature",
        "test_num": 386,
        "test_case": "Format Current branch output URL",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pr show -f \"%sC%>(8)%i %rs%n\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"open https://github.com/ashemesh/hub/pull/102\" should not be run",
                "step_definition": "do\nhistory.each { |h,|\n  expect(h).to_not(include(pattern))\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-show.feature",
        "test_num": 387,
        "test_case": "Current branch in fork",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"upstream\" remote has url \"git@github.com:github/hub.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub pr show`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"open https://github.com/github/hub/pull/102\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "pr-show.feature",
        "test_num": 388,
        "test_case": "Differently named branch in fork",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"upstream\" remote has url \"git@github.com:github/hub.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"local-topic\" branch with upstream \"origin/remote-topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub pr show`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "\"open https://github.com/github/hub/pull/102\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "pr-show.feature",
        "test_num": 389,
        "test_case": "Upstream configuration with HTTPS URL",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"local-topic\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `git config branch.local-topic.remote https://github.com/octocat/hub.git`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `git config branch.local-topic.merge refs/remotes/remote-topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub pr show`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"open https://github.com/github/hub/pull/102\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "pr-show.feature",
        "test_num": 390,
        "test_case": "Upstream configuration with SSH URL",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"local-topic\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `git config branch.local-topic.remote git@github.com:octocat/hub.git`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `git config branch.local-topic.merge refs/remotes/remote-topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub pr show`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "\"open https://github.com/github/hub/pull/102\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "pr-show.feature",
        "test_num": 391,
        "test_case": "Explicit head branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr show --head topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/ashemesh/hub/pull/102\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "pr-show.feature",
        "test_num": 392,
        "test_case": "Explicit head branch with owner",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr show --head github:topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/ashemesh/hub/pull/102\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "pr-show.feature",
        "test_num": 393,
        "test_case": "No pull request found",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub pr show --head topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-show.feature",
        "test_num": 394,
        "test_case": "Show pull request by number",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub pr show 102`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"open https://github.com/ashemesh/hub/pull/102\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "pr-show.feature",
        "test_num": 395,
        "test_case": "Format pull request by number",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub pr show 102 -f \"%sC%>(8)%i %rs%n\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"open https://github.com/ashemesh/hub/pull/102\" should not be run",
                "step_definition": "do\nhistory.each { |h,|\n  expect(h).to_not(include(pattern))\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pr-show.feature",
        "test_num": 396,
        "test_case": "Show pull request by invalid number",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub pr show XYZ`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 397,
        "test_case": "Basic pull request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -m hello`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 398,
        "test_case": "Detached HEAD",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in detached HEAD",
                "step_definition": "do\nempty_commit\nempty_commit\nrun_ignored_command(\"git checkout HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub pull-request`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain \"Aborted: not currently on any branch.\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 399,
        "test_case": "Detached HEAD with explicit head",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am in detached HEAD",
                "step_definition": "do\nempty_commit\nempty_commit\nrun_ignored_command(\"git checkout HEAD^\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -h feature -m message`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 400,
        "test_case": "Non-GitHub repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"mygh:Manganeez/repo.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub pull-request`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 401,
        "test_case": "Create pull request respecting \"insteadOf\" configuration",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"mygh:Manganeez/repo.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `git config url.\"git@github.com:\".insteadOf mygh:`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub pull-request -m \"here we go\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should contain exactly \"https://github.com/Manganeez/repo/pull/12\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 402,
        "test_case": "With Unicode characters",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -m \u0103\u00e9\u00f1\u00f8\u00fc`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 403,
        "test_case": "Invalid flag",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub pull-request -yelp`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the stderr should contain \"unknown shorthand flag: 'y' in -yelp\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 404,
        "test_case": "With Unicode characters in the changelog",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"master\" branch pushed to \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `git checkout --quiet -b topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "I make a commit with message \"\u0103\u00e9\u00f1\u00f8\u00fc\"",
                "step_definition": "do\nnum = if num == \"a\"\n  1\nelse\n  num.to_i\nend\nnum.times {\n  empty_commit(msg)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the \"topic\" branch is pushed to \"origin/topic\"",
                "step_definition": "do\nfull_upstream = \".git/refs/remotes/#{upstream}\"\ncd(\".\") {\n  FileUtils.mkdir_p(File.dirname(full_upstream))\n  FileUtils.cp(\".git/refs/heads/#{name}\", full_upstream)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 7,
                "step_name": "I successfully run `hub pull-request`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 8,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 405,
        "test_case": "Default message for single-commit pull request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"master\" branch pushed to \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `git checkout --quiet -b topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "I make a commit with message",
                "step_definition": "do\nempty_commit(msg)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the \"topic\" branch is pushed to \"origin/topic\"",
                "step_definition": "do\nfull_upstream = \".git/refs/remotes/#{upstream}\"\ncd(\".\") {\n  FileUtils.mkdir_p(File.dirname(full_upstream))\n  FileUtils.cp(\".git/refs/heads/#{name}\", full_upstream)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 7,
                "step_name": "I successfully run `hub pull-request`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 8,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 406,
        "test_case": "Single-commit with pull request template",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the git commit editor is \"true\"",
                "step_definition": "do\nset_environment_variable(\"GIT_EDITOR\", cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"master\" branch pushed to \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `git checkout --quiet -b topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "I make a commit with message",
                "step_definition": "do\nempty_commit(msg)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the \"topic\" branch is pushed to \"origin/topic\"",
                "step_definition": "do\nfull_upstream = \".git/refs/remotes/#{upstream}\"\ncd(\".\") {\n  FileUtils.mkdir_p(File.dirname(full_upstream))\n  FileUtils.cp(\".git/refs/heads/#{name}\", full_upstream)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 7,
                "step_name": "a file named \"pull_request_template.md\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 8,
                "step_name": "I successfully run `hub pull-request`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 9,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 407,
        "test_case": "Single-commit with PULL_REQUEST_TEMPLATE directory",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the git commit editor is \"true\"",
                "step_definition": "do\nset_environment_variable(\"GIT_EDITOR\", cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"master\" branch pushed to \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `git checkout --quiet -b topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "I make a commit with message",
                "step_definition": "do\nempty_commit(msg)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the \"topic\" branch is pushed to \"origin/topic\"",
                "step_definition": "do\nfull_upstream = \".git/refs/remotes/#{upstream}\"\ncd(\".\") {\n  FileUtils.mkdir_p(File.dirname(full_upstream))\n  FileUtils.cp(\".git/refs/heads/#{name}\", full_upstream)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 7,
                "step_name": "a directory named \"PULL_REQUEST_TEMPLATE\"",
                "step_definition": "do\ncreate_directory(dir_name)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 8,
                "step_name": "I successfully run `hub pull-request`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 9,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 408,
        "test_case": "Single-commit pull request with \"--no-edit\"",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"master\" branch pushed to \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `git checkout --quiet -b topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I make a commit with message",
                "step_definition": "do\nempty_commit(msg)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the \"topic\" branch is pushed to \"origin/topic\"",
                "step_definition": "do\nfull_upstream = \".git/refs/remotes/#{upstream}\"\ncd(\".\") {\n  FileUtils.mkdir_p(File.dirname(full_upstream))\n  FileUtils.cp(\".git/refs/heads/#{name}\", full_upstream)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `hub pull-request --no-edit`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 409,
        "test_case": "Multiple-commit pull request with \"--no-edit\"",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"master\" branch pushed to \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `git checkout --quiet -b topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I make a commit with message",
                "step_definition": "do\nempty_commit(msg)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I make a commit with message",
                "step_definition": "do\nempty_commit(msg)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the \"topic\" branch is pushed to \"origin/topic\"",
                "step_definition": "do\nfull_upstream = \".git/refs/remotes/#{upstream}\"\ncd(\".\") {\n  FileUtils.mkdir_p(File.dirname(full_upstream))\n  FileUtils.cp(\".git/refs/heads/#{name}\", full_upstream)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 7,
                "step_name": "I successfully run `hub pull-request --no-edit`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 8,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 410,
        "test_case": "Pull request with \"--push\" and \"--no-edit\"",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"master\" branch pushed to \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `git checkout --quiet -b topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I make a commit with message",
                "step_definition": "do\nempty_commit(msg)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub pull-request --push --no-edit`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 411,
        "test_case": "No commits with \"--no-edit\"",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"master\" branch pushed to \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `git checkout --quiet -b topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the \"topic\" branch is pushed to \"origin/topic\"",
                "step_definition": "do\nfull_upstream = \".git/refs/remotes/#{upstream}\"\ncd(\".\") {\n  FileUtils.mkdir_p(File.dirname(full_upstream))\n  FileUtils.cp(\".git/refs/heads/#{name}\", full_upstream)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run `hub pull-request --no-edit`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 412,
        "test_case": "Message template should include git log summary between base and head",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"master\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I make a commit with message \"One on master\"",
                "step_definition": "do\nnum = if num == \"a\"\n  1\nelse\n  num.to_i\nend\nnum.times {\n  empty_commit(msg)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I make a commit with message \"Two on master\"",
                "step_definition": "do\nnum = if num == \"a\"\n  1\nelse\n  num.to_i\nend\nnum.times {\n  empty_commit(msg)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the \"master\" branch is pushed to \"origin/master\"",
                "step_definition": "do\nfull_upstream = \".git/refs/remotes/#{upstream}\"\ncd(\".\") {\n  FileUtils.mkdir_p(File.dirname(full_upstream))\n  FileUtils.cp(\".git/refs/heads/#{name}\", full_upstream)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 7,
                "step_name": "I successfully run `git reset --hard HEAD~2`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 8,
                "step_name": "I successfully run `git checkout --quiet -B topic origin/master`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 9,
                "step_name": "I make a commit with message \"One on topic\"",
                "step_definition": "do\nnum = if num == \"a\"\n  1\nelse\n  num.to_i\nend\nnum.times {\n  empty_commit(msg)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 10,
                "step_name": "I make a commit with message \"Two on topic\"",
                "step_definition": "do\nnum = if num == \"a\"\n  1\nelse\n  num.to_i\nend\nnum.times {\n  empty_commit(msg)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 11,
                "step_name": "the \"topic\" branch is pushed to \"origin/topic\"",
                "step_definition": "do\nfull_upstream = \".git/refs/remotes/#{upstream}\"\ncd(\".\") {\n  FileUtils.mkdir_p(File.dirname(full_upstream))\n  FileUtils.cp(\".git/refs/heads/#{name}\", full_upstream)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 12,
                "step_name": "I successfully run `git reset --hard HEAD~1`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 13,
                "step_name": "I run `hub pull-request`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 14,
                "step_name": "the SHAs and timestamps are normalized in \".git/PULLREQ_EDITMSG\"",
                "step_definition": "do\nfile = expand_path(file)\ncontents = File.read(file)\ncontents.gsub!(/[0-9a-f]{7} \\(Hub, \\d seconds? ago\\)/, \"SHA1SHA (Hub, 0 seconds ago)\")\nFile.open(file, \"w\") { |f,|\n  f.write(contents)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 15,
                "step_name": "the file \".git/PULLREQ_EDITMSG\" should contain exactly",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(content))\nelse\n  expect(file).to(have_file_content(content))\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 413,
        "test_case": "Non-existing base",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub pull-request -b origin:master -h topic -m here`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain",
                "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
                "step_definition_file": "features/lib/step_definitions/command_line_steps.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 414,
        "test_case": "Text editor adds title and body",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub pull-request`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly \"https://github.com/mislav/coral/pull/12\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the file \".git/PULLREQ_EDITMSG\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 415,
        "test_case": "Text editor adds title and body with multiple lines",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub pull-request`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly \"https://github.com/mislav/coral/pull/12\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the file \".git/PULLREQ_EDITMSG\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 416,
        "test_case": "Text editor with custom commentchar",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git \"core.commentchar\" is set to \"/\"",
                "step_definition": "do\nrun_ignored_command(\"git config #{key} \\\"#{value}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub pull-request`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 417,
        "test_case": "Failed pull request preserves previous message",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run `hub pull-request`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 7,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 8,
                "step_name": "I successfully run `hub pull-request`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 9,
                "step_name": "the file \".git/PULLREQ_EDITMSG\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 418,
        "test_case": "Text editor fails",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the text editor exits with error status",
                "step_definition": "do\ntext_editor_script(\"exit 1\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "an empty file named \".git/PULLREQ_EDITMSG\"",
                "step_definition": "do\nwrite_file(file_name, \"\")\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run `hub pull-request`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain \"error using text editor for pull request message\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the file \".git/PULLREQ_EDITMSG\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 419,
        "test_case": "Title and body from file",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "a file named \"pullreq-msg\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub pull-request -F pullreq-msg`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly \"https://github.com/mislav/coral/pull/12\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the file \".git/PULLREQ_EDITMSG\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 420,
        "test_case": "Edit title and body from file",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "a file named \"pullreq-msg\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 4,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub pull-request -F pullreq-msg --edit`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the file \".git/PULLREQ_EDITMSG\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 421,
        "test_case": "Title and body from stdin",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub pull-request -F -` interactively",
                "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I pass in",
                "step_definition": "do\ntype(input)\nclose_input\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly \"https://github.com/mislav/coral/pull/12\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 6,
                "step_name": "the exit status should be 0",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the file \".git/PULLREQ_EDITMSG\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 422,
        "test_case": "Title and body from command-line argument",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -m \"I am just a pull\\n\\nA little pull\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"https://github.com/mislav/coral/pull/12\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the file \".git/PULLREQ_EDITMSG\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 423,
        "test_case": "Title and body from multiple command-line arguments",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -m \"I am just a pull\" -m \"A little pull\" -m \"And description\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"https://github.com/mislav/coral/pull/12\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 424,
        "test_case": "Error when implicit head is the same as base",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"master\" branch with upstream \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub pull-request`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 425,
        "test_case": "Explicit head",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"master\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -h feature -m message`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 426,
        "test_case": "Explicit head with owner",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"master\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -h mojombo:feature -m message`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 427,
        "test_case": "Explicit base",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch pushed to \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -b develop -m message`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 428,
        "test_case": "Implicit base by detecting main branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the default branch for \"origin\" is \"develop\"",
                "step_definition": "do\ncd(\".\") {\n  ref_file = \".git/refs/remotes/#{remote}/#{branch}\"\n  unless File.exist?(ref_file)\n    unless File.exist?(\".git/refs/heads/master\")\n      empty_commit\n    end\n    FileUtils.mkdir_p(File.dirname(ref_file))\n    FileUtils.cp(\".git/refs/heads/master\", ref_file)\n  end\n}\nrun_ignored_command(\"git remote set-head #{remote} #{branch}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"master\" branch is pushed to \"origin/master\"",
                "step_definition": "do\nfull_upstream = \".git/refs/remotes/#{upstream}\"\ncd(\".\") {\n  FileUtils.mkdir_p(File.dirname(full_upstream))\n  FileUtils.cp(\".git/refs/heads/#{name}\", full_upstream)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub pull-request -m message`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 429,
        "test_case": "Explicit base with owner",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"master\" branch pushed to \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -b mojombo:develop -m message`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 430,
        "test_case": "Explicit base with owner and repo name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"master\" branch pushed to \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -b mojombo/coralify:develop -m message`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 431,
        "test_case": "Error when there are unpushed commits",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I make 2 commits",
                "step_definition": "do\nnum = if num == \"a\"\n  1\nelse\n  num.to_i\nend\nnum.times {\n  empty_commit(msg)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub pull-request`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 432,
        "test_case": "Ignore unpushed commits with `-f`",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I make 2 commits",
                "step_definition": "do\nnum = if num == \"a\"\n  1\nelse\n  num.to_i\nend\nnum.times {\n  empty_commit(msg)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub pull-request -f -m message`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 433,
        "test_case": "Error from an unpushed branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub pull-request -m hello`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 434,
        "test_case": "Error from an unpushed branch with upstream same as base branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub pull-request -m hello`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 435,
        "test_case": "Pull request fails on the server",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub pull-request -m message`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 436,
        "test_case": "Convert issue to pull request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -i 92`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 437,
        "test_case": "Convert issue URL to pull request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request https://github.com/mislav/coral/issues/92`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 438,
        "test_case": "Enterprise host",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"git@git.my.org:mislav/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am \"mislav\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `hub pull-request -m enterprisey`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 439,
        "test_case": "Enterprise remote witch matching branch but no tracking",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"git@git.my.org:mislav/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am \"mislav\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I am on the \"feature\" branch pushed to \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `hub pull-request -m enterprisey`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 440,
        "test_case": "Create pull request from branch on the same remote",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"git://github.com/github/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"mislav\" remote has url \"git://github.com/mislav/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"feature\" branch pushed to \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub pull-request -m hereyougo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 441,
        "test_case": "Create pull request from branch on the personal fork case sensitive",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"git://github.com/github/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"doge\" remote has url \"git://github.com/Mislav/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"feature\" branch pushed to \"doge/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub pull-request -m hereyougo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 442,
        "test_case": "Create pull request from branch on the personal fork",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"git://github.com/github/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"doge\" remote has url \"git://github.com/mislav/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"feature\" branch pushed to \"doge/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub pull-request -m hereyougo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 443,
        "test_case": "Create pull request from branch on the personal fork, capitalized",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"git://github.com/LightAlf/FirstRepo.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"Kristinita\" remote has url \"git@github.com:Kristinita/FirstRepo.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"add-py3kwarn\" branch pushed to \"Kristinita/add-py3kwarn\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I am \"Kristinita\" on github.com with OAuth token \"OTOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `hub pull-request -m hereyougo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 444,
        "test_case": "Create pull request to \"upstream\" remote",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"upstream\" remote has url \"git://github.com/github/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"master\" branch pushed to \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub pull-request -m hereyougo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 445,
        "test_case": "Create pull request to \"upstream\" remote with differently-named default branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"master\" branch pushed to \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"upstream\" remote has url \"git://github.com/github/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the default branch for \"upstream\" is \"develop\"",
                "step_definition": "do\ncd(\".\") {\n  ref_file = \".git/refs/remotes/#{remote}/#{branch}\"\n  unless File.exist?(ref_file)\n    unless File.exist?(\".git/refs/heads/master\")\n      empty_commit\n    end\n    FileUtils.mkdir_p(File.dirname(ref_file))\n    FileUtils.cp(\".git/refs/heads/master\", ref_file)\n  end\n}\nrun_ignored_command(\"git remote set-head #{remote} #{branch}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub pull-request -m hereyougo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 446,
        "test_case": "Create pull request to \"github\" remote when \"upstream\" is non-GitHub",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"master\" branch pushed to \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"github\" remote has url \"git://github.com/github/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the \"upstream\" remote has url \"git://example.com/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub pull-request -m hereyougo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 447,
        "test_case": "Create pull request to \"github\" remote when \"origin\" is non-GitHub",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"github\" remote has url \"git@github.com:sam-hart-swanson/debug.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"origin\" remote has url \"ssh://git@private.server.com/path/to/repo.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"feat/123-some-branch\" branch pushed to \"github/feat/123-some-branch\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "an empty file named \".git/refs/remotes/origin/feat/123-some-branch\"",
                "step_definition": "do\nwrite_file(file_name, \"\")\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 5,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `hub pull-request -m hereyougo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 448,
        "test_case": "Open pull request in web browser",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -o -m hereyougo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"open the://url\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 449,
        "test_case": "Current branch is tracking local branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "git \"push.default\" is set to \"upstream\"",
                "step_definition": "do\nrun_ignored_command(\"git config #{key} \\\"#{value}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"feature\" branch pushed to \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `git config branch.feature.remote .`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `git config branch.feature.merge refs/heads/master`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `hub pull-request -m hereyougo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 450,
        "test_case": "Current branch is pushed to remote without upstream configuration",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"upstream\" remote has url \"git://github.com/lestephane/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"feature\" branch pushed to \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "git \"push.default\" is set to \"upstream\"",
                "step_definition": "do\nrun_ignored_command(\"git config #{key} \\\"#{value}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub pull-request -m hereyougo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 451,
        "test_case": "Branch with quotation mark in name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feat'ure\" branch with upstream \"origin/feat'ure\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -m hereyougo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 452,
        "test_case": "Pull request with assignees",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -m hereyougo -a mislav,josh -apcorpet`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 453,
        "test_case": "Pull request with reviewers",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -m hereyougo -r mislav,josh -rgithub/robots -rpcorpet -r github/js`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 454,
        "test_case": "Pull request with reviewers from CODEOWNERS",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -m hereyougo -r mislav,josh -rgithub/robots -rpcorpet -r github/js`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 455,
        "test_case": "Pull request avoids re-requesting reviewers",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -m hereyougo -r mislav,josh -rgithub/robots`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 456,
        "test_case": "Requesting reviewers failed",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub pull-request -m hereyougo -r pedrohc`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 457,
        "test_case": "Pull request with milestone",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -m hereyougo -M \"Hello World!\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 458,
        "test_case": "Pull request with case-insensitive milestone",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -m hereyougo -M \"hello world!\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 459,
        "test_case": "Pull request uses integer milestone number for BC",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -m hereyougo -M 55`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 460,
        "test_case": "Pull request fails with unknown milestone before it's created",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub pull-request -m hereyougo -M \"unknown\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly \"error: no milestone found with name 'unknown'\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 461,
        "test_case": "Pull request with labels",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -m hereyougo -l feature,release -ldocs`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 462,
        "test_case": "Pull request to a fetch-only upstream",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"upstream\" remote has url \"git://github.com/github/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"upstream\" remote has push url \"no_push\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"master\" branch pushed to \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub pull-request -m hereyougo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 463,
        "test_case": "Pull request with 307 redirect",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"https://github.com/mislav/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"feature\" branch pushed to \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub pull-request -m hereyougo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 464,
        "test_case": "Pull request with 301 redirect",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"https://github.com/mislav/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"feature\" branch pushed to \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I run `hub pull-request -m hereyougo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 465,
        "test_case": "Default message with --push",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the git commit editor is \"true\"",
                "step_definition": "do\nset_environment_variable(\"GIT_EDITOR\", cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"master\" branch pushed to \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `git checkout --quiet -b topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "I make a commit with message \"The commit I never pushed\"",
                "step_definition": "do\nnum = if num == \"a\"\n  1\nelse\n  num.to_i\nend\nnum.times {\n  empty_commit(msg)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `hub pull-request -p`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 8,
                "step_name": "\"git push --set-upstream origin HEAD:topic\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 466,
        "test_case": "Text editor fails with --push",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the text editor exits with error status",
                "step_definition": "do\ntext_editor_script(\"exit 1\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"master\" branch pushed to \"origin/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "an empty file named \".git/PULLREQ_EDITMSG\"",
                "step_definition": "do\nwrite_file(file_name, \"\")\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `git checkout --quiet -b topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "I make a commit",
                "step_definition": "do\nnum = if num == \"a\"\n  1\nelse\n  num.to_i\nend\nnum.times {\n  empty_commit(msg)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run `hub pull-request -p`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the stderr should contain \"error using text editor for pull request message\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 8,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 9,
                "step_name": "the file \".git/PULLREQ_EDITMSG\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 10,
                "step_name": "\"git push --set-upstream origin HEAD:topic\" should not be run",
                "step_definition": "do\nhistory.each { |h,|\n  expect(h).to_not(include(pattern))\n}\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 467,
        "test_case": "Triangular workflow with --push",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"upstream\" remote has url \"git://github.com/github/coral.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"master\" branch pushed to \"upstream/master\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `git checkout --quiet -b topic`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "I make a commit with message \"Fork commit\"",
                "step_definition": "do\nnum = if num == \"a\"\n  1\nelse\n  num.to_i\nend\nnum.times {\n  empty_commit(msg)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `hub pull-request -p -m hereyougo`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 8,
                "step_name": "\"git push --set-upstream upstream HEAD:topic\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 468,
        "test_case": "Automatically retry when --push resulted in 422",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the default aruba exit timeout is 7 seconds",
                "step_definition": "do\naruba.config.exit_timeout=seconds.to_f\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I am on the \"topic\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub pull-request -p`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should contain exactly \"the://url?tries=3\\n\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 7,
                "step_name": "the file \".git/PULLREQ_EDITMSG\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 469,
        "test_case": "Eventually give up on retries for --push",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the default aruba exit timeout is 7 seconds",
                "step_definition": "do\naruba.config.exit_timeout=seconds.to_f\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "$HUB_RETRY_TIMEOUT is \"5\"",
                "step_definition": "do\nexpanded_value = value.gsub(/\\$([A-Z_]+)/) {\n  aruba.environment.[]($1)\n}\nset_environment_variable(name, expanded_value)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I am on the \"topic\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "I run `hub pull-request -p`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the stderr should contain",
                "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
                "step_definition_file": "features/lib/step_definitions/command_line_steps.rb"
            },
            {
                "step_num": 8,
                "step_name": "the output should match /Given up after retrying for 5\\.\\d seconds\\./",
                "step_definition": "do\nif negated\n  expect(all_commands).not_to(include(have_output(an_output_string_matching(expected))))\nelse\n  expect(all_commands).to(include(have_output(an_output_string_matching(expected))))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 9,
                "step_name": "a file named \".git/PULLREQ_EDITMSG\" should exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 470,
        "test_case": "Draft pull request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -d -m wip`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "pull_request.feature",
        "test_num": 471,
        "test_case": "Disallow edits from maintainers",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"topic\" branch pushed to \"origin/topic\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub pull-request -m hello --no-maintainer-edits`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly \"the://url\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "push.feature",
        "test_num": 472,
        "test_case": "Normal push",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub push`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "push.feature",
        "test_num": 473,
        "test_case": "Push current branch to multiple remotes",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"cool-feature\" branch",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub push origin,staging`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git push origin cool-feature\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git push staging cool-feature\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "push.feature",
        "test_num": 474,
        "test_case": "Push explicit branch to multiple remotes",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub push origin,staging,qa cool-feature`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"git push origin cool-feature\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git push staging cool-feature\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "\"git push qa cool-feature\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "push.feature",
        "test_num": 475,
        "test_case": "Push multiple refs to multiple remotes",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub push origin,staging master new-feature`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"git push origin master new-feature\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git push staging master new-feature\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 476,
        "test_case": "List non-draft releases",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 477,
        "test_case": "List non-prerelease releases",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release --exclude-prereleases`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 478,
        "test_case": "List all releases",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release --include-drafts`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 479,
        "test_case": "Fetch releases across multiple pages",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 480,
        "test_case": "List limited number of releases",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release -L 2`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 481,
        "test_case": "Pretty-print releases",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release --include-drafts --format='%t (%S)%n'`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 482,
        "test_case": "Repository not found when listing releases",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub release`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 483,
        "test_case": "Server error when listing releases",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub release`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 484,
        "test_case": "Show specific release",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release show v1.2.0`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 485,
        "test_case": "Show specific release including downloads",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release show v1.2.0 --show-downloads`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 486,
        "test_case": "Format specific release",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release show v1.2.0 --format='%t (%T)%n%as%n%n%b%n'`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 487,
        "test_case": "Show release no tag",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub release show`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain \"hub release show\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 488,
        "test_case": "Create a release",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release create -dm \"will_paginate 1.2.0: Instant Gratification Monkey\" v1.2.0`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 489,
        "test_case": "Create a release from file",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "a file named \"message.txt\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub release create -F message.txt v1.2.0`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 490,
        "test_case": "Create a release with target commitish",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release create -m hello v1.2.0 -t my-branch`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 491,
        "test_case": "Create a release with assets",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "a file named \"hello-1.2.0.tar.gz\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub release create -m \"hello\" v1.2.0 -a \"./hello-1.2.0.tar.gz#Hello World\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 492,
        "test_case": "Retry attaching assets on 5xx errors",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "a file named \"hello-1.2.0.tar.gz\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub release create -m \"hello\" v1.2.0 -a hello-1.2.0.tar.gz`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 493,
        "test_case": "Create a release with some assets failing",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "a file named \"one\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 3,
                "step_name": "a file named \"two\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 4,
                "step_name": "a file named \"three\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 5,
                "step_name": "I run `hub release create -m \"m\" v1.2.0 -a one -a two -a three`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 494,
        "test_case": "Create a release with nonexistent asset",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub release create -m \"hello\" v1.2.0 -a \"idontexis.tgz\"`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 495,
        "test_case": "Open new release in web browser",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release create -o -m hello v1.2.0`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "\"open https://github.com/mislav/will_paginate/releases/v1.2.0\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 496,
        "test_case": "Create release no tag",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub release create -m hello`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain \"hub release create\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 497,
        "test_case": "Edit existing release",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git commit editor is \"vim\"",
                "step_definition": "do\nset_environment_variable(\"GIT_EDITOR\", cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the text editor adds",
                "step_definition": "do\ntext_editor_script(<<-HEREDOC)\n    file=\"$3\"\n    contents=\"$(cat \"$file\" 2>/dev/null || true)\"\n    { echo \"#{text}\"\n      echo\n      echo \"$contents\"\n    } > \"$file\"\nHEREDOC\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub release edit --draft=false v1.2.0`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 498,
        "test_case": "Edit existing release when there is a fork",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"doge\" remote has url \"git://github.com/doge/will_paginate.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am on the \"feature\" branch with upstream \"doge/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub release edit -m \"\" v1.2.0`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 499,
        "test_case": "Edit existing release no title",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "a file named \"message.txt\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 3,
                "step_name": "I run `hub release edit v1.2.0 -F message.txt`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 500,
        "test_case": "Edit existing release by uploading assets",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "a file named \"hello-1.2.0.tar.gz\" with",
                "step_definition": "do\nwrite_file(file_name, file_content)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub release edit -m \"\" v1.2.0 -a hello-1.2.0.tar.gz`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 501,
        "test_case": "Edit release no tag",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub release edit -m hello`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain \"hub release edit\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 502,
        "test_case": "Download a release asset",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release download v1.2.0`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the file \"hello-1.2.0.tar.gz\" should contain exactly",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(content))\nelse\n  expect(file).to(have_file_content(content))\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 503,
        "test_case": "Download release assets that match pattern",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release download v1.2.0 --include '*amd*'`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the file \"hello-x86-1.2.0.tar.gz\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 504,
        "test_case": "Glob pattern allows exact match",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release download v1.2.0 --include hello-amd32-1.2.0.tar.gz`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 4,
                "step_name": "the file \"hello-amd32-1.2.0.tar.gz\" should contain exactly",
                "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(content))\nelse\n  expect(file).to(have_file_content(content))\nend\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 5,
                "step_name": "the file \"hello-amd64-1.2.0.tar.gz\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 6,
                "step_name": "the file \"hello-x86-1.2.0.tar.gz\" should not exist",
                "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
                "step_definition_file": "file.rb"
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 505,
        "test_case": "Advanced glob pattern",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release download v1.2.0 --include '*-amd32-?.?.[01].tar.gz'`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 506,
        "test_case": "No matches for download pattern",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub release download v1.2.0 --include amd32`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 507,
        "test_case": "Download release no tag",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I run `hub release download`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the stderr should contain \"hub release download\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 508,
        "test_case": "Delete a release",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub release delete v1.2.0`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 509,
        "test_case": "Release not found",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub release delete v2.0`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "release.feature",
        "test_num": 510,
        "test_case": "Enterprise list releases",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the \"origin\" remote has url \"git@git.my.org:mislav/will_paginate.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I am \"mislav\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub release`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 511,
        "test_case": "Add origin remote for my own repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "there are no remotes",
                "step_definition": "do\noutput = run_ignored_command(\"git remote\")\nexpect(output).to(be_empty)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub remote add origin`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"origin\" should be \"https://github.com/EvilChelu/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 512,
        "test_case": "Add origin remote for my own repo using -C",
        "steps": [
            {
                "step_num": 1,
                "step_name": "there are no remotes",
                "step_definition": "do\noutput = run_ignored_command(\"git remote\")\nexpect(output).to(be_empty)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I cd to \"..\"",
                "step_definition": "do\ncd(dir)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub -C dotfiles remote add origin`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I cd to \"dotfiles\"",
                "step_definition": "do\ncd(dir)\nend",
                "step_definition_file": "file.rb"
            },
            {
                "step_num": 5,
                "step_name": "the url for \"origin\" should be \"https://github.com/EvilChelu/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 6,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 513,
        "test_case": "Unchanged public remote add",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub remote add origin http://github.com/defunkt/resque.git`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the url for \"origin\" should be \"http://github.com/defunkt/resque.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 514,
        "test_case": "Unchanged private remote add",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub remote add origin git@github.com:defunkt/resque.git`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the url for \"origin\" should be \"git@github.com:defunkt/resque.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 515,
        "test_case": "Unchanged local path remote add",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub remote add myremote ./path`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 516,
        "test_case": "Unchanged local absolute path remote add",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub remote add myremote /path`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 517,
        "test_case": "Unchanged remote add with host alias",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub remote add myremote server:/git/repo.git`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the git command should be unchanged",
                "step_definition": "do\nexpect(@commands).to_not(be_empty)\nassert_command_run(@commands.last.sub(/^hub\\b/, \"git\"))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 518,
        "test_case": "Add new remote for Enterprise repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "\"git.my.org\" is a whitelisted Enterprise host",
                "step_definition": "do\nrun_ignored_command(\"git config --global --add hub.host \\\"#{host}\\\"\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am \"ProLoser\" on git.my.org with OAuth token \"FITOKEN\"",
                "step_definition": "do\nedit_hub_config { |cfg,|\n  entry = { \"user\" => name }\n  host = host.sub(/^([\\w-]+):\\/\\//, \"\")\n  if token\n    entry.[]=(\"oauth_token\", token)\n  end\n  if $1\n    entry.[]=(\"protocol\", $1)\n  end\n  cfg.[]=(host.downcase, [entry])\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the \"origin\" remote has url \"git@git.my.org:mislav/topsekrit.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `hub remote add another`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "the url for \"another\" should be \"git@git.my.org:another/topsekrit.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 7,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 519,
        "test_case": "Add public remote",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub remote add mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"mislav\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 520,
        "test_case": "Add detected private remote",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub remote add mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the url for \"mislav\" should be \"git@github.com:mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 521,
        "test_case": "Add remote with push access",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub remote add mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"mislav\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 522,
        "test_case": "Add remote for missing repo",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I run `hub remote add mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the exit status should be 1",
                "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 523,
        "test_case": "Add explicitly private remote",
        "steps": [
            {
                "step_num": 1,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub remote add -p mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"mislav\" should be \"git@github.com:mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 524,
        "test_case": "Remote for my own repo is automatically private",
        "steps": [
            {
                "step_num": 1,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub remote add evilchelu`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"evilchelu\" should be \"git@github.com:EvilChelu/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 525,
        "test_case": "Add remote with arguments",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub remote add -f mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git remote add -f mislav https://github.com/mislav/dotfiles.git\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 526,
        "test_case": "Add remote with branch argument",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub remote add -f -t feature mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git remote add -f -t feature mislav https://github.com/mislav/dotfiles.git\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 527,
        "test_case": "Add named public remote",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub remote add mm mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"mm\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 528,
        "test_case": "set-url",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "the \"origin\" remote has url \"https://github.com/evilchelu/dotfiles.git\"",
                "step_definition": "do\nremotes = run_ignored_command(\"git remote\")\nif remotes.split(\"\\n\").include?(remote_name)\n  run_ignored_command(\"git remote set-url #{if push\n  \"--push\"\nend} #{remote_name} \\\"#{url}\\\"\")\nelse\n  run_ignored_command(\"git remote add #{remote_name} \\\"#{url}\\\"\")\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub remote set-url origin mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the url for \"origin\" should be \"https://github.com/mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 5,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 529,
        "test_case": "Add public remote including repo name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub remote add mislav/dotfilez.js`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"mislav\" should be \"https://github.com/mislav/dotfilez.js.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 530,
        "test_case": "Add named public remote including repo name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub remote add mm mislav/dotfilez.js`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"mm\" should be \"https://github.com/mislav/dotfilez.js.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 531,
        "test_case": "Add named private remote",
        "steps": [
            {
                "step_num": 1,
                "step_name": "git protocol is preferred",
                "step_definition": "do\nset_environment_variable(\"HUB_PROTOCOL\", \"git\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub remote add -p mm mislav`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the url for \"mm\" should be \"git@github.com:mislav/dotfiles.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 532,
        "test_case": "Add private remote including repo name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub remote add -p mislav/dotfilez.js`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the url for \"mislav\" should be \"https://github.com/mislav/dotfilez.js.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 533,
        "test_case": "Add named private remote including repo name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub remote add -p mm mislav/dotfilez.js`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the url for \"mm\" should be \"https://github.com/mislav/dotfilez.js.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 534,
        "test_case": "Add named private remote for my own repo including repo name",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub remote add ec evilchelu/dotfilez.js`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the url for \"ec\" should be \"https://github.com/EvilChelu/dotfilez.js.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all remote.#{name}.url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "the output should not contain anything",
                "step_definition": "do\nmatcher = case channel\nwhen \"output\"\n  :have_output\nwhen \"stderr\"\n  :have_output_on_stderr\nwhen \"stdout\"\n  :have_output_on_stdout\nend\nexpect(all_commands).to(include(send(matcher, be_nil.or(be_empty))))\nend",
                "step_definition_file": "command.rb"
            }
        ]
    },
    {
        "feature_file": "remote_add.feature",
        "test_num": 535,
        "test_case": "Avoid crash in argument parsing",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub --noop remote add a b evilchelu`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should contain exactly \"git remote add a b evilchelu\\n\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "submodule_add.feature",
        "test_num": 536,
        "test_case": "Add public submodule",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub submodule add mojombo/grit vendor/grit`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the \"vendor/grit\" submodule url should be \"https://github.com/mojombo/grit.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all submodule.\\\"#{name}\\\".url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "submodule_add.feature",
        "test_num": 537,
        "test_case": "Add private submodule",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub submodule add -p mojombo/grit vendor/grit`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the \"vendor/grit\" submodule url should be \"https://github.com/mojombo/grit.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all submodule.\\\"#{name}\\\".url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "submodule_add.feature",
        "test_num": 538,
        "test_case": "A submodule for my own repo is public nevertheless",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub submodule add grit vendor/grit`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "the \"vendor/grit\" submodule url should be \"https://github.com/mislav/grit.git\"",
                "step_definition": "do\noutput = run_ignored_command(\"git config --get-all submodule.\\\"#{name}\\\".url\")\nexpect(output).to(include(url))\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "submodule_add.feature",
        "test_num": 539,
        "test_case": "Add submodule with arguments",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub submodule add -b foo --name grit mojombo/grit vendor/grit`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git submodule add -b foo --name grit https://github.com/mojombo/grit.git vendor/grit\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "submodule_add.feature",
        "test_num": 540,
        "test_case": "Add submodule with branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "the GitHub API server",
                "step_definition": "do\n@server = Hub::LocalServer.start_sinatra {\n  eval(endpoints_str, binding)\n}\nset_environment_variable(\"HUB_TEST_HOST\", \"http://127.0.0.1:#{@server.port}\")\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `hub submodule add --branch foo mojombo/grit vendor/grit`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "\"git submodule add --branch foo https://github.com/mojombo/grit.git vendor/grit\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "sync.feature",
        "test_num": 541,
        "test_case": "Prunes remote branches",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I successfully run `hub sync`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 2,
                "step_name": "the output should contain exactly \"\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 3,
                "step_name": "\"git fetch --prune --quiet --progress origin\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "sync.feature",
        "test_num": 542,
        "test_case": "Fast-forwards currently checked out local branch",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch pushed to \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `git reset -q --hard HEAD^`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub sync`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the output should contain \"Updated branch feature\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 5,
                "step_name": "\"git merge --ff-only --quiet refs/remotes/origin/feature\" should be run",
                "step_definition": "do\nassert_command_run(cmd)\nend",
                "step_definition_file": "features/steps.rb"
            }
        ]
    },
    {
        "feature_file": "sync.feature",
        "test_num": 543,
        "test_case": "Fast-forwards other local branches in the background",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch pushed to \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `git reset -q --hard HEAD^`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am on the \"bugfix\" branch pushed to \"origin/bugfix\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `git reset -q --hard HEAD^`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `git checkout -q master`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `hub sync`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "the output should contain \"Updated branch feature\"",
                "step_definition": null,
                "step_definition_file": null
            },
            {
                "step_num": 8,
                "step_name": "the output should contain \"Updated branch bugfix\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "sync.feature",
        "test_num": 544,
        "test_case": "Refuses to update local branch which has diverged from upstream",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch pushed to \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I make a commit with message \"diverge\"",
                "step_definition": "do\nnum = if num == \"a\"\n  1\nelse\n  num.to_i\nend\nnum.times {\n  empty_commit(msg)\n}\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `hub sync`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "sync.feature",
        "test_num": 545,
        "test_case": "Deletes local branch that had its upstream deleted",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `git checkout -q master`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `git merge --no-ff --no-edit feature`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `git update-ref refs/remotes/origin/master HEAD`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "I successfully run `rm .git/refs/remotes/origin/feature`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 6,
                "step_name": "I successfully run `git checkout -q feature`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 7,
                "step_name": "I successfully run `hub sync`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 8,
                "step_name": "the output should contain \"Deleted branch feature\"",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "sync.feature",
        "test_num": 546,
        "test_case": "Refuses to delete local branch whose upstream was deleted but not merged to master",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am on the \"feature\" branch with upstream \"origin/feature\"",
                "step_definition": "do\nrun_ignored_command(\"git checkout --quiet -b #{shell_escape(name)}\")\nempty_commit\nif upstream\n  full_upstream = if upstream.start_with?(\"refs/\")\n    upstream\n  else\n    \"refs/remotes/#{upstream}\"\n  end\n  run_ignored_command(\"git update-ref #{shell_escape(full_upstream)} HEAD\")\n  if type == \"with upstream\"\n    run_ignored_command(\"git branch --set-upstream-to #{shell_escape(upstream)}\")\n  end\nend\nend",
                "step_definition_file": "features/steps.rb"
            },
            {
                "step_num": 2,
                "step_name": "I successfully run `rm .git/refs/remotes/origin/feature`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 3,
                "step_name": "I successfully run `git update-ref refs/remotes/origin/master master`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 4,
                "step_name": "I successfully run `hub sync`",
                "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
                "step_definition_file": "command.rb"
            },
            {
                "step_num": 5,
                "step_name": "the stderr should contain exactly",
                "step_definition": null,
                "step_definition_file": null
            }
        ]
    },
    {
        "feature_file": "zsh_completion.feature",
        "test_num": 547,
        "test_case": "\"pu\" expands to \"pull-request\" after \"pull\"",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I type \"git pu\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "the completion menu should offer \"pull-request\" with description \"open a pull request on GitHub\"",
                "step_definition": "do\nmenu = tmux_completion_menu\nexpect(menu.keys).to(include(item))\nexpect(menu.[](item)).to(eq(description))\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 3,
                "step_name": "I press <Tab> again",
                "step_definition": "do\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 4,
                "step_name": "the command should expand to \"git pull\"",
                "step_definition": "do\ntmux_wait_for_completion\nexpect(tmux_pane_contents).to(match(/^\\$ #{cmd}$/))\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 5,
                "step_name": "I press <Tab> again",
                "step_definition": "do\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 6,
                "step_name": "the command should expand to \"git pull-request\"",
                "step_definition": "do\ntmux_wait_for_completion\nexpect(tmux_pane_contents).to(match(/^\\$ #{cmd}$/))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    },
    {
        "feature_file": "zsh_completion.feature",
        "test_num": 548,
        "test_case": "\"ci-\" expands to \"ci-status\"",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I type \"git ci-\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "the command should expand to \"git ci-status\"",
                "step_definition": "do\ntmux_wait_for_completion\nexpect(tmux_pane_contents).to(match(/^\\$ #{cmd}$/))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    },
    {
        "feature_file": "zsh_completion.feature",
        "test_num": 549,
        "test_case": "Completion of pull-request arguments",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I type \"git pull-request -\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "the completion menu should offer",
                "step_definition": "do\nmenu = tmux_completion_menu\nexpect(menu).to(eq(table.rows_hash))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    },
    {
        "feature_file": "zsh_completion.feature",
        "test_num": 550,
        "test_case": "Completion of fork arguments",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I type \"git fork -\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "the command should expand to \"git fork --no-remote\"",
                "step_definition": "do\ntmux_wait_for_completion\nexpect(tmux_pane_contents).to(match(/^\\$ #{cmd}$/))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    },
    {
        "feature_file": "zsh_completion.feature",
        "test_num": 551,
        "test_case": "Completion of 2nd browse argument",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I type \"git browse -- i\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "the command should expand to \"git browse -- issues\"",
                "step_definition": "do\ntmux_wait_for_completion\nexpect(tmux_pane_contents).to(match(/^\\$ #{cmd}$/))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    },
    {
        "feature_file": "zsh_completion.feature",
        "test_num": 552,
        "test_case": "\"ci-\" expands to \"ci-status\"",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I'm using git-distributed base git completions",
                "step_definition": "do\nlink_completion.call(zsh_completion, \"_hub\")\ncase type\nwhen \"zsh-distributed\"\n  if \"bash\" == shell\n    raise(\"this combination makes no sense!\")\n  end\n  expect((cpldir + \"_git\")).to_not(be_exist)\nwhen \"git-distributed\"\n  if \"zsh\" == shell\n    if git_zsh_completion = git_distributed_zsh_completion.call\n      link_completion.call(git_zsh_completion, \"_git\")\n      link_completion.call(git_distributed_bash_completion.call, \"git-completion.bash\")\n    else\n      warn(\"warning: git-distributed zsh completion wasn't found; using zsh-distributed instead\")\n    end\n  end\n  if \"bash\" == shell\n    unless git_distributed_bash_completion.call\n      raise(\"git-distributed bash completion wasn't found. Completion won't work.\")\n    end\n  end\nelse\n  raise(ArgumentError, type)\nend\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 2,
                "step_name": "I type \"git ci-\" and press <Tab>",
                "step_definition": "do\ntmux_wait_for_prompt\n@last_command = string\ntmux_send_keys(string)\ntmux_send_tab\nend",
                "step_definition_file": "features/support/completion.rb"
            },
            {
                "step_num": 3,
                "step_name": "the command should expand to \"git ci-status\"",
                "step_definition": "do\ntmux_wait_for_completion\nexpect(tmux_pane_contents).to(match(/^\\$ #{cmd}$/))\nend",
                "step_definition_file": "features/support/completion.rb"
            }
        ]
    }
]