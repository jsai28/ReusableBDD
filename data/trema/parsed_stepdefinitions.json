{
  "^the switch \"(.*?)\" has (\\d+) flow entr(?:y|ies)$": {
    "Code": "do\ncommand = \"trema dump_flows #{switch}\"\nstep(\"I successfully run `#{command}`\")\ndump_flows = aruba.command_monitor.find(Aruba.platform.detect_ruby(command))\nexpect(dump_flows.output.split(\"\\n\").size).to(eq(number.to_i))\nend",
    "File": "features/step_definitions/dump_flows_steps.rb"
  },
  "^the switch \"(.*?)\" has no flow entry$": {
    "Code": "do\nstep(\"the switch \\\"#{switch}\\\" has 0 flow entry\")\nend",
    "File": "features/step_definitions/dump_flows_steps.rb"
  },
  "^I send and accept JSON$": {
    "Code": "do\nheader(\"Accept\", \"application/json\")\nheader(\"Cotent-Type\", \"application/json\")\nend",
    "File": "features/step_definitions/rest_api_steps.rb"
  },
  "^I send a GET request for \"([^\\\"]*)\"$": {
    "Code": "do\ncd(\".\") {\n  get(path)\n}\nend",
    "File": "features/step_definitions/rest_api_steps.rb"
  },
  "^I send a POST request for \"([^\\\"]*)\" with body \"([^\\\"]*)\"$": {
    "Code": "do\ncd(\".\") {\n  post(path, Object.instance_eval(body))\n}\nend",
    "File": "features/step_definitions/rest_api_steps.rb"
  },
  "^I send a DELETE request for \"([^\\\"]*)\" with body \"([^\\\"]*)\"$": {
    "Code": "do\ncd(\".\") {\n  delete(path, Object.instance_eval(body))\n}\nend",
    "File": "features/step_definitions/rest_api_steps.rb"
  },
  "^the response should be \"([^\\\"]*)\"$": {
    "Code": "do\nexpect(last_response.status).to(eq(status.to_i))\nend",
    "File": "features/step_definitions/rest_api_steps.rb"
  },
  "^the JSON response should be \"([^\\\"]*)\"$": {
    "Code": "do\nexpect(JSON.parse(last_response.body)).to(eq(JSON.parse(json)))\nend",
    "File": "features/step_definitions/rest_api_steps.rb"
  },
  "^the JSON response should be:$": {
    "Code": "do\nexpect(JSON.parse(last_response.body)).to(eq(JSON.parse(json)))\nend",
    "File": "features/step_definitions/rest_api_steps.rb"
  },
  "^the number of packets sent from \"(.*?)\" should be:$": {
    "Code": "do\ncommand = \"trema show_stats #{host_name}\"\nstep(\"I run `#{command}`\")\nresult = {}\ncd(\".\") {\n  output_from(command).split(\"\\n\").each { |each,|\n    case each\n    when /Packets sent/\n      next\n    when /Packets recevied/\n      break\n    when /-> (\\S+) = (\\d+) packet/\n      result.[]=(Regexp.last_match(1), Regexp.last_match(2).to_i)\n    else\n      raise(\"Failed to parse line '#{each}'\")\n    end\n  }\n}\ntable.hashes.each { |each,|\n  ip_address = each.fetch(\"destination\")\n  expect(result.fetch(ip_address)).to(eq(each.fetch(\"#packets\").to_i))\n}\nend",
    "File": "features/step_definitions/show_stats_steps.rb"
  },
  "^the number of packets received by \"(.*?)\" should be:$": {
    "Code": "do\ncommand = \"trema show_stats #{host_name}\"\nstep(\"I run `#{command}`\")\noutput = aruba.command_monitor.find(Aruba.platform.detect_ruby(command)).output\nresult = Hash.new(0)\ncd(\".\") {\n  received = false\n  output.split(\"\\n\").each { |each,|\n    case each\n    when /Packets sent/\n      next\n    when /Packets received/\n      received = true\n      next\n    when /(\\S+) -> (\\S+) = (\\d+) packet/\n      unless received\n        next\n      end\n      result.[]=(Regexp.last_match(1), Regexp.last_match(3).to_i)\n    else\n      raise(\"Failed to parse line '#{each}'\")\n    end\n  }\n}\ntable.hashes.each { |each,|\n  ip_address = each.fetch(\"source\")\n  expect(result.[](ip_address)).to(eq(each.fetch(\"#packets\").to_i))\n}\nend",
    "File": "features/step_definitions/show_stats_steps.rb"
  },
  "^the total number of received packets should be:$": {
    "Code": "do\ntable.hashes.[](0).each_pair { |host_name, npackets|\n  command = \"trema show_stats #{host_name}\"\n  step(\"I run `#{command}`\")\n  result = 0\n  cd(\".\") {\n    received = false\n    output_from(command).split(\"\\n\").each { |each,|\n      case each\n      when /Packets sent/\n        next\n      when /Packets received/\n        received = true\n        next\n      when /(\\S+) -> (\\S+) = (\\d+) packet/\n        unless received\n          next\n        end\n        result += Regexp.last_match(3).to_i\n      else\n        raise(\"Failed to parse line '#{each}'\")\n      end\n    }\n  }\n  expect(result).to(eq(npackets.to_i))\n}\nend",
    "File": "features/step_definitions/show_stats_steps.rb"
  },
  "^I trema run \"([^\"]*)\"$": {
    "Code": "do\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nstep(\"I run `trema run #{controller_path} -d`\")\nend",
    "File": "features/step_definitions/trema_run_steps.rb"
  },
  "^I trema run \"([^\"]*)\" with args \"([^\"]*)\"$": {
    "Code": "do\nstep(\"I run `trema run #{controller} #{args}`\")\nstep(\"sleep 5\")\nend",
    "File": "features/step_definitions/trema_run_steps.rb"
  },
  "^I successfully trema run \"([^\"]*)\" with args \"([^\"]*)\"$": {
    "Code": "do\nstep(\"I successfully run `trema run #{controller} #{args}`\")\nstep(\"sleep 5\")\nend",
    "File": "features/step_definitions/trema_run_steps.rb"
  },
  "^I trema run \"([^\"]*)\" interactively$": {
    "Code": "do\nstep(\"I run `trema run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
    "File": "features/step_definitions/trema_run_steps.rb"
  },
  "^I trema \"([^\"]*)\" run \"([^\"]*)\" interactively$": {
    "Code": "do\nstep(\"I run `trema #{global_option} run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
    "File": "features/step_definitions/trema_run_steps.rb"
  },
  "^I trema run \"([^\"]*)\" with args \"([^\"]*)\" interactively$": {
    "Code": "do\nstep(\"I run `trema run #{controller} #{args}` interactively\")\nstep(\"sleep 2\")\nend",
    "File": "features/step_definitions/trema_run_steps.rb"
  },
  "^I trema run \"([^\"]*)\"( interactively)? with the configuration \"([^\"]*)\"$": {
    "Code": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
    "File": "features/step_definitions/trema_run_steps.rb"
  },
  "^I use OpenFlow 1\\.0$": {
    "Code": "do\n@open_flow_version = :open_flow10\nend",
    "File": "features/step_definitions/trema_steps.rb"
  },
  "^I use OpenFlow 1\\.3$": {
    "Code": "do\n@open_flow_version = :open_flow13\nend",
    "File": "features/step_definitions/trema_steps.rb"
  },
  "^a socket directory named \"([^\"]*)\"$": {
    "Code": "do\nstep(\"a directory named \\\"#{socket_directory}\\\"\")\nENV.[]=(\"TREMA_SOCKET_DIR\", socket_directory)\nend",
    "File": "features/step_definitions/trema_steps.rb"
  },
  "^a socket file named \"([^\"]*)\" should exist$": {
    "Code": "do\ncd(\".\") {\n  expect(FileTest.socket?(socket_file)).to(be_truthy)\n}\nend",
    "File": "features/step_definitions/trema_steps.rb"
  },
  "^I trema killall \"([^\"]*)\"$": {
    "Code": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
    "File": "features/step_definitions/trema_steps.rb"
  },
  "^I delete the link between \"([^\"]*)\" and \"([^\"]*)\"$": {
    "Code": "do\nstep(\"I successfully run `trema delete_link #{peer1} #{peer2}`\")\nstep(\"sleep 3\")\nend",
    "File": "features/step_definitions/trema_steps.rb"
  },
  "^the log file \"([^\"]*)\" should contain following messages:$": {
    "Code": "do\nstep(\"a file named \\\"#{log_file}\\\" should exist\")\nmessages.rows.flatten.each { |each,|\n  step(\"the file \\\"#{log_file}\\\" should contain \\\"#{each}\\\"\")\n}\nend",
    "File": "features/step_definitions/trema_steps.rb"
  },
  "^the command returns immediately$": {
    "Code": "do\n\nend",
    "File": "features/step_definitions/trema_steps.rb"
  },
  "^sleep (\\d+)$": {
    "Code": "do\nsleep(time.to_i)\nend",
    "File": "features/step_definitions/trema_steps.rb"
  },
  "^virtual links should not exist$": {
    "Code": "do\nstep(\"I run `bash -c 'ifconfig | grep \\\"^link[0-9]+-[0-9]+\\\" > virtual_links.txt'`\")\nstep(\"'the file \\\"virtual_links.txt\\\" should not contain \\\"link\\\"'\")\nend",
    "File": "features/step_definitions/trema_steps.rb"
  }
}