[
  {
    "feature_file": "log_file_naming.feature",
    "test_num": 1,
    "test_case": "controller and vhost creates its log file",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use a fixture named \"event_logger\"",
        "step_definition": "do\ncopy(File.join(aruba.config.fixtures_path_prefix, name), name)\ncd(name)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "a file named \"trema.conf\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 3,
        "step_name": "I run `trema run event_logger.rb -c trema.conf` interactively",
        "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "I stop the command if stderr contains",
        "step_definition": "do\nTimeout.timeout(aruba.config.exit_timeout) {\n  loop {\n    output = last_command_started.public_send(channel.to_sym, { wait_for_io: 0 })\n    output = sanitize_text(output)\n    expected = sanitize_text(expected)\n    if output.include?(expected)\n      last_command_started.terminate\n      break\n    end\n    sleep(0.1)\n  }\n} rescue last_command_started.terminate\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 5,
        "step_name": "the following files should exist",
        "step_definition": "do\nfiles = files.raw.flatten\nif negated\n  expect(files).not_to(include(an_existing_file))\nelse\n  expect(files).to(all(be_an_existing_file))\nend\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 6,
        "step_name": "the file \"EventLogger.log\" should contain",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "log_file_naming.feature",
    "test_num": 2,
    "test_case": "aliasing vhost changes its log file name",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use a fixture named \"event_logger\"",
        "step_definition": "do\ncopy(File.join(aruba.config.fixtures_path_prefix, name), name)\ncd(name)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "a file named \"trema.conf\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 3,
        "step_name": "I run `trema run event_logger.rb -c trema.conf` interactively",
        "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "I stop the command if stderr contains",
        "step_definition": "do\nTimeout.timeout(aruba.config.exit_timeout) {\n  loop {\n    output = last_command_started.public_send(channel.to_sym, { wait_for_io: 0 })\n    output = sanitize_text(output)\n    expected = sanitize_text(expected)\n    if output.include?(expected)\n      last_command_started.terminate\n      break\n    end\n    sleep(0.1)\n  }\n} rescue last_command_started.terminate\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 5,
        "step_name": "the following files should exist",
        "step_definition": "do\nfiles = files.raw.flatten\nif negated\n  expect(files).not_to(include(an_existing_file))\nelse\n  expect(files).to(all(be_an_existing_file))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "log_file_naming.feature",
    "test_num": 3,
    "test_case": "run multiple controllers, and each have its own log file",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a file named \"two_controllers.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I run `trema run two_controllers.rb` interactively",
        "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "I stop the command if stderr contains",
        "step_definition": "do\nTimeout.timeout(aruba.config.exit_timeout) {\n  loop {\n    output = last_command_started.public_send(channel.to_sym, { wait_for_io: 0 })\n    output = sanitize_text(output)\n    expected = sanitize_text(expected)\n    if output.include?(expected)\n      last_command_started.terminate\n      break\n    end\n    sleep(0.1)\n  }\n} rescue last_command_started.terminate\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the following files should exist",
        "step_definition": "do\nfiles = files.raw.flatten\nif negated\n  expect(files).not_to(include(an_existing_file))\nelse\n  expect(files).to(all(be_an_existing_file))\nend\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 5,
        "step_name": "the file \"ParentController.log\" should contain \"I am parent controller\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 6,
        "step_name": "the file \"ChildController.log\" should contain \"I am child controller\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "send_flow_mod_add.feature",
    "test_num": 4,
    "test_case": "Controller#send_flow_mod_add (OpenFlow 1.0)",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a file named \"flow_mod_controller10.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I successfully run `trema run flow_mod_controller10.rb -c trema.conf -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "sleep 5",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"FlowModController10.log\" should contain \"Sent a FlowMod successfully\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "send_flow_mod_add.feature",
    "test_num": 5,
    "test_case": "Controller#send_flow_mod_add (OpenFlow 1.3)",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a file named \"flow_mod_controller13.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I successfully run `trema run flow_mod_controller13.rb --openflow13 -c trema.conf -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "sleep 5",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"FlowModController13.log\" should contain \"Sent a FlowMod successfully\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "barrier_reply.feature",
    "test_num": 6,
    "test_case": "invoke barrier_reply handler",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use OpenFlow 1.0",
        "step_definition": "do\n@open_flow_version = :open_flow10\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"barrier_reply.rb\" with the configuration \"trema.conf\"",
        "step_definition": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"BarrierReply.log\" should contain \"barrier_reply handler is invoked\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "barrier_reply.feature",
    "test_num": 7,
    "test_case": "invoke barrier_reply handler",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use OpenFlow 1.3",
        "step_definition": "do\n@open_flow_version = :open_flow13\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"barrier_reply.rb\" with the configuration \"trema.conf\"",
        "step_definition": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"BarrierReply.log\" should contain \"barrier_reply handler is invoked\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "description_stats_reply.feature",
    "test_num": 8,
    "test_case": "invoke description_reply handler",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use OpenFlow 1.0",
        "step_definition": "do\n@open_flow_version = :open_flow10\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"description_stats_reply.rb\" with the configuration \"trema.conf\"",
        "step_definition": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"DescriptionStatsReply.log\" should contain \"description_stats_reply handler is invoked\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "description_stats_reply.feature",
    "test_num": 9,
    "test_case": "invoke barrier_reply handler",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use OpenFlow 1.3",
        "step_definition": "do\n@open_flow_version = :open_flow13\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"barrier_reply.rb\" with the configuration \"trema.conf\"",
        "step_definition": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"BarrierReply.log\" should contain \"barrier_reply handler is invoked\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "echo_reply.feature",
    "test_num": 10,
    "test_case": "invoke echo_reply handler",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use OpenFlow 1.0",
        "step_definition": "do\n@open_flow_version = :open_flow10\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"echo_reply.rb\" with the configuration \"trema.conf\"",
        "step_definition": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"EchoReply.log\" should contain \"echo_reply handler is invoked\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "echo_reply.feature",
    "test_num": 11,
    "test_case": "invoke echo_reply handler (OpenFlow 1.3)",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use OpenFlow 1.3",
        "step_definition": "do\n@open_flow_version = :open_flow13\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"echo_reply.rb\" with the configuration \"trema.conf\"",
        "step_definition": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"EchoReply.log\" should contain \"echo_reply handler is invoked\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "hello_failed.feature",
    "test_num": 12,
    "test_case": "invoke hello_failed handler",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use OpenFlow 1.0",
        "step_definition": "do\n@open_flow_version = :open_flow10\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "a file named \"version_mismatch.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 3,
        "step_name": "I trema run \"hello_fails.rb\" with the configuration \"trema.conf\"",
        "step_definition": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"HelloFails.log\" should contain \"Hello failed.\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "hello_failed.feature",
    "test_num": 13,
    "test_case": "invoke hello_failed handler (OpenFlow 1.3)",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use OpenFlow 1.3",
        "step_definition": "do\n@open_flow_version = :open_flow13\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "a file named \"version_mismatch.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 3,
        "step_name": "I trema run \"hello_fails.rb\" with the configuration \"trema.conf\"",
        "step_definition": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"HelloFails.log\" should contain \"Hello failed.\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "packet_in.feature",
    "test_num": 14,
    "test_case": "invoke packet_in handler",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a file named \"packet_in_controller.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I successfully run `trema run packet_in_controller.rb -c trema.conf -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "sleep 3",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 4,
        "step_name": "I successfully run `trema send_packets --source host1 --dest host2`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 5,
        "step_name": "the file \"PacketInController.log\" should contain \"new packet_in (dpid = 0xabc)\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "packet_in.feature",
    "test_num": 15,
    "test_case": "invoke packet_in handler (OpenFlow 1.3)",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a file named \"packet_in_controller.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I successfully run `trema run packet_in_controller.rb -c trema.conf --openflow13 -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "sleep 3",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 4,
        "step_name": "I successfully run `trema send_packets --source host1 --dest host2`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 5,
        "step_name": "the file \"PacketInController.log\" should contain \"new packet_in (dpid = 0xabc)\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "start.feature",
    "test_num": 16,
    "test_case": "invoke start handler",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully trema run \"event_logger.rb\" with args \"-d\"",
        "step_definition": "do\nstep(\"I successfully run `trema run #{controller} #{args}`\")\nstep(\"sleep 5\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "the file \"EventLogger.log\" should contain \"args = []\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "start.feature",
    "test_num": 17,
    "test_case": "invoke start handler with args",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully trema run \"event_logger.rb\" with args \"-d -- arg0 arg1 arg2\"",
        "step_definition": "do\nstep(\"I successfully run `trema run #{controller} #{args}`\")\nstep(\"sleep 5\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "the file \"EventLogger.log\" should contain \"args = [arg0, arg1, arg2]\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "start.feature",
    "test_num": 18,
    "test_case": "invoke start handler (OpenFlow 1.3)",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully trema run \"event_logger.rb\" with args \"--openflow13 -d\"",
        "step_definition": "do\nstep(\"I successfully run `trema run #{controller} #{args}`\")\nstep(\"sleep 5\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "the file \"EventLogger.log\" should contain \"args = []\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "start.feature",
    "test_num": 19,
    "test_case": "invoke start handler with args (OpenFlow 1.3)",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully trema run \"event_logger.rb\" with args \"--openflow13 -d -- arg0 arg1 arg2\"",
        "step_definition": "do\nstep(\"I successfully run `trema run #{controller} #{args}`\")\nstep(\"sleep 5\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "the file \"EventLogger.log\" should contain \"args = [arg0, arg1, arg2]\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "switch_disconnected.feature",
    "test_num": 20,
    "test_case": "invoke switch_disconnected handler",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use OpenFlow 1.0",
        "step_definition": "do\n@open_flow_version = :open_flow10\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"switch_disconnected.rb\" with the configuration \"trema.conf\"",
        "step_definition": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "I successfully run `trema stop 0xabc`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"SwitchDisconnected.log\" should contain",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "switch_disconnected.feature",
    "test_num": 21,
    "test_case": "invoke switch_disconnected handler (OpenFlow 1.3)",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use OpenFlow 1.3",
        "step_definition": "do\n@open_flow_version = :open_flow13\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"switch_disconnected.rb\" with the configuration \"trema.conf\"",
        "step_definition": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "I successfully run `trema stop 0xabc`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"SwitchDisconnected.log\" should contain",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "switch_ready.feature",
    "test_num": 22,
    "test_case": "invoke switch_ready handler",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use OpenFlow 1.0",
        "step_definition": "do\n@open_flow_version = :open_flow10\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"switch_ready.rb\" with the configuration \"trema.conf\"",
        "step_definition": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"SwitchReady.log\" should contain \"Hello 0xabc!\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "switch_ready.feature",
    "test_num": 23,
    "test_case": "invoke switch_ready handler (OpenFlow 1.3)",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use OpenFlow 1.3",
        "step_definition": "do\n@open_flow_version = :open_flow13\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"switch_ready.rb\" with the configuration \"trema.conf\"",
        "step_definition": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"SwitchReady.log\" should contain \"Hello 0xabc!\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "debug.feature",
    "test_num": 24,
    "test_case": "the default logging level",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should not contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should not contain \"DEBUG -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "debug.feature",
    "test_num": 25,
    "test_case": "--logging_level debug",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"hello.rb\" with args \"--logging_level debug\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller} #{args}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"DEBUG -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "debug.feature",
    "test_num": 26,
    "test_case": "-v",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema \"-v\" run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema #{global_option} run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"DEBUG -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "debug.feature",
    "test_num": 27,
    "test_case": "--verbose",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema \"--verbose\" run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema #{global_option} run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"DEBUG -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "error.feature",
    "test_num": 28,
    "test_case": "the default logging level",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"ERROR -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "error.feature",
    "test_num": 29,
    "test_case": "--logging_level error",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"hello.rb\" with args \"--logging_level error\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller} #{args}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"ERROR -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "error.feature",
    "test_num": 30,
    "test_case": "--logging_level fatal",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"hello.rb\" with args \"--logging_level fatal\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller} #{args}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should not contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should not contain \"WARN -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "error.feature",
    "test_num": 31,
    "test_case": "-v",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema \"-v\" run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema #{global_option} run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"ERROR -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "error.feature",
    "test_num": 32,
    "test_case": "--verbose",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema \"--verbose\" run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema #{global_option} run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"ERROR -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "fatal.feature",
    "test_num": 33,
    "test_case": "the default logging level",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"FATAL -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "fatal.feature",
    "test_num": 34,
    "test_case": "--logging_level fatal",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"hello.rb\" with args \"--logging_level fatal\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller} #{args}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"FATAL -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "fatal.feature",
    "test_num": 35,
    "test_case": "--logging_level unknown",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"hello.rb\" with args \"--logging_level unknown\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller} #{args}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should not contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should not contain \"FATAL -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "fatal.feature",
    "test_num": 36,
    "test_case": "-v",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema \"-v\" run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema #{global_option} run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"FATAL -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "fatal.feature",
    "test_num": 37,
    "test_case": "--verbose",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema \"--verbose\" run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema #{global_option} run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"FATAL -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "info.feature",
    "test_num": 38,
    "test_case": "the default logging level",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"INFO -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "info.feature",
    "test_num": 39,
    "test_case": "--logging_level info",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"hello.rb\" with args \"--logging_level info\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller} #{args}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"INFO -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "info.feature",
    "test_num": 40,
    "test_case": "--logging_level warn",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"hello.rb\" with args \"--logging_level warn\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller} #{args}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should not contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should not contain \"INFO -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "info.feature",
    "test_num": 41,
    "test_case": "-v",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema \"-v\" run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema #{global_option} run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"INFO -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "info.feature",
    "test_num": 42,
    "test_case": "--verbose",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema \"--verbose\" run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema #{global_option} run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"INFO -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "unknown.feature",
    "test_num": 43,
    "test_case": "the default logging level",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"ANY -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "unknown.feature",
    "test_num": 44,
    "test_case": "--logging_level unknown",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"hello.rb\" with args \"--logging_level unknown\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller} #{args}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"ANY -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "unknown.feature",
    "test_num": 45,
    "test_case": "-v",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema \"-v\" run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema #{global_option} run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"ANY -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "unknown.feature",
    "test_num": 46,
    "test_case": "--verbose",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema \"--verbose\" run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema #{global_option} run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"ANY -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "warn.feature",
    "test_num": 47,
    "test_case": "the default logging level",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"WARN -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "warn.feature",
    "test_num": 48,
    "test_case": "--logging_level warn",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"hello.rb\" with args \"--logging_level warn\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller} #{args}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"WARN -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "warn.feature",
    "test_num": 49,
    "test_case": "--logging_level error",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"hello.rb\" with args \"--logging_level error\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller} #{args}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should not contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should not contain \"WARN -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "warn.feature",
    "test_num": 50,
    "test_case": "-v",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema \"-v\" run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema #{global_option} run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"WARN -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "warn.feature",
    "test_num": 51,
    "test_case": "--verbose",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema \"--verbose\" run \"hello.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema #{global_option} run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema killall \"Hello\"",
        "step_definition": "do\nstep(\"I successfully run `trema killall #{controller}`\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain \"Konnichi Wa\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"Hello.log\" should contain \"WARN -- : Konnichi Wa\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "delete_link.feature",
    "test_num": 52,
    "test_case": "trema delete_link 0xabc host1",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a file named \"packet_in_controller.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "a file named \"trema.conf\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 3,
        "step_name": "I run `trema run packet_in_controller.rb -c trema.conf -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "I successfully run `trema delete_link 0xabc host1`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 5,
        "step_name": "I successfully run `trema send_packets --source host1 --dest host2`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 6,
        "step_name": "the file \"PacketInController.log\" should not contain \"new packet_in\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "dump_flows.feature",
    "test_num": 53,
    "test_case": "dump_flows (no flow entries)",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"noop_controller.rb\" with the configuration \"trema.conf\"",
        "step_definition": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I successfully run `trema dump_flows of_switch`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output from \"trema dump_flows of_switch\" should contain exactly \"\"",
        "step_definition": "do |channel, cmd, expected|\n  matcher = case channel\n            when \"output\"; then :have_output\n            when \"stderr\"; then :have_output_on_stderr\n            when \"stdout\"; then :have_output_on_stdout\n            end\n\n  command = aruba.command_monitor.find(Aruba.platform.detect_ruby(cmd))\n\n  output_string_matcher = :an_output_string_being_eq\n\n  expect(command).to send(matcher, send(output_string_matcher, expected))\nend",
        "step_definition_file": "command.rb"
      }
    ]
  },
  {
    "feature_file": "dump_flows.feature",
    "test_num": 54,
    "test_case": "dump_flows (one flow entry)",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"flow_mod_controller.rb\" with the configuration \"trema.conf\"",
        "step_definition": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I successfully run `trema dump_flows of_switch`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should match",
        "step_definition": "do\nif negated\n  expect(all_commands).not_to(include(have_output(an_output_string_matching(expected))))\nelse\n  expect(all_commands).to(include(have_output(an_output_string_matching(expected))))\nend\nend",
        "step_definition_file": "command.rb"
      }
    ]
  },
  {
    "feature_file": "dump_flows.feature",
    "test_num": 55,
    "test_case": "dump_flows OpenFlow 1.3 (no flow entries)",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use OpenFlow 1.3",
        "step_definition": "do\n@open_flow_version = :open_flow13\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"noop_controller.rb\" with the configuration \"trema.conf\"",
        "step_definition": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "I successfully run `trema dump_flows of_switch`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the output from \"trema dump_flows of_switch\" should contain exactly \"\"",
        "step_definition": "do |channel, cmd, expected|\n  matcher = case channel\n            when \"output\"; then :have_output\n            when \"stderr\"; then :have_output_on_stderr\n            when \"stdout\"; then :have_output_on_stdout\n            end\n\n  command = aruba.command_monitor.find(Aruba.platform.detect_ruby(cmd))\n\n  output_string_matcher = :an_output_string_being_eq\n\n  expect(command).to send(matcher, send(output_string_matcher, expected))\nend",
        "step_definition_file": "command.rb"
      }
    ]
  },
  {
    "feature_file": "dump_flows.feature",
    "test_num": 56,
    "test_case": "dump_flows OpenFlow 1.3 (one flow entry)",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use OpenFlow 1.3",
        "step_definition": "do\n@open_flow_version = :open_flow13\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"flow_mod_controller.rb\" with the configuration \"trema.conf\"",
        "step_definition": "do\nopen_flow_option = if @open_flow_version == :open_flow13\n  \" --openflow13\"\nelse\n  \"\"\nend\ncontroller_path = if controller_file.include?(\"/\")\n  File.join(\"..\", \"..\", controller_file)\nelse\n  controller_file\nend\nrun_arguments = \"#{controller_path}#{open_flow_option} -c #{configuration_file}\"\nif interactive\n  step(\"I run `trema run #{run_arguments}` interactively\")\nelse\n  step(\"I successfully run `trema run #{run_arguments} -d`\")\nend\nstep(\"sleep 10\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "I successfully run `trema dump_flows of_switch`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the output should match",
        "step_definition": "do\nif negated\n  expect(all_commands).not_to(include(have_output(an_output_string_matching(expected))))\nelse\n  expect(all_commands).to(include(have_output(an_output_string_matching(expected))))\nend\nend",
        "step_definition_file": "command.rb"
      }
    ]
  },
  {
    "feature_file": "socket_dir_option.feature",
    "test_num": 57,
    "test_case": "-S option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully run `trema dump_flows of_switch -S .`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "the output should match",
        "step_definition": "do\nif negated\n  expect(all_commands).not_to(include(have_output(an_output_string_matching(expected))))\nelse\n  expect(all_commands).to(include(have_output(an_output_string_matching(expected))))\nend\nend",
        "step_definition_file": "command.rb"
      }
    ]
  },
  {
    "feature_file": "socket_dir_option.feature",
    "test_num": 58,
    "test_case": "--socket_dir option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully run `trema dump_flows of_switch --socket_dir .`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "the output should match",
        "step_definition": "do\nif negated\n  expect(all_commands).not_to(include(have_output(an_output_string_matching(expected))))\nelse\n  expect(all_commands).to(include(have_output(an_output_string_matching(expected))))\nend\nend",
        "step_definition_file": "command.rb"
      }
    ]
  },
  {
    "feature_file": "socket_dir_option.feature",
    "test_num": 59,
    "test_case": "\"No such directory\" error",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I run `trema dump_flows of_switch --socket_dir sock`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the stderr should contain",
        "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      }
    ]
  },
  {
    "feature_file": "all_option.feature",
    "test_num": 60,
    "test_case": "killall --all",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I set the environment variables to",
        "step_definition": "do\ntable.hashes.each { |row,|\n  variable = row.[](\"variable\").to_s\n  value = row.[](\"value\").to_s\n  set_environment_variable(variable, value)\n}\nend",
        "step_definition_file": "environment.rb"
      },
      {
        "step_num": 2,
        "step_name": "a file named \"null_controller.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 3,
        "step_name": "a file named \"void_controller.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 4,
        "step_name": "I successfully run `trema run null_controller.rb -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 5,
        "step_name": "I successfully run `trema run void_controller.rb -p 6654 -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 6,
        "step_name": "I successfully run `trema killall --all`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 7,
        "step_name": "the following files should not exist",
        "step_definition": "do\nfiles = files.raw.flatten\nif negated\n  expect(files).not_to(include(an_existing_file))\nelse\n  expect(files).to(all(be_an_existing_file))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "killall.feature",
    "test_num": 61,
    "test_case": "killall controller_name",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I set the environment variables to",
        "step_definition": "do\ntable.hashes.each { |row,|\n  variable = row.[](\"variable\").to_s\n  value = row.[](\"value\").to_s\n  set_environment_variable(variable, value)\n}\nend",
        "step_definition_file": "environment.rb"
      },
      {
        "step_num": 2,
        "step_name": "a file named \"null_controller.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 3,
        "step_name": "a file named \"trema.conf\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 4,
        "step_name": "a file named \"void_controller.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 5,
        "step_name": "I successfully run `trema run null_controller.rb -c trema.conf -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 6,
        "step_name": "I successfully run `trema run void_controller.rb -p 6654 -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 7,
        "step_name": "I successfully run `trema killall NullController`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 8,
        "step_name": "virtual links should not exist",
        "step_definition": "do\nstep(\"I run `bash -c 'ifconfig | grep \\\"^link[0-9]+-[0-9]+\\\" > virtual_links.txt'`\")\nstep(\"'the file \\\"virtual_links.txt\\\" should not contain \\\"link\\\"'\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 9,
        "step_name": "the following files should not exist",
        "step_definition": "do\nfiles = files.raw.flatten\nif negated\n  expect(files).not_to(include(an_existing_file))\nelse\n  expect(files).to(all(be_an_existing_file))\nend\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 10,
        "step_name": "the following files should exist",
        "step_definition": "do\nfiles = files.raw.flatten\nif negated\n  expect(files).not_to(include(an_existing_file))\nelse\n  expect(files).to(all(be_an_existing_file))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "killall.feature",
    "test_num": 62,
    "test_case": "\"Controller process does not exist\" error",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I run `trema killall NO_SUCH_NAME`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain",
        "step_definition": "do\nexpect(command_line.all_output).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      }
    ]
  },
  {
    "feature_file": "socket_dir_option.feature",
    "test_num": 63,
    "test_case": "-S option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a file named \"null_controller.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I successfully run `trema run null_controller.rb -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "I successfully run `trema killall NullController -S .`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"NullController.pid\" should not exist",
        "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "socket_dir_option.feature",
    "test_num": 64,
    "test_case": "--socket_dir option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a file named \"null_controller.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I successfully run `trema run null_controller.rb -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "I successfully run `trema killall NullController --socket_dir .`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"NullController.pid\" should not exist",
        "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "socket_dir_option.feature",
    "test_num": 65,
    "test_case": "\"Controller process does not exist\" error",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a file named \"null_controller.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I successfully run `trema run null_controller.rb -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "I run `trema killall NullController -S /tmp`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 5,
        "step_name": "the output should contain",
        "step_definition": "do\nexpect(command_line.all_output).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      },
      {
        "step_num": 6,
        "step_name": "the file \"NullController.pid\" should exist",
        "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "netns.feature",
    "test_num": 66,
    "test_case": "netns namespece",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I run `trema netns host1` interactively",
        "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "I type \"ip addr\"",
        "step_definition": "type(unescape_text(input))",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "I type \"exit\"",
        "step_definition": "type(unescape_text(input))",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the stdout should contain \"192.168.1.2\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      }
    ]
  },
  {
    "feature_file": "netns.feature",
    "test_num": 67,
    "test_case": "netns namespece command",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I run `<command>`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "the stdout should contain \"<message>\"",
        "step_definition": "do\ntable.raw.flatten.each { |expected,|\n  _matcher = case channel\n  when \"output\"\n    :have_output\n  when \"stderr\"\n    :have_output_on_stderr\n  when \"stdout\"\n    :have_output_on_stdout\n  end\n  if negated\n    expect(all_commands).not_to(include(have_output(an_output_string_including(expected))))\n  else\n    expect(all_commands).to(include(have_output(an_output_string_including(expected))))\n  end\n}\nend",
        "step_definition_file": "command.rb"
      }
    ]
  },
  {
    "feature_file": "reset_stats.feature",
    "test_num": 68,
    "test_case": "run controller_file",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully run `trema run flood.rb -c trema.conf -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "I successfully run `trema send_packets --source host1 --dest host2`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "I successfully run `trema reset_stats`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "I successfully run `trema show_stats host1`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 5,
        "step_name": "the output from \"trema show_stats host1\" should contain exactly \"\"",
        "step_definition": "do |channel, cmd, expected|\n  matcher = case channel\n            when \"output\"; then :have_output\n            when \"stderr\"; then :have_output_on_stderr\n            when \"stdout\"; then :have_output_on_stdout\n            end\n\n  command = aruba.command_monitor.find(Aruba.platform.detect_ruby(cmd))\n\n  output_string_matcher = :an_output_string_being_eq\n\n  expect(command).to send(matcher, send(output_string_matcher, expected))\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 6,
        "step_name": "I successfully run `trema show_stats host2`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 7,
        "step_name": "the output from \"trema show_stats host2\" should contain exactly \"\"",
        "step_definition": "do |channel, cmd, expected|\n  matcher = case channel\n            when \"output\"; then :have_output\n            when \"stderr\"; then :have_output_on_stderr\n            when \"stdout\"; then :have_output_on_stdout\n            end\n\n  command = aruba.command_monitor.find(Aruba.platform.detect_ruby(cmd))\n\n  output_string_matcher = :an_output_string_being_eq\n\n  expect(command).to send(matcher, send(output_string_matcher, expected))\nend",
        "step_definition_file": "command.rb"
      }
    ]
  },
  {
    "feature_file": "conf_option.feature",
    "test_num": 69,
    "test_case": "-c option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I run `trema run event_logger.rb -c trema.conf` interactively",
        "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "I stop the command if stderr contains",
        "step_definition": "do\nTimeout.timeout(aruba.config.exit_timeout) {\n  loop {\n    output = last_command_started.public_send(channel.to_sym, { wait_for_io: 0 })\n    output = sanitize_text(output)\n    expected = sanitize_text(expected)\n    if output.include?(expected)\n      last_command_started.terminate\n      break\n    end\n    sleep(0.1)\n  }\n} rescue last_command_started.terminate\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"EventLogger.log\" should contain",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "conf_option.feature",
    "test_num": 70,
    "test_case": "--conf option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I run `trema run event_logger.rb --conf trema.conf` interactively",
        "step_definition": "do\nrun_command(sanitize_text(cmd))\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "I stop the command if stderr contains",
        "step_definition": "do\nTimeout.timeout(aruba.config.exit_timeout) {\n  loop {\n    output = last_command_started.public_send(channel.to_sym, { wait_for_io: 0 })\n    output = sanitize_text(output)\n    expected = sanitize_text(expected)\n    if output.include?(expected)\n      last_command_started.terminate\n      break\n    end\n    sleep(0.1)\n  }\n} rescue last_command_started.terminate\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"EventLogger.log\" should contain",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "conf_option.feature",
    "test_num": 71,
    "test_case": "\"No such file\" error",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I run `trema run event_logger.rb -c nosuchfile`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the stderr should contain",
        "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      }
    ]
  },
  {
    "feature_file": "conf_option.feature",
    "test_num": 72,
    "test_case": "NameError",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a file named \"invalid_trema.conf\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I run `trema run event_logger.rb -c invalid_trema.conf`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the output should match",
        "step_definition": "do\nif negated\n  expect(all_commands).not_to(include(have_output(an_output_string_matching(expected))))\nelse\n  expect(all_commands).to(include(have_output(an_output_string_matching(expected))))\nend\nend",
        "step_definition_file": "command.rb"
      }
    ]
  },
  {
    "feature_file": "conf_option.feature",
    "test_num": 73,
    "test_case": "SyntaxError",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a file named \"invalid_trema.conf\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I run `trema run event_logger.rb -c invalid_trema.conf`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the output should contain",
        "step_definition": "do\nexpect(command_line.all_output).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      }
    ]
  },
  {
    "feature_file": "daemonize_option.feature",
    "test_num": 74,
    "test_case": "-d option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully run `trema run null_controller.rb -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "the command returns immediately",
        "step_definition": "do\n\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      }
    ]
  },
  {
    "feature_file": "daemonize_option.feature",
    "test_num": 75,
    "test_case": "--daemonize option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully run `trema run null_controller.rb --daemonize`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "the command returns immediately",
        "step_definition": "do\n\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      }
    ]
  },
  {
    "feature_file": "logging_level_option.feature",
    "test_num": 76,
    "test_case": "the default logging level",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully trema run \"logger_controller.rb\" with args \"-d\"",
        "step_definition": "do\nstep(\"I successfully run `trema run #{controller} #{args}`\")\nstep(\"sleep 5\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "the file \"LoggerController.log\" should not contain \"DEBUG -- : debug message\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"LoggerController.log\" should contain \"INFO -- : info message\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 4,
        "step_name": "the file \"LoggerController.log\" should contain \"WARN -- : warn message\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 5,
        "step_name": "the file \"LoggerController.log\" should contain \"ERROR -- : error message\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 6,
        "step_name": "the file \"LoggerController.log\" should contain \"FATAL -- : fatal message\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 7,
        "step_name": "the file \"LoggerController.log\" should contain \"ANY -- : unknown message\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "logging_level_option.feature",
    "test_num": 77,
    "test_case": "--logging_level debug",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully trema run \"logger_controller.rb\" with args \"--logging_level debug -d\"",
        "step_definition": "do\nstep(\"I successfully run `trema run #{controller} #{args}`\")\nstep(\"sleep 5\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "the file \"LoggerController.log\" should contain \"DEBUG -- : debug message\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "logging_level_option.feature",
    "test_num": 78,
    "test_case": "\"Invalid log level\" error",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I trema run \"logger_controller.rb\" with args \"--logging_level hoge\"",
        "step_definition": "do\nstep(\"I run `trema run #{controller} #{args}`\")\nstep(\"sleep 5\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 2,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the stderr should contain",
        "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      }
    ]
  },
  {
    "feature_file": "log_dir_option.feature",
    "test_num": 79,
    "test_case": "-L option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a directory named \"log\"",
        "step_definition": "do\ncreate_directory(dir_name)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I successfully run `trema run null_controller.rb -L log -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "sleep 3",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 4,
        "step_name": "a file named \"log/NullController.log\" should exist",
        "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "log_dir_option.feature",
    "test_num": 80,
    "test_case": "--log_dir option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a directory named \"log\"",
        "step_definition": "do\ncreate_directory(dir_name)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I successfully run `trema run null_controller.rb --log_dir log -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "sleep 3",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 4,
        "step_name": "a file named \"log/NullController.log\" should exist",
        "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "log_dir_option.feature",
    "test_num": 81,
    "test_case": "\"No such directory\" error",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I run `trema run null_controller.rb -L log -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the stderr should contain",
        "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      }
    ]
  },
  {
    "feature_file": "openflow13_option.feature",
    "test_num": 82,
    "test_case": "--openflow13 option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully run `trema run openflow_version.rb --openflow13 -c trema.conf -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "sleep 5",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"OpenflowVersion.log\" should contain \"ofp_version = 4\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "openflow13_option.feature",
    "test_num": 83,
    "test_case": "--no-openflow13 option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully run `trema run openflow_version.rb --no-openflow13 -c trema.conf -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "sleep 5",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"OpenflowVersion.log\" should contain \"ofp_version = 1\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "openflow13_option.feature",
    "test_num": 84,
    "test_case": "the default OpenFlow version is 1.0",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully run `trema run openflow_version.rb -c trema.conf -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "sleep 5",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"OpenflowVersion.log\" should contain \"ofp_version = 1\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "pid_dir_option.feature",
    "test_num": 85,
    "test_case": "-P option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a directory named \"pid\"",
        "step_definition": "do\ncreate_directory(dir_name)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I successfully run `trema run null_controller.rb -P pid -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "sleep 3",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 4,
        "step_name": "a file named \"pid/NullController.pid\" should exist",
        "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "pid_dir_option.feature",
    "test_num": 86,
    "test_case": "--pid_dir option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a directory named \"pid\"",
        "step_definition": "do\ncreate_directory(dir_name)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I successfully run `trema run null_controller.rb --pid_dir pid -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "sleep 3",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 4,
        "step_name": "a file named \"pid/NullController.pid\" should exist",
        "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "pid_dir_option.feature",
    "test_num": 87,
    "test_case": "\"No such directory\" error",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I run `trema run null_controller.rb -P pid -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the stderr should contain",
        "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      }
    ]
  },
  {
    "feature_file": "port_option.feature",
    "test_num": 88,
    "test_case": "-p option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully run `trema run -p 1234 switch_ready.rb -c trema.conf -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "sleep 5",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"SwitchReady.log\" should contain \"connected to port 1234\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "port_option.feature",
    "test_num": 89,
    "test_case": "--port option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully run `trema run --port 1234 switch_ready.rb -c trema.conf -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "sleep 5",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"SwitchReady.log\" should contain \"connected to port 1234\"",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "run.feature",
    "test_num": 90,
    "test_case": "run controller_file",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I use a fixture named \"event_logger\"",
        "step_definition": "do\ncopy(File.join(aruba.config.fixtures_path_prefix, name), name)\ncd(name)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"event_logger.rb\" with args \"-d\"",
        "step_definition": "do\nstep(\"I run `trema run #{controller} #{args}`\")\nstep(\"sleep 5\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"EventLogger.log\" should contain",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "run.feature",
    "test_num": 91,
    "test_case": "cleanup on failure",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a file named \"switch_ready_fail.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "a file named \"trema.conf\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 3,
        "step_name": "I run `trema -v run switch_ready_fail.rb -c trema.conf`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "virtual links should not exist",
        "step_definition": "do\nstep(\"I run `bash -c 'ifconfig | grep \\\"^link[0-9]+-[0-9]+\\\" > virtual_links.txt'`\")\nstep(\"'the file \\\"virtual_links.txt\\\" should not contain \\\"link\\\"'\")\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 5,
        "step_name": "the following files should not exist",
        "step_definition": "do\nfiles = files.raw.flatten\nif negated\n  expect(files).not_to(include(an_existing_file))\nelse\n  expect(files).to(all(be_an_existing_file))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "show_backtrace_on_exception.feature",
    "test_num": 92,
    "test_case": "\"No controller class is defined\" error",
    "steps": [
      {
        "step_num": 1,
        "step_name": "an empty file named \"empty.rb\"",
        "step_definition": "do\nwrite_file(file_name, \"\")\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"empty.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the stderr should contain",
        "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      },
      {
        "step_num": 5,
        "step_name": "the file \"trema.log\" should contain",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "show_backtrace_on_exception.feature",
    "test_num": 93,
    "test_case": "SyntaxError",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a file named \"invalid_ruby.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"invalid_ruby.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the stderr should contain",
        "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      },
      {
        "step_num": 5,
        "step_name": "the file \"trema.log\" should contain",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "show_backtrace_on_exception.feature",
    "test_num": 94,
    "test_case": "NameError",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a file named \"invalid_ruby.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"invalid_ruby.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the stderr should contain",
        "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      },
      {
        "step_num": 5,
        "step_name": "the stderr should contain",
        "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      },
      {
        "step_num": 6,
        "step_name": "the file \"trema.log\" should contain",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 7,
        "step_name": "the file \"trema.log\" should contain",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "show_backtrace_on_exception.feature",
    "test_num": 95,
    "test_case": "RuntimeError",
    "steps": [
      {
        "step_num": 1,
        "step_name": "a file named \"start_fail.rb\" with",
        "step_definition": "do\nwrite_file(file_name, file_content)\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 2,
        "step_name": "I trema run \"start_fail.rb\" interactively",
        "step_definition": "do\nstep(\"I run `trema run #{controller}` interactively\")\nstep(\"sleep 2\")\nend",
        "step_definition_file": "features/step_definitions/trema_run_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "the stderr should contain",
        "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      },
      {
        "step_num": 5,
        "step_name": "the stderr should contain",
        "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      },
      {
        "step_num": 6,
        "step_name": "the file \"StartFail.log\" should contain",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      },
      {
        "step_num": 7,
        "step_name": "the file \"StartFail.log\" should contain",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "socket_dir_option.feature",
    "test_num": 96,
    "test_case": "-S option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully run `trema run null_controller.rb -S . -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "sleep 3",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "a socket file named \"NullController.ctl\" should exist",
        "step_definition": "do\ncd(\".\") {\n  expect(FileTest.socket?(socket_file)).to(be_truthy)\n}\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      }
    ]
  },
  {
    "feature_file": "socket_dir_option.feature",
    "test_num": 97,
    "test_case": "--socket_dir option",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully run `trema run null_controller.rb --socket_dir . -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "sleep 3",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "a socket file named \"NullController.ctl\" should exist",
        "step_definition": "do\ncd(\".\") {\n  expect(FileTest.socket?(socket_file)).to(be_truthy)\n}\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      }
    ]
  },
  {
    "feature_file": "socket_dir_option.feature",
    "test_num": 98,
    "test_case": "\"No such directory\" error",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I run `trema run null_controller.rb -S sock -d`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the stderr should contain",
        "step_definition": "do\nexpect(command_line.stderr).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      }
    ]
  },
  {
    "feature_file": "start.feature",
    "test_num": 99,
    "test_case": "stop and start a switch",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully run `trema stop 0xabc`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "sleep 3",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "I successfully run `trema start 0xabc`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "sleep 3",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 5,
        "step_name": "the file \"SwitchReadyController.log\" should contain",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "start.feature",
    "test_num": 100,
    "test_case": "stop and start host_name",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully run `trema stop host1`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "sleep 10",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "I successfully run `trema start host1`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 4,
        "step_name": "sleep 10",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 5,
        "step_name": "the file named \"vhost.host1.pid\" should exist",
        "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "start.feature",
    "test_num": 101,
    "test_case": "\"Open vSwitch is already running\" error",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I run `trema start 0xabc`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain",
        "step_definition": "do\nexpect(command_line.all_output).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      }
    ]
  },
  {
    "feature_file": "start.feature",
    "test_num": 102,
    "test_case": "\"vswitch is already running\" error",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I run `trema start host1`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain",
        "step_definition": "do\nexpect(command_line.all_output).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      }
    ]
  },
  {
    "feature_file": "start.feature",
    "test_num": 103,
    "test_case": "start NO_SUCH_NAME",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I run `trema start NO_SUCH_NAME`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain",
        "step_definition": "do\nexpect(command_line.all_output).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      }
    ]
  },
  {
    "feature_file": "stop.feature",
    "test_num": 104,
    "test_case": "stop a switch",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully run `trema stop 0xabc`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "sleep 10",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"SwitchDisconnectedController.log\" should contain",
        "step_definition": "do\nif negated\n  expect(file).not_to(have_file_content(file_content_including(content.chomp)))\nelse\n  expect(file).to(have_file_content(file_content_including(content.chomp)))\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "stop.feature",
    "test_num": 105,
    "test_case": "stop a host",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I successfully run `trema stop host1`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: true, exit_timeout: secs && secs.to_f })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "sleep 5",
        "step_definition": "do\nsleep(time.to_i)\nend",
        "step_definition_file": "features/step_definitions/trema_steps.rb"
      },
      {
        "step_num": 3,
        "step_name": "the file \"vhost.host1.pid\" should not exist",
        "step_definition": "do\nif expect_match\n  expect(path).not_to(be_an_existing_file)\nelse\n  expect(path).to(be_an_existing_file)\nend\nend",
        "step_definition_file": "file.rb"
      }
    ]
  },
  {
    "feature_file": "stop.feature",
    "test_num": 106,
    "test_case": "stop NO_SUCH_NAME",
    "steps": [
      {
        "step_num": 1,
        "step_name": "I run `trema stop NO_SUCH_NAME`",
        "step_definition": "do\ncmd = sanitize_text(cmd)\nrun_command_and_stop(cmd, { fail_on_error: false })\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 2,
        "step_name": "the exit status should not be 0",
        "step_definition": "do\nif last_command_stopped.empty?\n  last_command_started.stop\nend\nif negated\n  expect(last_command_stopped).not_to(have_exit_status(exit_status.to_i))\nelse\n  expect(last_command_stopped).to(have_exit_status(exit_status.to_i))\nend\nend",
        "step_definition_file": "command.rb"
      },
      {
        "step_num": 3,
        "step_name": "the output should contain",
        "step_definition": "do\nexpect(command_line.all_output).to(include_output(output))\nend",
        "step_definition_file": "./repos/cucumber-ruby\\features\\lib\\step_definitions\\command_line_steps.rb"
      }
    ]
  }
]
