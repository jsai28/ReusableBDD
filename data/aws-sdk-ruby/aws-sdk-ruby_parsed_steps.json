[
    {
        "feature_file": "smoke.feature",
        "test_num": 1,
        "test_case": "DescribeScalableTargetsSuccess",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I create a 'Aws::ApplicationAutoScaling' client with config",
                "step_definition": "do\nnamespace = Object.const_get(module_name)\nopts = JSON.parse(config, { symbolize_names: true })\nopts.[]=(:region, ENV.[](\"AWS_SMOKE_TEST_REGION\") || opts.[](:region))\n@client = namespace::Client.new(opts)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I call the operation 'describe_scalable_targets' with params",
                "step_definition": "do\nopts = JSON.parse(params, { symbolize_names: true })\n\nbegin\n  @client.send(operation.to_sym, opts)\nrescue Aws::Errors::ServiceError => e\n  @last_error = e\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect an error was not raised",
                "step_definition": "do\nexpect(@last_error).to(be_nil)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "smoke.feature",
        "test_num": 2,
        "test_case": "DescribeAgentsSuccess",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I create a 'Aws::ApplicationDiscoveryService' client with config",
                "step_definition": "do\nnamespace = Object.const_get(module_name)\nopts = JSON.parse(config, { symbolize_names: true })\nopts.[]=(:region, ENV.[](\"AWS_SMOKE_TEST_REGION\") || opts.[](:region))\n@client = namespace::Client.new(opts)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I call the operation 'describe_agents' with params",
                "step_definition": "do\nopts = JSON.parse(params, { symbolize_names: true })\n\nbegin\n  @client.send(operation.to_sym, opts)\nrescue Aws::Errors::ServiceError => e\n  @last_error = e\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect an error was not raised",
                "step_definition": "do\nexpect(@last_error).to(be_nil)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 3,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"DescribeScalingProcessTypes\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"Processes\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 4,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"CreateLaunchConfiguration\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ValidationError\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 5,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListStacks\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"StackSummaries\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 6,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"CreateStack\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ValidationError\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 7,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListDistributions\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n@response = @client.send(underscore(api), params)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a \"DistributionList\" with a list of \"Items\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member1))\ndata = data.[](underscore(member2))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 8,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"GetDistribution\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"NoSuchDistribution\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 9,
        "test_case": "CRUD distributions",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I create a disabled distribution",
                "step_definition": "do\nparams = { distribution_config: { caller_reference: Time.now.to_i.to_s, aliases: { quantity: 0 }, default_root_object: \"\", origins: { quantity: 1, items: [{ id: \"Custom-mywebsite\", domain_name: \"mywebsite.io\", custom_origin_config: { http_port: 80, https_port: 443, origin_protocol_policy: \"http-only\" } }] }, default_cache_behavior: { target_origin_id: \"Custom-mywebsite\", forwarded_values: { query_string: false, cookies: { forward: \"none\" }, headers: { quantity: 0 } }, trusted_signers: { enabled: false, quantity: 0 }, viewer_protocol_policy: \"allow-all\", min_ttl: 0, allowed_methods: { quantity: 2, items: [\"GET\", \"HEAD\"] }, smooth_streaming: false }, cache_behaviors: { quantity: 0 }, custom_error_responses: { quantity: 0 }, comment: \"mywebsite-distribution\", logging: { enabled: false, include_cookies: false, bucket: \"\", prefix: \"\" }, price_class: \"PriceClass_100\", enabled: false, viewer_certificate: { cloud_front_default_certificate: true, ssl_support_method: \"vip\" }, restrictions: { geo_restriction: { restriction_type: \"none\", quantity: 0 } } } }\nresponse = @client.create_distribution(params)\n@distribution = response.distribution\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-cloudfront\\features\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I get the distribution configuration",
                "step_definition": "do\nresponse = @client.get_distribution({ id: @distribution.[](:id) })\n@etag = response.etag\n@distribution = response.distribution\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-cloudfront\\features\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I can update the distribution configuration",
                "step_definition": "do\nresponse = @client.update_distribution({ id: @distribution.[](:id), distribution_config: @distribution.[](:distribution_config), if_match: @etag })\n@etag = response.etag\n@distribution = response.distribution\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-cloudfront\\features\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I can delete the distribution",
                "step_definition": "do\neventually({ upto: 60 * 20 }) {\n  @client.delete_distribution({ id: @distribution.[](:id), if_match: @etag })\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-cloudfront\\features\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 10,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"DescribeDomains\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a \"DomainStatusList\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 11,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DescribeIndexFields\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ResourceNotFound\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 12,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"DescribeTrails\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a \"trailList\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 13,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DeleteTrail\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"TrailNotFoundException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 14,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListMetrics\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n@response = @client.send(underscore(api), params)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"Metrics\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 15,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"SetAlarmState\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ValidationError\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 16,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"DescribeLogGroups\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"LogGroups\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 17,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"GetLogEvents\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ResourceNotFoundException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 18,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListApplications\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"applications\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 19,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"GetApplication\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ApplicationDoesNotExistException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 20,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListIdentityPools\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n@response = @client.send(underscore(api), params)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"IdentityPools\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 21,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DescribeIdentityPool\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ResourceNotFoundException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "unsigned_requests.feature",
        "test_num": 22,
        "test_case": "Unsigned requests",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an Aws::CognitoIdenty::Client without credentials",
                "step_definition": "do\n@client = Aws::CognitoIdentity::Client.new({ credentials: nil, validate_params: false })\nexpect(@client.config.credentials).to(be(nil))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-cognitoidentity\\features\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I make a <operation> request",
                "step_definition": "do |operation| begin @client.send(AwsSdkCodeGenerator::Underscore.underscore(operation)) rescue => error @error = error end end",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-cognitoidentity\\features\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should not receive an Aws::CognitoIdentity::Errors::MissingAuthenticationTokenException",
                "step_definition": "do\nexpect(@error).not_to(be_kind_of(Aws::CognitoIdentity::Errors::MissingAuthenticationTokenException))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-cognitoidentity\\features\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "unsigned_requests.feature",
        "test_num": 23,
        "test_case": "Signed requests",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an Aws::CognitoIdenty::Client without credentials",
                "step_definition": "do\n@client = Aws::CognitoIdentity::Client.new({ credentials: nil, validate_params: false })\nexpect(@client.config.credentials).to(be(nil))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-cognitoidentity\\features\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I make a <operation> request",
                "step_definition": "do |operation| begin @client.send(AwsSdkCodeGenerator::Underscore.underscore(operation)) rescue => error @error = error end end",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-cognitoidentity\\features\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should receive a missing credentials error",
                "step_definition": "do\nexpect(@error).to(be_kind_of(Aws::Errors::MissingCredentialsError))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-cognitoidentity\\features\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 24,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListIdentityPoolUsage\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"IdentityPoolUsages\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 25,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DescribeIdentityPoolUsage\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ResourceNotFoundException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 26,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"DescribeConfigurationRecorders\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"ConfigurationRecorders\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 27,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListPipelines\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a \"PipelineIdList\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 28,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"GetPipelineDefinition\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"PipelineNotFoundException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 29,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"DescribeConnections\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"Connections\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 30,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DescribeConnections\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"DirectConnectClientException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 31,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListTables\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n@response = @client.send(underscore(api), params)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"TableNames\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 32,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DescribeTable\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ResourceNotFoundException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 33,
        "test_case": "Endpoint Discovery",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I enable endpoint discovery at client",
                "step_definition": "do\n@ed_client = Aws::DynamoDB::Client.new({ endpoint_discovery: true })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-dynamodb\\features\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I make describe_limits call",
                "step_definition": "do\n@resp = @ed_client.describe_limits\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-dynamodb\\features\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect describe_endpoints is called first",
                "step_definition": "do\nexpect(ApiCallTracker.called_operations.first).to(eq(:describe_endpoints))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-dynamodb\\features\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I expect API call is made through discovered endpoint",
                "step_definition": "do\ndiscover_resp = ApiCallTracker.api_calls.first\n@discovered_enpoint = nil\nif discover_resp && discover_resp.key?(:endpoints)\n  if discover_resp.endpoints.size == 1\n    @discovered_enpoint = discover_resp.endpoints.first.address\n  end\nend\nif @discovered_enpoint\n  expect(@resp.context.http_request.endpoint.to_s).to(include(@discovered_enpoint))\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-dynamodb\\features\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "discovered endpoint is cached",
                "step_definition": "do\nif @discover_endpoint\n  cache = @ed_client.config.endpoint_cache\n  expect(cache.entries).not_to(be_empty)\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-dynamodb\\features\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 34,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"DescribeRegions\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"Regions\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 35,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DescribeInstances\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"InvalidInstanceIDNotFound\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "resource.feature",
        "test_num": 36,
        "test_case": "Wait until volume is available",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I create a volume",
                "step_definition": "do\n@volume = @service.create_volume({ size: 1, availability_zone: \"us-east-1a\", volume_type: \"gp2\" })\n@volume_id = @volume.id\n@volume_ids << @volume_id\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-ec2\\features\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I use #wait_until to wait until volume is available",
                "step_definition": "do\nexpect {\n  @resp = @volume.wait_until { |v,|\n    v.state == \"available\"\n  }\n}.not_to(raise_error)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-ec2\\features\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "Waiter works as expected",
                "step_definition": "do\nexpect(ApiCallTracker.called_operations).to(include(:describe_volumes))\nexpect(@resp.id).to(eq(@volume_id))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-ec2\\features\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "smoke.feature",
        "test_num": 37,
        "test_case": "DescribeRegionsSuccess",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I create a 'Aws::EC2' client with config",
                "step_definition": "do\nnamespace = Object.const_get(module_name)\nopts = JSON.parse(config, { symbolize_names: true })\nopts.[]=(:region, ENV.[](\"AWS_SMOKE_TEST_REGION\") || opts.[](:region))\n@client = namespace::Client.new(opts)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I call the operation 'describe_regions' with params",
                "step_definition": "do\nopts = JSON.parse(params, { symbolize_names: true })\n\nbegin\n  @client.send(operation.to_sym, opts)\nrescue Aws::Errors::ServiceError => e\n  @last_error = e\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect an error was not raised",
                "step_definition": "do\nexpect(@last_error).to(be_nil)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "smoke.feature",
        "test_num": 38,
        "test_case": "DescribeInstancesFailure",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I create a 'Aws::EC2' client with config",
                "step_definition": "do\nnamespace = Object.const_get(module_name)\nopts = JSON.parse(config, { symbolize_names: true })\nopts.[]=(:region, ENV.[](\"AWS_SMOKE_TEST_REGION\") || opts.[](:region))\n@client = namespace::Client.new(opts)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I call the operation 'describe_instances' with params",
                "step_definition": "do\nopts = JSON.parse(params, { symbolize_names: true })\n\nbegin\n  @client.send(operation.to_sym, opts)\nrescue Aws::Errors::ServiceError => e\n  @last_error = e\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect an error was raised",
                "step_definition": "do\nexpect(@last_error).to_not(be_nil)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 39,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"DescribeEvents\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"Events\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 40,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DescribeCacheClusters\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"InvalidParameterValue\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 41,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListAvailableSolutionStacks\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"SolutionStacks\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 42,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DescribeEnvironmentResources\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"InvalidParameterValue\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 43,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"DescribeLoadBalancers\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"LoadBalancerDescriptions\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 44,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DescribeLoadBalancers\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ValidationError\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 45,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListPresets\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"Presets\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 46,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"ReadJob\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ValidationException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 47,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListClusters\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"Clusters\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 48,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"ListClusters\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"InvalidRequestException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 49,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListVaults\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n@response = @client.send(underscore(api), params)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a \"VaultList\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "upload.feature",
        "test_num": 51,
        "test_case": "Uploading an archive from a string",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I upload an archive with the contents \"Hello World!\"",
                "step_definition": "do\nbegin\n  upload_glacier_archive(contents)\nrescue => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-glacier\\features\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I should be able to delete the archive",
                "step_definition": "do\n@client.delete_archive({ vault_name: @vault_name, archive_id: @archive_id })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-glacier\\features\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "upload.feature",
        "test_num": 52,
        "test_case": "Uploading and deleting an archive",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I upload an archive from a 5.5MB large file",
                "step_definition": "do\nupload_glacier_archive(create_file(size_in_mb))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-glacier\\features\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I should be able to delete the archive",
                "step_definition": "do\n@client.delete_archive({ vault_name: @vault_name, archive_id: @archive_id })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-glacier\\features\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "upload.feature",
        "test_num": 53,
        "test_case": "Using multipart upload interface",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I multipart-upload a 15.5MB file in 1048576 byte chunks",
                "step_definition": "do\nfile = create_file(size_in_mb)\npart_size = part_size.to_i\nresp = @client.initiate_multipart_upload({ vault_name: @vault_name, part_size: part_size })\n@upload_id = resp.data.upload_id\ntree_hash = Aws::TreeHash.new\noffset = 0\nuntil file.eof?\n  chunk = file.read(part_size)\n  resp = @client.upload_multipart_part({ vault_name: @vault_name, upload_id: @upload_id, body: chunk, range: \"bytes #{offset}-#{offset + chunk.bytesize - 1}/*\" })\n  tree_hash.hashes.concat(resp.context.[](:tree_hash).hashes)\n  offset += chunk.bytesize\nend\nresp = @client.complete_multipart_upload({ vault_name: @vault_name, upload_id: @upload_id, archive_size: file.size, checksum: tree_hash.digest })\n@archive_id = resp.archive_id\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-glacier\\features\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I should be able to delete the archive",
                "step_definition": "do\n@client.delete_archive({ vault_name: @vault_name, archive_id: @archive_id })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-glacier\\features\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "upload.feature",
        "test_num": 54,
        "test_case": "Attempting to upload an empty archive",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I upload an archive with the contents \"\"",
                "step_definition": "do\nbegin\n  upload_glacier_archive(contents)\nrescue => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-glacier\\features\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"InvalidParameterValueException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 55,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListUsers\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"Users\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 56,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"GetUser\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"NoSuchEntity\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 57,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListStreams\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"StreamNames\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 58,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DescribeStream\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ResourceNotFoundException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 59,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListAliases\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"Aliases\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 60,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"GetKeyPolicy\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ValidationException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 61,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListEventSourceMappings\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"EventSourceMappings\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 62,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"GetEventSourceMapping\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ResourceNotFoundException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 63,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"DescribeStacks\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"Stacks\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 64,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DescribeLayers\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ResourceNotFoundException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 65,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"DescribeDbEngineVersions\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"DbEngineVersions\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 66,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DescribeDbInstances\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"DBInstanceNotFound\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 67,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"DescribeClusterVersions\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"ClusterVersions\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 68,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DescribeClusters\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ClusterNotFound\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 69,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListHostedZones\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"HostedZones\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 70,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"GetHostedZone\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"NoSuchHostedZone\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 71,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListDomains\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"Domains\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 72,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"GetDomainDetail\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"InvalidInput\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "buckets.feature",
        "test_num": 73,
        "test_case": "CRUD buckets using the classic endpoint",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am using the S3 \"us-east-1\" region",
                "step_definition": "do\n@client = Aws::S3::Client.new({ region: region })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I create a bucket",
                "step_definition": "do\ncreate_bucket\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the bucket should exist",
                "step_definition": "do\nexpect {\n  @client.get_bucket_location({ bucket: @bucket_name })\n}.not_to(raise_error)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I delete the bucket",
                "step_definition": "do\n@client.delete_bucket({ bucket: @bucket_name })\n@created_buckets.delete(@bucket_name)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the bucket should not exist",
                "step_definition": "do\neventually({ upto: 60 }) {\n  begin\n    @client.get_bucket_location({ bucket: @bucket_name })\n  rescue StandardError => e\n    @error = e\n  end\n  expect(@error).to(be_kind_of(Aws::S3::Errors::NoSuchBucket))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "buckets.feature",
        "test_num": 74,
        "test_case": "HEAD bucket works with improper region",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am using the S3 \"us-west-2\" region",
                "step_definition": "do\n@client = Aws::S3::Client.new({ region: region })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I create a bucket",
                "step_definition": "do\ncreate_bucket\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am using the S3 \"us-east-1\" region",
                "step_definition": "do\n@client = Aws::S3::Client.new({ region: region })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should be able to HEAD the bucket",
                "step_definition": "do\nexpect {\n  @client.head_bucket({ bucket: @bucket_name })\n}.not_to(raise_error)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "buckets.feature",
        "test_num": 75,
        "test_case": "CRUD buckets using a regional endpoint",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am using the S3 \"us-west-2\" region",
                "step_definition": "do\n@client = Aws::S3::Client.new({ region: region })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I create a bucket",
                "step_definition": "do\ncreate_bucket\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the bucket should exist",
                "step_definition": "do\nexpect {\n  @client.get_bucket_location({ bucket: @bucket_name })\n}.not_to(raise_error)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I delete the bucket",
                "step_definition": "do\n@client.delete_bucket({ bucket: @bucket_name })\n@created_buckets.delete(@bucket_name)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the bucket should not exist",
                "step_definition": "do\neventually({ upto: 60 }) {\n  begin\n    @client.get_bucket_location({ bucket: @bucket_name })\n  rescue StandardError => e\n    @error = e\n  end\n  expect(@error).to(be_kind_of(Aws::S3::Errors::NoSuchBucket))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "buckets.feature",
        "test_num": 76,
        "test_case": "Access bucket following 307 redirects",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am using the S3 \"us-east-1\" region",
                "step_definition": "do\n@client = Aws::S3::Client.new({ region: region })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I create a bucket with the location constraint \"EU\"",
                "step_definition": "do\ncreate_bucket({ create_bucket_configuration: { location_constraint: loc } })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the bucket should have a location constraint of \"EU\"",
                "step_definition": "do\nresp = @client.get_bucket_location({ bucket: @bucket_name })\nexpect(resp.data.location_constraint).to(eq(loc))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "buckets.feature",
        "test_num": 77,
        "test_case": "Working with bucket names that contain '.' using HTTPS",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am using the S3 \"https://s3.amazonaws.com\" endpoint",
                "step_definition": "do\n@client = Aws::S3::Client.new({ endpoint: endpoint })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I create a bucket with a DNS compatible name that contains a dot",
                "step_definition": "do\n@bucket_name = \"aws.#{Time.now.to_i}.sdk\"\ncreate_bucket({ bucket: @bucket_name })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should be able to delete the bucket",
                "step_definition": "do\n@client.delete_bucket({ bucket: @bucket_name })\n@created_buckets.delete(@bucket_name)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "buckets.feature",
        "test_num": 78,
        "test_case": "Working with bucket names that contain '.' using HTTP",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am using the S3 \"http://s3.amazonaws.com\" endpoint",
                "step_definition": "do\n@client = Aws::S3::Client.new({ endpoint: endpoint })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I create a bucket with a DNS compatible name that contains a dot",
                "step_definition": "do\n@bucket_name = \"aws.#{Time.now.to_i}.sdk\"\ncreate_bucket({ bucket: @bucket_name })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should be able to delete the bucket",
                "step_definition": "do\n@client.delete_bucket({ bucket: @bucket_name })\n@created_buckets.delete(@bucket_name)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "buckets.feature",
        "test_num": 79,
        "test_case": "Operating on a bucket/object using path style",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I force path style requests",
                "step_definition": "do\n@client = Aws::S3::Client.new({ force_path_style: true })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I create a DNS compatible bucket",
                "step_definition": "do\ncreate_bucket\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I put \"abc\" to the key \"object-key\"",
                "step_definition": "do\n@response = @client.put_object({ bucket: @bucket_name, key: key, body: data })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the bucket name should be in the request path",
                "step_definition": "do\nendpoint = @response.context.http_request.endpoint\nexpect(endpoint.path).to(include(@bucket_name))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the bucket name should not be in the request host",
                "step_definition": "do\nendpoint = @response.context.http_request.endpoint\nexpect(endpoint.host).not_to(include(@bucket_name))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "buckets.feature",
        "test_num": 80,
        "test_case": "Follow 307 redirect on new buckets",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am using the S3 \"http://s3.amazonaws.com\" endpoint",
                "step_definition": "do\n@client = Aws::S3::Client.new({ endpoint: endpoint })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I create a bucket with the location constraint \"us-west-2\"",
                "step_definition": "do\ncreate_bucket({ create_bucket_configuration: { location_constraint: loc } })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I put a large object",
                "step_definition": "do\n@key = \"large-object\"\n@client.put_object({ bucket: @bucket_name, key: @key, body: \".\" * 1024 * 1024 })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the object should exist",
                "step_definition": "do\n@client.head_object({ bucket: @bucket_name, key: @key })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "buckets.feature",
        "test_num": 81,
        "test_case": "Get location of DNS-compatible bucket in nonstandard region",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I am using the S3 \"us-west-2\" region",
                "step_definition": "do\n@client = Aws::S3::Client.new({ region: region })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I create a DNS compatible bucket",
                "step_definition": "do\ncreate_bucket\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I am using the S3 \"us-east-1\" region",
                "step_definition": "do\n@client = Aws::S3::Client.new({ region: region })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I get the bucket location",
                "step_definition": "do\n@response = @client.get_bucket_location({ bucket: @bucket_name })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the bucket name should be in the request host",
                "step_definition": "do\nendpoint = @response.context.http_request.endpoint\nexpect(endpoint.host).to(include(@bucket_name))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the bucket name should not be in the request path",
                "step_definition": "do\nendpoint = @response.context.http_request.endpoint\nexpect(endpoint.path).not_to(include(@bucket_name))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the location constraint should be \"us-west-2\"",
                "step_definition": "do\nexpect(@response.location_constraint).to(eq(lc))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "buckets.feature",
        "test_num": 82,
        "test_case": "Get and Put Objects in an MRAP Bucket",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have access to an MRAP bucket and CRT",
                "step_definition": "do\nunless Aws::Sigv4::Signer.use_crt?\n  pending(\"CRT is not available\")\nend\n\nbegin\n  @client.head_bucket({ bucket: \"ruby-sdk-integtest-mrap-bucket\" })\nrescue\n  pending(\"Account does not have access to the MRAP test bucket: ruby-sdk-integtest-mrap-bucket\")\nend\n@bucket_name = \"arn:aws:s3::469596866844:accesspoint/mpatcdsojq97c.mrap\"\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I put \"abc\" to the key \"object-key\"",
                "step_definition": "do\n@response = @client.put_object({ bucket: @bucket_name, key: key, body: data })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I get the object with the key \"object-key\"",
                "step_definition": "do\n@response = @client.get_object({ bucket: @bucket_name, key: key })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the body #read method should return \"abc\"",
                "step_definition": "do\nexpect(@response.body.read).to(eq(str))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "eventstream.feature",
        "test_num": 83,
        "test_case": "Select Object Content Sync",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I select it with query \"SELECT * FROM S3Object WHERE cast(age as int) > 12\"",
                "step_definition": "do\n@select_resp = @client.select_object_content({ bucket: @bucket_name, key: @select_file_name, expression_type: \"SQL\", expression: query, input_serialization: { csv: { file_header_info: \"USE\" } }, output_serialization: { csv: {} } })\n@tracker = Hash.new([])\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "response should contain \"records\" event",
                "step_definition": "do\n@select_resp.payload.each { |event,|\n  unless event.event_type == type.to_sym\n    next\n  end\n  @tracker.[](type.to_sym) << event\n}\nexpect(@tracker.[](:records)).not_to(be_nil)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the event should have payload member with content \"bar,15\"",
                "step_definition": "do\n@tracker.[](:records).each { |e,|\n  e.payload.rewind\n  expect(e.payload.read.strip).to(eq(payload))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "eventstream.feature",
        "test_num": 84,
        "test_case": "Select Object Content with a block",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I select it with query \"SELECT * FROM S3Object WHERE cast(age as int) > 12\" with block",
                "step_definition": "do\n@tracker = Hash.new([])\n@select_resp = @client.select_object_content({ bucket: @bucket_name, key: @select_file_name, expression_type: \"SQL\", expression: query, input_serialization: { csv: { file_header_info: \"USE\" } }, output_serialization: { csv: {} } }) { |stream,|\n  stream.on_records_event { |e,|\n    @tracker.[](e.event_type) << e\n  }\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"records\" event should be processed \"1\" times when it arrives",
                "step_definition": "do\nexpect(@tracker.[](type.to_sym).size).to(eq(times.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the event should have payload member with content \"bar,15\"",
                "step_definition": "do\n@tracker.[](:records).each { |e,|\n  e.payload.rewind\n  expect(e.payload.read.strip).to(eq(payload))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "response should contain \"records\" event",
                "step_definition": "do\n@select_resp.payload.each { |event,|\n  unless event.event_type == type.to_sym\n    next\n  end\n  @tracker.[](type.to_sym) << event\n}\nexpect(@tracker.[](:records)).not_to(be_nil)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "eventstream.feature",
        "test_num": 85,
        "test_case": "Select Object Content with a handler",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I select it with query \"SELECT * FROM S3Object WHERE cast(age as int) > 12\" with event stream handler",
                "step_definition": "do\n@tracker = Hash.new([])\nhandler = Aws::S3::EventStreams::SelectObjectContentEventStream.new\nhandler.on_records_event { |e,|\n  @tracker.[](:records) << e\n}\n@select_resp = @client.select_object_content({ bucket: @bucket_name, key: @select_file_name, expression_type: \"SQL\", expression: string, input_serialization: { csv: { file_header_info: \"USE\" } }, output_serialization: { csv: {} }, event_stream_handler: handler })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"records\" event should be processed \"1\" times when it arrives",
                "step_definition": "do\nexpect(@tracker.[](type.to_sym).size).to(eq(times.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the event should have payload member with content \"bar,15\"",
                "step_definition": "do\n@tracker.[](:records).each { |e,|\n  e.payload.rewind\n  expect(e.payload.read.strip).to(eq(payload))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "response should contain \"records\" event",
                "step_definition": "do\n@select_resp.payload.each { |event,|\n  unless event.event_type == type.to_sym\n    next\n  end\n  @tracker.[](type.to_sym) << event\n}\nexpect(@tracker.[](:records)).not_to(be_nil)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "eventstream.feature",
        "test_num": 86,
        "test_case": "Select Object Content with a Proc",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I select it with query \"SELECT * FROM S3Object WHERE cast(age as int) > 12\" with Proc Object",
                "step_definition": "do\n@tracker = Hash.new([])\nhandler = Proc.new { |stream,|\n  stream.on_records_event { |e,|\n    @tracker.[](:records) << e\n  }\n}\n@select_resp = @client.select_object_content({ bucket: @bucket_name, key: @select_file_name, expression_type: \"SQL\", expression: query, input_serialization: { csv: { file_header_info: \"USE\" } }, output_serialization: { csv: {} }, event_stream_handler: handler })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"records\" event should be processed \"1\" times when it arrives",
                "step_definition": "do\nexpect(@tracker.[](type.to_sym).size).to(eq(times.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the event should have payload member with content \"bar,15\"",
                "step_definition": "do\n@tracker.[](:records).each { |e,|\n  e.payload.rewind\n  expect(e.payload.read.strip).to(eq(payload))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "response should contain \"records\" event",
                "step_definition": "do\n@select_resp.payload.each { |event,|\n  unless event.event_type == type.to_sym\n    next\n  end\n  @tracker.[](type.to_sym) << event\n}\nexpect(@tracker.[](:records)).not_to(be_nil)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "eventstream.feature",
        "test_num": 87,
        "test_case": "Select Object Content with handler and block",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I select it with query \"SELECT * FROM S3Object WHERE cast(age as int) > 12\" with handler and block",
                "step_definition": "do\n@tracker = Hash.new([])\nhandler = Aws::S3::EventStreams::SelectObjectContentEventStream.new\nhandler.on_records_event { |e,|\n  @tracker.[](:records) << e\n}\n@select_resp = @client.select_object_content({ bucket: @bucket_name, key: @select_file_name, expression_type: \"SQL\", expression: query, input_serialization: { csv: { file_header_info: \"USE\" } }, output_serialization: { csv: {} }, event_stream_handler: handler }) { |stream,|\n  stream.on_records_event { |e,|\n    @tracker.[](:records) << e\n  }\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "\"records\" event should be processed \"2\" times when it arrives",
                "step_definition": "do\nexpect(@tracker.[](type.to_sym).size).to(eq(times.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the event should have payload member with content \"bar,15\"",
                "step_definition": "do\n@tracker.[](:records).each { |e,|\n  e.payload.rewind\n  expect(e.payload.read.strip).to(eq(payload))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "response should contain \"records\" event",
                "step_definition": "do\n@select_resp.payload.each { |event,|\n  unless event.event_type == type.to_sym\n    next\n  end\n  @tracker.[](type.to_sym) << event\n}\nexpect(@tracker.[](:records)).not_to(be_nil)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "objects.feature",
        "test_num": 88,
        "test_case": "Putting nothing to an object",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I put nothing to the key \"blank\"",
                "step_definition": "do\n@client.put_object({ bucket: @bucket_name, key: key })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "the object with the key \"blank\" should have a content length of 0",
                "step_definition": "do\nresp = @client.head_object({ bucket: @bucket_name, key: key })\nexpect(resp.data.content_length).to(eq(size.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "objects.feature",
        "test_num": 89,
        "test_case": "Putting a multi-byte string to an object",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I put \"\u00e5\u00df\u2202\u0192\u00a9\" to the key \"multi\"",
                "step_definition": "do\n@response = @client.put_object({ bucket: @bucket_name, key: key, body: data })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "the object with the key \"multi\" should have a content length of 11",
                "step_definition": "do\nresp = @client.head_object({ bucket: @bucket_name, key: key })\nexpect(resp.data.content_length).to(eq(size.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "objects.feature",
        "test_num": 90,
        "test_case": "Putting a file to an object",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I put the test png to the key \"img\"",
                "step_definition": "do\nfile = File.open(File.join(File.dirname(\"./repos/aws-sdk-ruby\\\\gems\\\\aws-sdk-s3\\\\features\\\\client\\\\step_definitions.rb\"), \"test.png\"), \"rb\")\n@client.put_object({ bucket: @bucket_name, key: key, body: file })\nfile.close\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "the object with the key \"img\" should have a content length of 976",
                "step_definition": "do\nresp = @client.head_object({ bucket: @bucket_name, key: key })\nexpect(resp.data.content_length).to(eq(size.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "objects.feature",
        "test_num": 91,
        "test_case": "Using server-side-encryption with customer-provided key",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I put \"hello\" to the key \"test\" with an aes key",
                "step_definition": "do\n@aes_key = OpenSSL::Cipher.new(\"aes-256-cbc\").random_key\n@client.put_object({ bucket: @bucket_name, key: key, body: body, sse_customer_algorithm: \"AES256\", sse_customer_key: @aes_key })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I can download the key \"test\" with the aes key",
                "step_definition": "do\n@client.get_object({ bucket: @bucket_name, key: key, sse_customer_algorithm: \"AES256\", sse_customer_key: @aes_key })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "objects.feature",
        "test_num": 92,
        "test_case": "Reading an object from S3",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I put \"hello\" to the key \"test\"",
                "step_definition": "do\n@response = @client.put_object({ bucket: @bucket_name, key: key, body: data })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I get the object with the key \"test\"",
                "step_definition": "do\n@response = @client.get_object({ bucket: @bucket_name, key: key })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the body should be an IO object",
                "step_definition": "do\nexpect(@response.body).to(be_kind_of(StringIO))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the body#read method should return \"hello\"",
                "step_definition": "do |str| expect(@response.body.read).to eq(str) end",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "objects.feature",
        "test_num": 93,
        "test_case": "Using block mode with GET object and errors",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I get an object that doesn't exist with a read block",
                "step_definition": "do\n@yielded = []\n\nbegin\n  @client.get_object({ bucket: @bucket_name, key: \"bad-key\" }) { |chunk,|\n    @yielded << chunk\n  }\nrescue StandardError => e\n  @error = e\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "an error should be raise and the block should not yield",
                "step_definition": "do\nexpect(@error).to(be_kind_of(Aws::S3::Errors::NoSuchKey))\nexpect(@yielded).to(eq([]))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "objects.feature",
        "test_num": 94,
        "test_case": "URL decoding Keys",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I put \"data1\" to the key \"a b\"",
                "step_definition": "do\n@response = @client.put_object({ bucket: @bucket_name, key: key, body: data })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I put \"data2\" to the key \"a+b\"",
                "step_definition": "do\n@response = @client.put_object({ bucket: @bucket_name, key: key, body: data })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the keys in my bucket should be",
                "step_definition": "do\nkeys = @client.list_objects({ bucket: @bucket_name }).contents.map(&:key)\nexpect(keys.sort).to(eq(table.rows.map(&:first).sort))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "objects.feature",
        "test_num": 95,
        "test_case": "Support object streaming",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I put \"hello world\" to the key \"hello\"",
                "step_definition": "do\n@response = @client.put_object({ bucket: @bucket_name, key: key, body: data })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I can streaming download key \"hello\"",
                "step_definition": "do\nresp = @client.get_object({ bucket: @bucket_name, key: key }) { |chunk,|\n  expect(chunk).to(eq(\"hello world\"))\n}\nexpect(resp.body).to(be_a(Aws::S3::Plugins::RetryableBlockIO))\nexpect(resp.context.[](:response_target)).to(be_a(Proc))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "objects.feature",
        "test_num": 96,
        "test_case": "Paging responses",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I put nothing to the key \"photos/camping/cascades.jpg\"",
                "step_definition": "do\n@client.put_object({ bucket: @bucket_name, key: key })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I put nothing to the key \"photos/skiing/stevens.jpg\"",
                "step_definition": "do\n@client.put_object({ bucket: @bucket_name, key: key })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I put nothing to the key \"photos/family.jpg\"",
                "step_definition": "do\n@client.put_object({ bucket: @bucket_name, key: key })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I put nothing to the key \"photos/friends.jpg\"",
                "step_definition": "do\n@client.put_object({ bucket: @bucket_name, key: key })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I page s3 objects prefixed \"photos/\" delimited \"/\" limit 1",
                "step_definition": "do\n@responses = []\n@client.list_objects({ bucket: @bucket_name, prefix: prefix, delimiter: delimiter, max_keys: max_keys }).each { |resp,|\n  @responses << resp\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I should have received 4 responses",
                "step_definition": "do\nexpect(@responses.size).to(eq(count.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "objects.feature",
        "test_num": 97,
        "test_case": "Expect 100 continue",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I put a large object with a broken content-md5",
                "step_definition": "do\nbegin\n  @client.put_object({ bucket: @bucket_name, key: \"key\", body: \".\" * 1024 * 1024, content_md5: \"abc\" })\nrescue StandardError => e\n  @error = e\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I should receive an invalid digest error",
                "step_definition": "do\nexpect(@error).to(be_kind_of(Aws::S3::Errors::InvalidDigest))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "presigned.feature",
        "test_num": 98,
        "test_case": "Presigning a HTTPS get object request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I put \"signed\" to the key \"retrieve_me\"",
                "step_definition": "do\n@response = @client.put_object({ bucket: @bucket_name, key: key, body: data })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I create a presigned url for \"get_object\" with",
                "step_definition": "do\npresigner = Aws::S3::Presigner.new({ client: @client })\nparams = symbolized_params(params)\nparams.[]=(:bucket, @bucket_name)\nif non_secure\n  params.[]=(:secure, false)\nend\n@url = presigner.presigned_url(method.to_sym, params)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I send an HTTP get request for the presigned url",
                "step_definition": "do\nuri = URI(@url)\n@resp = Net::HTTP.get_response(uri.host, uri.request_uri)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the response should be \"signed\"",
                "step_definition": "do\nexpect(@resp.body).to(eq(expected))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "presigned.feature",
        "test_num": 99,
        "test_case": "Presigning a HTTP get object request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I put \"signed\" to the key \"retrieve_me\"",
                "step_definition": "do\n@response = @client.put_object({ bucket: @bucket_name, key: key, body: data })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I create a non-secure presigned url for \"get_object\" with",
                "step_definition": "do\npresigner = Aws::S3::Presigner.new({ client: @client })\nparams = symbolized_params(params)\nparams.[]=(:bucket, @bucket_name)\nif non_secure\n  params.[]=(:secure, false)\nend\n@url = presigner.presigned_url(method.to_sym, params)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I send an HTTP get request for the presigned url",
                "step_definition": "do\nuri = URI(@url)\n@resp = Net::HTTP.get_response(uri.host, uri.request_uri)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the response should be \"signed\"",
                "step_definition": "do\nexpect(@resp.body).to(eq(expected))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "presigned.feature",
        "test_num": 100,
        "test_case": "Presigning a put object request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I create a presigned url for \"put_object\" with",
                "step_definition": "do\npresigner = Aws::S3::Presigner.new({ client: @client })\nparams = symbolized_params(params)\nparams.[]=(:bucket, @bucket_name)\nif non_secure\n  params.[]=(:secure, false)\nend\n@url = presigner.presigned_url(method.to_sym, params)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I send an HTTP put request for the presigned url with body \"hello\"",
                "step_definition": "do\nuri = URI(@url)\nhttp = Net::HTTP.new(uri.host)\nreq = Net::HTTP::Put.new(uri.request_uri, { \"content-length\" => body.bytesize.to_s })\nreq.body=body\n@resp = http.request(req)\nexpect(@resp.code).to(eq(\"200\"))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I get the object with the key \"test\"",
                "step_definition": "do\n@response = @client.get_object({ bucket: @bucket_name, key: key })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the body #read method should return \"hello\"",
                "step_definition": "do\nexpect(@response.body.read).to(eq(str))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "presigned.feature",
        "test_num": 101,
        "test_case": "Presigned GET with virtual-hosted bucket",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a bucket configured with a virtual hosted CNAME",
                "step_definition": "do\n@bucket_name = cfg_value(\"s3\", \"virtual_hosted_bucket\")\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I create a presigned url for \"put_object\" with",
                "step_definition": "do\npresigner = Aws::S3::Presigner.new({ client: @client })\nparams = symbolized_params(params)\nparams.[]=(:bucket, @bucket_name)\nif non_secure\n  params.[]=(:secure, false)\nend\n@url = presigner.presigned_url(method.to_sym, params)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I send an HTTP put request for the presigned url with body \"hello\"",
                "step_definition": "do\nuri = URI(@url)\nhttp = Net::HTTP.new(uri.host)\nreq = Net::HTTP::Put.new(uri.request_uri, { \"content-length\" => body.bytesize.to_s })\nreq.body=body\n@resp = http.request(req)\nexpect(@resp.code).to(eq(\"200\"))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I make an unauthenticated HTTP GET request for key \"test\"",
                "step_definition": "do\nuri = URI.parse(\"http://#{@bucket_name}.s3.amazonaws.com/#{key}\")\n@resp = Net::HTTP.get_response(uri)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the response should be \"hello\"",
                "step_definition": "do\nexpect(@resp.body).to(eq(expected))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "presigned.feature",
        "test_num": 102,
        "test_case": "Presigning a put object request with x-amz-*",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I create a presigned url for \"put_object\" with",
                "step_definition": "do\npresigner = Aws::S3::Presigner.new({ client: @client })\nparams = symbolized_params(params)\nparams.[]=(:bucket, @bucket_name)\nif non_secure\n  params.[]=(:secure, false)\nend\n@url = presigner.presigned_url(method.to_sym, params)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I send an HTTP put request for the presigned url with body \"hello\"",
                "step_definition": "do\nuri = URI(@url)\nhttp = Net::HTTP.new(uri.host)\nreq = Net::HTTP::Put.new(uri.request_uri, { \"content-length\" => body.bytesize.to_s })\nreq.body=body\n@resp = http.request(req)\nexpect(@resp.code).to(eq(\"200\"))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the object \"test\" should have a \"REDUCED_REDUNDANCY\" storage class",
                "step_definition": "do\nresp = @client.list_objects({ bucket: @bucket_name, prefix: key, max_keys: 1 })\nexpect(resp.contents.first.storage_class).to(eq(sc))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I get the object with the key \"test\"",
                "step_definition": "do\n@response = @client.get_object({ bucket: @bucket_name, key: key })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the body #read method should return \"hello\"",
                "step_definition": "do\nexpect(@response.body.read).to(eq(str))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "presigned.feature",
        "test_num": 103,
        "test_case": "Presigned PUT with content-type",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I create a presigned url for \"put_object\" with",
                "step_definition": "do\npresigner = Aws::S3::Presigner.new({ client: @client })\nparams = symbolized_params(params)\nparams.[]=(:bucket, @bucket_name)\nif non_secure\n  params.[]=(:secure, false)\nend\n@url = presigner.presigned_url(method.to_sym, params)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I send an HTTP put request with the content type as \"text/plain\"",
                "step_definition": "do\nuri = URI(@url)\nhttp = Net::HTTP.new(uri.host)\nreq = Net::HTTP::Put.new(uri.request_uri, { \"content-type\" => content_type })\nreq.body=\"data\"\n@resp = http.request(req)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the response should have a 200 status code",
                "step_definition": "do\nexpect(@resp.code.to_i).to(eq(code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "presigned.feature",
        "test_num": 104,
        "test_case": "Presigned PUT with wrong content-type",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I create a presigned url for \"put_object\" with",
                "step_definition": "do\npresigner = Aws::S3::Presigner.new({ client: @client })\nparams = symbolized_params(params)\nparams.[]=(:bucket, @bucket_name)\nif non_secure\n  params.[]=(:secure, false)\nend\n@url = presigner.presigned_url(method.to_sym, params)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I send an HTTP put request with the content type as \"image/jpg\"",
                "step_definition": "do\nuri = URI(@url)\nhttp = Net::HTTP.new(uri.host)\nreq = Net::HTTP::Put.new(uri.request_uri, { \"content-type\" => content_type })\nreq.body=\"data\"\n@resp = http.request(req)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the response should have a 403 status code",
                "step_definition": "do\nexpect(@resp.code.to_i).to(eq(code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\client\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "client_side_encryption.feature",
        "test_num": 105,
        "test_case": "Encrypting client-side with GET and PUT",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an encryption client",
                "step_definition": "do\n@cse = Aws::S3::Encryption::Client.new({ client: @s3.client, encryption_key: Base64.decode64(\"w1WLio3agRWRTSJK/Ouh8NHoqRQ6fn5WbSXDTHjXMSo=\") })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I perform an encrypted PUT of the value \"secret\"",
                "step_definition": "do\n@key = \"encrypted\"\n@plain_text = value\n@cse.put_object({ bucket: @bucket_name, key: @key, body: @plain_text })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I GET the object with a non-encryption client",
                "step_definition": "do\n@cipher_text = @s3.client.get_object({ bucket: @bucket_name, key: @key }).body.read\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the object data should be encrypted",
                "step_definition": "do\nexpect(@cipher_text).not_to(eq(@plain_text))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I GET the object with an encryption client",
                "step_definition": "do\n@plain_text = @cse.get_object({ bucket: @bucket_name, key: @key }).body.read\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the object data should be \"secret\"",
                "step_definition": "do\nexpect(@plain_text).to(eq(value))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "client_side_encryption.feature",
        "test_num": 106,
        "test_case": "Using instruction file for storing the encryption envelope",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an encryption client configured for :instruction_file",
                "step_definition": "do\n@cse = Aws::S3::Encryption::Client.new({ client: @s3.client, encryption_key: Base64.decode64(\"w1WLio3agRWRTSJK/Ouh8NHoqRQ6fn5WbSXDTHjXMSo=\"), envelope_location: :instruction_file })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I perform an encrypted PUT of the value \"secret\"",
                "step_definition": "do\n@key = \"encrypted\"\n@plain_text = value\n@cse.put_object({ bucket: @bucket_name, key: @key, body: @plain_text })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the instruction file should exist",
                "step_definition": "do\nexpect {\n  @s3.client.head_object({ bucket: @bucket_name, key: @key + \".instruction\" })\n}.not_to(raise_error)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I GET the object with an encryption client",
                "step_definition": "do\n@plain_text = @cse.get_object({ bucket: @bucket_name, key: @key }).body.read\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the object data should be \"secret\"",
                "step_definition": "do\nexpect(@plain_text).to(eq(value))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "client_side_encryption.feature",
        "test_num": 107,
        "test_case": "Using KMS Encryption Using instruction file for storing the encryption envelope",
        "steps": [
            {
                "step_num": 1,
                "step_name": "a \"kms_key_id\" is set in cfg[\"cse_kms\"][\"kms_key_id\"]",
                "step_definition": "do\ninstance_variable_set(\"@#{name}\", cfg_value(*path.scan(/\\w+/)))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have an encryption client configured to use KMS",
                "step_definition": "do\n@cse = Aws::S3::Encryption::Client.new({ client: @s3.client, kms_key_id: @kms_key_id })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I perform an encrypted PUT of the value \"secret\"",
                "step_definition": "do\n@key = \"encrypted\"\n@plain_text = value\n@cse.put_object({ bucket: @bucket_name, key: @key, body: @plain_text })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I GET the object with a non-encryption client",
                "step_definition": "do\n@cipher_text = @s3.client.get_object({ bucket: @bucket_name, key: @key }).body.read\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the object data should be encrypted",
                "step_definition": "do\nexpect(@cipher_text).not_to(eq(@plain_text))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I GET the object with an encryption client",
                "step_definition": "do\n@plain_text = @cse.get_object({ bucket: @bucket_name, key: @key }).body.read\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the object data should be \"secret\"",
                "step_definition": "do\nexpect(@plain_text).to(eq(value))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "client_side_encryption.feature",
        "test_num": 108,
        "test_case": "Decrypting objects encrypted using the Java SDK",
        "steps": [
            {
                "step_num": 1,
                "step_name": "a \"kms_key_id\" is set in cfg[\"java_cse_kms\"][\"kms_key_id\"]",
                "step_definition": "do\ninstance_variable_set(\"@#{name}\", cfg_value(*path.scan(/\\w+/)))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "a \"profile\" is set in cfg[\"java_cse_kms\"][\"profile\"]",
                "step_definition": "do\ninstance_variable_set(\"@#{name}\", cfg_value(*path.scan(/\\w+/)))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "a \"bucket_name\" is set in cfg[\"java_cse_kms\"][\"bucket_name\"]",
                "step_definition": "do\ninstance_variable_set(\"@#{name}\", cfg_value(*path.scan(/\\w+/)))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 4,
                "step_name": "a \"key\" is set in cfg[\"java_cse_kms\"][\"key\"]",
                "step_definition": "do\ninstance_variable_set(\"@#{name}\", cfg_value(*path.scan(/\\w+/)))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 5,
                "step_name": "I have an encryption client configured to read a Java encrypted object",
                "step_definition": "do @cse = Aws::S3::Encryption::Client.new(profile: @profile, kms_key_id: @kms_key_id) end",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 6,
                "step_name": "I GET the object with an encryption client",
                "step_definition": "do\n@plain_text = @cse.get_object({ bucket: @bucket_name, key: @key }).body.read\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the object data should be \"raw-body\"",
                "step_definition": "do\nexpect(@plain_text).to(eq(value))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "client_side_encryption_v2.feature",
        "test_num": 109,
        "test_case": "Encrypting client-side with GET and PUT",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a V2 encryption client",
                "step_definition": "do\n@cse = Aws::S3::EncryptionV2::Client.new({ client: @s3.client, encryption_key: Base64.decode64(\"w1WLio3agRWRTSJK/Ouh8NHoqRQ6fn5WbSXDTHjXMSo=\"), key_wrap_schema: :aes_gcm, content_encryption_schema: :aes_gcm_no_padding, security_profile: :v2_and_legacy })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I perform an encrypted PUT of the value \"secret\"",
                "step_definition": "do\n@key = \"encrypted\"\n@plain_text = value\n@cse.put_object({ bucket: @bucket_name, key: @key, body: @plain_text })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I GET the object with a non-encryption client",
                "step_definition": "do\n@cipher_text = @s3.client.get_object({ bucket: @bucket_name, key: @key }).body.read\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the object data should be encrypted",
                "step_definition": "do\nexpect(@cipher_text).not_to(eq(@plain_text))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I GET the object with an encryption client",
                "step_definition": "do\n@plain_text = @cse.get_object({ bucket: @bucket_name, key: @key }).body.read\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the object data should be \"secret\"",
                "step_definition": "do\nexpect(@plain_text).to(eq(value))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "client_side_encryption_v2.feature",
        "test_num": 110,
        "test_case": "Decrypting legacy (V1) objects",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an encryption client",
                "step_definition": "do\n@cse = Aws::S3::Encryption::Client.new({ client: @s3.client, encryption_key: Base64.decode64(\"w1WLio3agRWRTSJK/Ouh8NHoqRQ6fn5WbSXDTHjXMSo=\") })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I perform an encrypted PUT of the value \"secret\"",
                "step_definition": "do\n@key = \"encrypted\"\n@plain_text = value\n@cse.put_object({ bucket: @bucket_name, key: @key, body: @plain_text })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I GET the object with a V2 encryption client",
                "step_definition": "do\ncse_v2 = Aws::S3::EncryptionV2::Client.new({ client: @s3.client, encryption_key: Base64.decode64(\"w1WLio3agRWRTSJK/Ouh8NHoqRQ6fn5WbSXDTHjXMSo=\"), key_wrap_schema: :aes_gcm, content_encryption_schema: :aes_gcm_no_padding, security_profile: :v2_and_legacy })\n@cipher_text = cse_v2.get_object({ bucket: @bucket_name, key: @key }).body.read\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "the object data should be \"secret\"",
                "step_definition": "do\nexpect(@plain_text).to(eq(value))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "client_side_encryption_v2.feature",
        "test_num": 111,
        "test_case": "Using instruction file for storing the encryption envelope",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a V2 encryption client configured for :instruction_file",
                "step_definition": "do\n@cse = Aws::S3::EncryptionV2::Client.new({ client: @s3.client, encryption_key: Base64.decode64(\"w1WLio3agRWRTSJK/Ouh8NHoqRQ6fn5WbSXDTHjXMSo=\"), envelope_location: :instruction_file, key_wrap_schema: :aes_gcm, content_encryption_schema: :aes_gcm_no_padding, security_profile: :v2_and_legacy })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I perform an encrypted PUT of the value \"secret\"",
                "step_definition": "do\n@key = \"encrypted\"\n@plain_text = value\n@cse.put_object({ bucket: @bucket_name, key: @key, body: @plain_text })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the instruction file should exist",
                "step_definition": "do\nexpect {\n  @s3.client.head_object({ bucket: @bucket_name, key: @key + \".instruction\" })\n}.not_to(raise_error)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I GET the object with an encryption client",
                "step_definition": "do\n@plain_text = @cse.get_object({ bucket: @bucket_name, key: @key }).body.read\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the object data should be \"secret\"",
                "step_definition": "do\nexpect(@plain_text).to(eq(value))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "client_side_encryption_v2.feature",
        "test_num": 112,
        "test_case": "Using KMS Encryption Using instruction file for storing the encryption envelope",
        "steps": [
            {
                "step_num": 1,
                "step_name": "a \"kms_key_id\" is set in cfg[\"cse_kms\"][\"kms_key_id\"]",
                "step_definition": "do\ninstance_variable_set(\"@#{name}\", cfg_value(*path.scan(/\\w+/)))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a V2 encryption client configured to use KMS",
                "step_definition": "do\n@cse = Aws::S3::EncryptionV2::Client.new({ client: @s3.client, kms_key_id: @kms_key_id })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I perform an encrypted PUT of the value \"secret\"",
                "step_definition": "do\n@key = \"encrypted\"\n@plain_text = value\n@cse.put_object({ bucket: @bucket_name, key: @key, body: @plain_text })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I GET the object with a non-encryption client",
                "step_definition": "do\n@cipher_text = @s3.client.get_object({ bucket: @bucket_name, key: @key }).body.read\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the object data should be encrypted",
                "step_definition": "do\nexpect(@cipher_text).not_to(eq(@plain_text))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I GET the object with an encryption client",
                "step_definition": "do\n@plain_text = @cse.get_object({ bucket: @bucket_name, key: @key }).body.read\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the object data should be \"secret\"",
                "step_definition": "do\nexpect(@plain_text).to(eq(value))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "client_side_encryption_v2.feature",
        "test_num": 113,
        "test_case": "Decrypting objects encrypted using the Java SDK",
        "steps": [
            {
                "step_num": 1,
                "step_name": "a \"kms_key_id\" is set in cfg[\"java_cse_kms\"][\"kms_key_id\"]",
                "step_definition": "do\ninstance_variable_set(\"@#{name}\", cfg_value(*path.scan(/\\w+/)))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "a \"profile\" is set in cfg[\"java_cse_kms\"][\"profile\"]",
                "step_definition": "do\ninstance_variable_set(\"@#{name}\", cfg_value(*path.scan(/\\w+/)))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "a \"bucket_name\" is set in cfg[\"java_cse_kms\"][\"bucket_name\"]",
                "step_definition": "do\ninstance_variable_set(\"@#{name}\", cfg_value(*path.scan(/\\w+/)))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 4,
                "step_name": "a \"key\" is set in cfg[\"java_cse_kms\"][\"key\"]",
                "step_definition": "do\ninstance_variable_set(\"@#{name}\", cfg_value(*path.scan(/\\w+/)))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 5,
                "step_name": "Given I have a V2 encryption client configured to read a Java encrypted object",
                "step_definition": "do @cse = Aws::S3::Encryption::Client.new(profile: @profile, kms_key_id: @kms_key_id) end",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 6,
                "step_name": "I GET the object with an encryption client",
                "step_definition": "do\n@plain_text = @cse.get_object({ bucket: @bucket_name, key: @key }).body.read\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "the object data should be \"raw-body\"",
                "step_definition": "do\nexpect(@plain_text).to(eq(value))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "download_file.feature",
        "test_num": 114,
        "test_case": "Download a small object",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a 1M file",
                "step_definition": "do\n@file = Tempfile.new(\"randomfile\")\nFile.open(@file, \"wb\") { |f,|\n  f.write(Random.new.bytes(mb.to_i * 1024 * 1024))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I upload the file using put_object",
                "step_definition": "do\n@object = @s3.bucket(@bucket_name).object(@file.path)\n@object.put({ body: @file })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I download the file with mode \"auto\"",
                "step_definition": "do\ntempfile = Tempfile.new(\"sample\")\n@download_file_dest = tempfile.path\ntempfile.unlink\n@object.download_file(@download_file_dest, { mode: mode })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "1 get_object request should have been made",
                "step_definition": "do\nexpect(ApiCallTracker.called_operations.count { |name,|\n  method_name.to_sym == name\n}).to(eq(expected_count.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the downloaded file should match the uploaded file",
                "step_definition": "do\nexpect(FileUtils.compare_file(@file.path, @download_file_dest)).to(be(true))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "this test file has been cleaned up",
                "step_definition": "do\nFile.unlink(@download_file_dest)\nexpect(File.exist?(@download_file_dest)).to(be(false))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "download_file.feature",
        "test_num": 115,
        "test_case": "Download a large object using part numbers",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a 116M file",
                "step_definition": "do\n@file = Tempfile.new(\"randomfile\")\nFile.open(@file, \"wb\") { |f,|\n  f.write(Random.new.bytes(mb.to_i * 1024 * 1024))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I upload the file",
                "step_definition": "do\n@object = @bucket.object(@file.path)\n@object.upload_file(@file)\n@old_key = @file.path\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I download the file with mode \"auto\"",
                "step_definition": "do\ntempfile = Tempfile.new(\"sample\")\n@download_file_dest = tempfile.path\ntempfile.unlink\n@object.download_file(@download_file_dest, { mode: mode })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "24 upload_part requests should have been made",
                "step_definition": "do\nexpect(ApiCallTracker.called_operations.count { |name,|\n  method_name.to_sym == name\n}).to(eq(expected_count.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "24 get_object requests should have been made",
                "step_definition": "do\nexpect(ApiCallTracker.called_operations.count { |name,|\n  method_name.to_sym == name\n}).to(eq(expected_count.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the downloaded file should match the uploaded file",
                "step_definition": "do\nexpect(FileUtils.compare_file(@file.path, @download_file_dest)).to(be(true))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "this test file has been cleaned up",
                "step_definition": "do\nFile.unlink(@download_file_dest)\nexpect(File.exist?(@download_file_dest)).to(be(false))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "download_file.feature",
        "test_num": 116,
        "test_case": "Download a large object using ranges",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a 16M file",
                "step_definition": "do\n@file = Tempfile.new(\"randomfile\")\nFile.open(@file, \"wb\") { |f,|\n  f.write(Random.new.bytes(mb.to_i * 1024 * 1024))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I upload the file using put_object",
                "step_definition": "do\n@object = @s3.bucket(@bucket_name).object(@file.path)\n@object.put({ body: @file })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I download the file with mode \"auto\"",
                "step_definition": "do\ntempfile = Tempfile.new(\"sample\")\n@download_file_dest = tempfile.path\ntempfile.unlink\n@object.download_file(@download_file_dest, { mode: mode })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "4 get_object requests should have been made",
                "step_definition": "do\nexpect(ApiCallTracker.called_operations.count { |name,|\n  method_name.to_sym == name\n}).to(eq(expected_count.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the downloaded file should match the uploaded file",
                "step_definition": "do\nexpect(FileUtils.compare_file(@file.path, @download_file_dest)).to(be(true))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "this test file has been cleaned up",
                "step_definition": "do\nFile.unlink(@download_file_dest)\nexpect(File.exist?(@download_file_dest)).to(be(false))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "download_file.feature",
        "test_num": 117,
        "test_case": "Download a large object in auto mode",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a 16M file",
                "step_definition": "do\n@file = Tempfile.new(\"randomfile\")\nFile.open(@file, \"wb\") { |f,|\n  f.write(Random.new.bytes(mb.to_i * 1024 * 1024))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I upload the file",
                "step_definition": "do\n@object = @bucket.object(@file.path)\n@object.upload_file(@file)\n@old_key = @file.path\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I download the file with mode \"auto\" with 3M chunk size",
                "step_definition": "do\ntempfile = Tempfile.new(\"sample\")\n@download_file_dest = tempfile.path\ntempfile.unlink\n@object.download_file(@download_file_dest, { mode: mode, chunk_size: (mb.to_i * 1024 * 1024) })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "6 get_object requests should have been made",
                "step_definition": "do\nexpect(ApiCallTracker.called_operations.count { |name,|\n  method_name.to_sym == name\n}).to(eq(expected_count.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the downloaded file should match the uploaded file",
                "step_definition": "do\nexpect(FileUtils.compare_file(@file.path, @download_file_dest)).to(be(true))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "this test file has been cleaned up",
                "step_definition": "do\nFile.unlink(@download_file_dest)\nexpect(File.exist?(@download_file_dest)).to(be(false))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "download_file.feature",
        "test_num": 118,
        "test_case": "Download a large object using single_request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a 1M file",
                "step_definition": "do\n@file = Tempfile.new(\"randomfile\")\nFile.open(@file, \"wb\") { |f,|\n  f.write(Random.new.bytes(mb.to_i * 1024 * 1024))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I upload the file",
                "step_definition": "do\n@object = @bucket.object(@file.path)\n@object.upload_file(@file)\n@old_key = @file.path\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I download the file with mode \"single_request\"",
                "step_definition": "do\ntempfile = Tempfile.new(\"sample\")\n@download_file_dest = tempfile.path\ntempfile.unlink\n@object.download_file(@download_file_dest, { mode: mode })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "0 head_object request should have been made",
                "step_definition": "do\nexpect(ApiCallTracker.called_operations.count { |name,|\n  method_name.to_sym == name\n}).to(eq(expected_count.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "1 get_object request should have been made",
                "step_definition": "do\nexpect(ApiCallTracker.called_operations.count { |name,|\n  method_name.to_sym == name\n}).to(eq(expected_count.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "the downloaded file should match the uploaded file",
                "step_definition": "do\nexpect(FileUtils.compare_file(@file.path, @download_file_dest)).to(be(true))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "this test file has been cleaned up",
                "step_definition": "do\nFile.unlink(@download_file_dest)\nexpect(File.exist?(@download_file_dest)).to(be(false))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "download_file.feature",
        "test_num": 119,
        "test_case": "Download a large object using chunk size",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a 16M file",
                "step_definition": "do\n@file = Tempfile.new(\"randomfile\")\nFile.open(@file, \"wb\") { |f,|\n  f.write(Random.new.bytes(mb.to_i * 1024 * 1024))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I upload the file",
                "step_definition": "do\n@object = @bucket.object(@file.path)\n@object.upload_file(@file)\n@old_key = @file.path\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I download the file with mode \"get_range\" with 8M chunk size",
                "step_definition": "do\ntempfile = Tempfile.new(\"sample\")\n@download_file_dest = tempfile.path\ntempfile.unlink\n@object.download_file(@download_file_dest, { mode: mode, chunk_size: (mb.to_i * 1024 * 1024) })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "2 get_object requests should have been made",
                "step_definition": "do\nexpect(ApiCallTracker.called_operations.count { |name,|\n  method_name.to_sym == name\n}).to(eq(expected_count.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "the downloaded file should match the uploaded file",
                "step_definition": "do\nexpect(FileUtils.compare_file(@file.path, @download_file_dest)).to(be(true))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "this test file has been cleaned up",
                "step_definition": "do\nFile.unlink(@download_file_dest)\nexpect(File.exist?(@download_file_dest)).to(be(false))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "download_file.feature",
        "test_num": 120,
        "test_case": "Download 2 large objects in auto mode multithread",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a 16M file",
                "step_definition": "do\n@file = Tempfile.new(\"randomfile\")\nFile.open(@file, \"wb\") { |f,|\n  f.write(Random.new.bytes(mb.to_i * 1024 * 1024))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I upload the file",
                "step_definition": "do\n@object = @bucket.object(@file.path)\n@object.upload_file(@file)\n@old_key = @file.path\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I download the file 2 times with mode \"auto\" with 3M chunk size",
                "step_definition": "do\n@download_dest = []\n(1..cnt.to_i).each { |e,|\n  tempfile = Tempfile.new(\"sample_#{e}\")\n  @download_dest << tempfile.path\n  tempfile.unlink\n}\n(1..cnt.to_i).map { |c,|\n  Thread.new {\n    @object.download_file(@download_dest.[](c - 1), { mode: mode, chunk_size: (mb.to_i * 1024 * 1024) })\n  }\n}.each(&:join)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "12 get_object requests should have been made",
                "step_definition": "do\nexpect(ApiCallTracker.called_operations.count { |name,|\n  method_name.to_sym == name\n}).to(eq(expected_count.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "those downloaded files should match the uploaded file",
                "step_definition": "do\n@download_dest.each { |download,|\n  expect(FileUtils.compare_file(@file.path, download)).to(be(true))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "these test file has been cleaned up",
                "step_definition": "do\n@download_dest.each { |file,|\n  File.unlink(file)\n  expect(File.exist?(file)).to(be(false))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "download_file.feature",
        "test_num": 121,
        "test_case": "Download an object with its version id",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I enabled bucket versioning",
                "step_definition": "do\n@s3.client.put_bucket_versioning({ bucket: @bucket_name, versioning_configuration: { status: \"Enabled\" } })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a 16M file",
                "step_definition": "do\n@file = Tempfile.new(\"randomfile\")\nFile.open(@file, \"wb\") { |f,|\n  f.write(Random.new.bytes(mb.to_i * 1024 * 1024))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I upload the file",
                "step_definition": "do\n@object = @bucket.object(@file.path)\n@object.upload_file(@file)\n@old_key = @file.path\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I have a 1M file",
                "step_definition": "do\n@file = Tempfile.new(\"randomfile\")\nFile.open(@file, \"wb\") { |f,|\n  f.write(Random.new.bytes(mb.to_i * 1024 * 1024))\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "I upload the file with same key",
                "step_definition": "do\n@version_id = @object.version_id\n@object = @bucket.object(@old_key)\n@object.upload_file(@file)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 6,
                "step_name": "I download the file with previous version id",
                "step_definition": "do\ntempfile = Tempfile.new(\"sample\")\n@download_file_dest = tempfile.path\ntempfile.unlink\n@object.download_file(@download_file_dest, { version_id: @version_id })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 7,
                "step_name": "4 get_object requests should have been made",
                "step_definition": "do\nexpect(ApiCallTracker.called_operations.count { |name,|\n  method_name.to_sym == name\n}).to(eq(expected_count.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 8,
                "step_name": "the download file should match the previous version object",
                "step_definition": "do\nexpect(FileUtils.compare_file(@old_key, @download_file_dest)).to(be(true))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 9,
                "step_name": "this test file has been cleaned up",
                "step_definition": "do\nFile.unlink(@download_file_dest)\nexpect(File.exist?(@download_file_dest)).to(be(false))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "multipart_copy.feature",
        "test_num": 122,
        "test_case": "Copy-to across buckets",
        "steps": [
            {
                "step_num": 1,
                "step_name": "a \"source_bucket\" is set in cfg[\"s3\"][\"large_object\"][\"bucket\"]",
                "step_definition": "do\ninstance_variable_set(\"@#{name}\", cfg_value(*path.scan(/\\w+/)))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "a \"source_key\" is set in cfg[\"s3\"][\"large_object\"][\"key\"]",
                "step_definition": "do\ninstance_variable_set(\"@#{name}\", cfg_value(*path.scan(/\\w+/)))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I should be able to multipart copy the object to a different bucket",
                "step_definition": "do\ntarget_bucket = @s3.bucket(@bucket_name)\ntarget_object = target_bucket.object(\"#{@source_key}-copy\")\ntarget_object.copy_from(\"#{@source_bucket}/#{@source_key}\", { multipart_copy: true })\nexpect(ApiCallTracker.called_operations).to(include(:create_multipart_upload))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "multipart_copy.feature",
        "test_num": 123,
        "test_case": "Copy object with space character",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I create a bucket resource",
                "step_definition": "do\n@bucket_name = \"aws-sdk-resources-#{Time.now.to_i}-#{rand(1000)}\"\n@bucket = @s3.create_bucket({ bucket: @bucket_name })\n@s3.client.wait_until(:bucket_exists, { bucket: @bucket_name })\n@created_buckets << @bucket\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I have a 10MB file",
                "step_definition": "do\n@file = Tempfile.new(\"tempfile\")\n@file.write(\".\" * size.to_i * 1024 * 1024)\n@file.rewind\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I upload the file to the \"test object\" object",
                "step_definition": "do\n@bucket.object(key).upload_file(@file)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should be able to multipart copy the object",
                "step_definition": "do\ntarget_bucket = @s3.bucket(@bucket_name)\ntarget_object = target_bucket.object(\"test object-copy\")\ntarget_object.copy_from(\"#{@bucket_name}/test object\", { multipart_copy: true })\nexpect(ApiCallTracker.called_operations).to(include(:create_multipart_upload))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "object.feature",
        "test_num": 124,
        "test_case": "Uploading a large file",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a 115MB file",
                "step_definition": "do\n@file = Tempfile.new(\"tempfile\")\n@file.write(\".\" * size.to_i * 1024 * 1024)\n@file.rewind\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I upload the file to the \"large\" object",
                "step_definition": "do\n@bucket.object(key).upload_file(@file)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the file should have been uploaded as a multipart upload",
                "step_definition": "do\nexpect(ApiCallTracker.called_operations).to(include(:create_multipart_upload))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "object.feature",
        "test_num": 125,
        "test_case": "Uploading chunks as multipart upload",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have 11 1MB chunks",
                "step_definition": "do |number, size| @chunks = number.to_i.times.map { \".\" * size.to_i * 1024 * 1024 } end",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I upload the chunks to the \"large\" object",
                "step_definition": "do\n@bucket.object(key).upload_stream { |write_stream,|\n  @chunks.each { |chunk,|\n    write_stream << chunk\n  }\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the chunks should have been uploaded as a multipart upload",
                "step_definition": "do\nexpect(ApiCallTracker.called_operations).to(include(:create_multipart_upload))\nexpect(ApiCallTracker.called_operations).to(include(:upload_part))\nexpect(ApiCallTracker.called_operations).to(include(:complete_multipart_upload))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "object.feature",
        "test_num": 126,
        "test_case": "Uploading chunks with correct content",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have 6 1MB chunks",
                "step_definition": "do |number, size| @chunks = number.to_i.times.map { \".\" * size.to_i * 1024 * 1024 } end",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I upload the chunks to the \"medium\" object",
                "step_definition": "do\n@bucket.object(key).upload_stream { |write_stream,|\n  @chunks.each { |chunk,|\n    write_stream << chunk\n  }\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the \"medium\" object should contained the chunks joined",
                "step_definition": "do\ndata = @s3.bucket(@bucket_name).object(key).get.body.read\nexpect(data).to(eq(@chunks.join))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "object.feature",
        "test_num": 127,
        "test_case": "Uploading stream with custom part size",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a 7MB stream",
                "step_definition": "do |number, size| @chunks = number.to_i.times.map { \".\" * size.to_i * 1024 * 1024 } end",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I upload the stream with the custom part size of 6MB to the \"stream\" object",
                "step_definition": "do |part_size_mb, key| @bucket.object(key).upload_stream(part_size: part_size_mb * 1024 * 1024) { |write_stream| IO.copy_stream(@stream, write_stream) } end",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the \"stream\" object should contained the stream",
                "step_definition": "do |key| data = @s3.bucket(@bucket_name).object(key).get.body.read; expect(data).to eq(@stream.string) end",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "object.feature",
        "test_num": 128,
        "test_case": "Uploading empty stream with custom part size",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a 0MB stream",
                "step_definition": "do |part_size_mb, key| @bucket.object(key).upload_stream(part_size: part_size_mb * 1024 * 1024) { |write_stream| IO.copy_stream(@stream, write_stream) } end",,
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I upload the stream with the custom part size of 6MB to the \"stream\" object",
                "step_definition": "do |part_size_mb, key| @bucket.object(key).upload_stream(part_size: part_size_mb * 1024 * 1024) { |write_stream| IO.copy_stream(@stream, write_stream) } end",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the \"stream\" object should contained the stream",
                "step_definition": "do |key| data = @s3.bucket(@bucket_name).object(key).get.body.read; expect(data).to eq(@stream.string) end",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "object.feature",
        "test_num": 129,
        "test_case": "Uploading chunks with using temporary files",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have 6 1MB chunks",
                "step_definition": "do |number, size| @chunks = number.to_i.times.map { \".\" * size.to_i * 1024 * 1024 } end",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I upload the chunks using tempfile to the \"medium\" object",
                "step_definition": "do\n@bucket.object(key).upload_stream({ tempfile: true }) { |write_stream,|\n  @chunks.each { |chunk,|\n    write_stream << chunk\n  }\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the \"medium\" object should contained the chunks joined",
                "step_definition": "do\ndata = @s3.bucket(@bucket_name).object(key).get.body.read\nexpect(data).to(eq(@chunks.join))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "object.feature",
        "test_num": 130,
        "test_case": "Uploading chunks with serverside encryption",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have 2 3MB chunks",
                "step_definition": "do |number, size| @chunks = number.to_i.times.map { \".\" * size.to_i * 1024 * 1024 } end",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I upload the chunks to the \"encrypted\" object with SSE/CPK",
                "step_definition": "do\nrequire(\"openssl\")\ncipher = OpenSSL::Cipher::AES256.new(:CBC)\nencryption_key = cipher.random_key\n@bucket.object(key).upload_stream({ sse_customer_key: encryption_key, sse_customer_algorithm: \"AES256\" }) { |write_stream,|\n  @chunks.each { |chunk,|\n    write_stream << chunk\n  }\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the file should have been uploaded as a multipart upload",
                "step_definition": "do\nexpect(ApiCallTracker.called_operations).to(include(:create_multipart_upload))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "object.feature",
        "test_num": 131,
        "test_case": "Uploading a large single chunk",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have 1 7MB chunks",
                "step_definition": "do |number, size| @chunks = number.to_i.times.map { \".\" * size.to_i * 1024 * 1024 } end",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I upload the chunks to the \"single\" object",
                "step_definition": "do\n@bucket.object(key).upload_stream { |write_stream,|\n  @chunks.each { |chunk,|\n    write_stream << chunk\n  }\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the \"single\" object should contained the chunks joined",
                "step_definition": "do\ndata = @s3.bucket(@bucket_name).object(key).get.body.read\nexpect(data).to(eq(@chunks.join))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "object.feature",
        "test_num": 132,
        "test_case": "Uploading a large file",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have a 115MB file",
                "step_definition": "do\n@file = Tempfile.new(\"tempfile\")\n@file.write(\".\" * size.to_i * 1024 * 1024)\n@file.rewind\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I upload the file to the \"large\" object with SSE/CPK",
                "step_definition": "do\nrequire(\"openssl\")\ncipher = OpenSSL::Cipher::AES256.new(:CBC)\necnryption_key = cipher.random_key\n@bucket.object(key).upload_file(@file, { sse_customer_key: ecnryption_key, sse_customer_algorithm: \"AES256\" })\n@bucket.object(key).upload_file(@file)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the file should have been uploaded as a multipart upload",
                "step_definition": "do\nexpect(ApiCallTracker.called_operations).to(include(:create_multipart_upload))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "object.feature",
        "test_num": 133,
        "test_case": "Support object streaming",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I put \"hello world\" to the object with key \"hello\"",
                "step_definition": "do\n@obj = @bucket.object(key)\n@obj.put({ body: body })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I can streaming download object with key \"hello\"",
                "step_definition": "do\nresp = @obj.get { |chunk,|\n  expect(chunk).to(eq(\"hello world\"))\n}\nexpect(resp.body).to(be_a(Aws::S3::Plugins::RetryableBlockIO))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "presigned_post.feature",
        "test_num": 134,
        "test_case": "Using a presigned-post form to upload an object via POST",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I create a presigned post",
                "step_definition": "do\n@post = @bucket.object(\"key\").presigned_post({ success_action_status: \"201\" })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I should be able to POST an object to the form url",
                "step_definition": "do\nuri = URI.parse(@post.url)\nreq = Net::HTTP::Post::Multipart.new(uri.request_uri, @post.fields.merge({ \"file\" => UploadIO.new(File.open(\"./repos/aws-sdk-ruby\\\\gems\\\\aws-sdk-s3\\\\features\\\\resources\\\\step_definitions.rb\", \"r\"), \"text/plain\") }))\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl=true\nhttp.verify_mode=OpenSSL::SSL::VERIFY_PEER\nresp = http.request(req)\nexpect(resp.code.to_i).to(eq(201))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-s3\\features\\resources\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "smoke.feature",
        "test_num": 135,
        "test_case": "ListSecretsSuccess",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I create a 'Aws::SecretsManager' client with config",
                "step_definition": "do\nnamespace = Object.const_get(module_name)\nopts = JSON.parse(config, { symbolize_names: true })\nopts.[]=(:region, ENV.[](\"AWS_SMOKE_TEST_REGION\") || opts.[](:region))\n@client = namespace::Client.new(opts)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I call the operation 'list_secrets' with params",
                "step_definition": "do\nopts = JSON.parse(params, { symbolize_names: true })\n\nbegin\n  @client.send(operation.to_sym, opts)\nrescue Aws::Errors::ServiceError => e\n  @last_error = e\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect an error was not raised",
                "step_definition": "do\nexpect(@last_error).to(be_nil)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "smoke.feature",
        "test_num": 136,
        "test_case": "DescribeSecretFailure",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I create a 'Aws::SecretsManager' client with config",
                "step_definition": "do\nnamespace = Object.const_get(module_name)\nopts = JSON.parse(config, { symbolize_names: true })\nopts.[]=(:region, ENV.[](\"AWS_SMOKE_TEST_REGION\") || opts.[](:region))\n@client = namespace::Client.new(opts)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I call the operation 'describe_secret' with params",
                "step_definition": "do\nopts = JSON.parse(params, { symbolize_names: true })\n\nbegin\n  @client.send(operation.to_sym, opts)\nrescue Aws::Errors::ServiceError => e\n  @last_error = e\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect an error was raised",
                "step_definition": "do\nexpect(@last_error).to_not(be_nil)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 137,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListIdentities\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"Identities\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 138,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"VerifyEmailIdentity\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"InvalidParameterValue\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 139,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListDomains\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"DomainNames\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 140,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DomainMetadata\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"NoSuchDomain\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 141,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListTopics\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"Topics\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 142,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"Publish\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"InvalidParameter\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 143,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListQueues\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"QueueUrls\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 144,
        "test_case": "Cross Region Queue Operatoins",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I create a queue in \"us-west-1\"",
                "step_definition": "do\nname = \"aws-sdk-core-integration-test-#{Time.now.to_i}-#{rand(1000)}\"\nresp = Aws::SQS::Client.new({ region: region }).create_queue({ queue_name: name })\n@queue_url = resp.queue_url\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-sqs\\features\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I operate on that queue in \"us-east-1\"",
                "step_definition": "do\n@resp = Aws::SQS::Client.new({ region: region }).send_message({ queue_url: @queue_url, message_body: \"hello\" })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-sqs\\features\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "the request should be made against \"us-west-1\"",
                "step_definition": "do\nexpect(@resp.context.http_request.endpoint.to_s).to(include(region))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-sqs\\features\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 145,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"GetQueueUrl\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"NonExistentQueue\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "queue_poller.feature",
        "test_num": 146,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have have a queue",
                "step_definition": "do\n@queue_name = \"aws-sdk-integration-#{Time.now.to_i}-#{rand(10000)}\"\n@queue_url = @client.create_queue({ queue_name: @queue_name }).queue_url\n@sqs_created_queues << @queue_url\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-sqs\\features\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I send 10 messages to the queue",
                "step_definition": "do\ncount.to_i.times { |n,|\n  @client.send_message({ queue_url: @queue_url, message_body: \"msg-#{n}\" })\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-sqs\\features\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I poll 5 messages at a time with a 2 second idle timeout",
                "step_definition": "do\npoller = Aws::SQS::QueuePoller.new(@queue_url, { client: @client, max_number_of_messages: max.to_i, idle_timeout: idle.to_i })\n@received_messages = []\n@stats = poller.poll { |messages,|\n  @received_messages += messages\n}\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-sqs\\features\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I should have received all 10 messages",
                "step_definition": "do\nexpect(@received_messages.count).to(eq(count.to_i))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-sqs\\features\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 147,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListDocuments\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"DocumentIdentifiers\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 148,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"GetDocument\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ValidationException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 149,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListGateways\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"Gateways\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 150,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"ListVolumes\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ValidationException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 151,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"ListDomains\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n@response = @client.send(underscore(api), params)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"DomainInfos\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 152,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DescribeDomain\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"UnknownResourceFault\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "async_client.feature",
        "test_num": 153,
        "test_case": "Wait for async response to complete",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an audio file",
                "step_definition": "do\npath = File.expand_path(File.join(File.dirname(\"./repos/aws-sdk-ruby\\\\gems\\\\aws-sdk-transcribestreamingservice\\\\features\\\\step_definitions.rb\"), \"slience.wav\"))\n@file = File.new(path, \"rb\")\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-transcribestreamingservice\\features\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I make start_stream_transcription async call",
                "step_definition": "do\n@input_stream = Aws::TranscribeStreamingService::EventStreams::AudioStream.new\n@async_resp = @async_client.start_stream_transcription({ language_code: \"en-US\", media_encoding: \"pcm\", media_sample_rate_hertz: 16000, input_event_stream_handler: @input_stream, output_event_stream_handler: @output_stream })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-transcribestreamingservice\\features\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I signal events at audio stream",
                "step_definition": "do\nwhile !@file.eof?\n  @input_stream.signal_audio_event_event({ audio_chunk: @file.read(2000) })\nend\n@input_stream.signal_end_stream\n@file.close\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-transcribestreamingservice\\features\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I call async response wait",
                "step_definition": "do\n@sync_resp = @async_resp.wait\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-transcribestreamingservice\\features\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "sync response is returned",
                "step_definition": "do\nexpect(@tracker).to(match_array(@sync_resp.transcript_result_stream.to_a))\n@tracker = []\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-transcribestreamingservice\\features\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "async_client.feature",
        "test_num": 154,
        "test_case": "Join async response immediately",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I have an audio file",
                "step_definition": "do\npath = File.expand_path(File.join(File.dirname(\"./repos/aws-sdk-ruby\\\\gems\\\\aws-sdk-transcribestreamingservice\\\\features\\\\step_definitions.rb\"), \"slience.wav\"))\n@file = File.new(path, \"rb\")\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-transcribestreamingservice\\features\\step_definitions.rb"
            },
            {
                "step_num": 2,
                "step_name": "I make start_stream_transcription async call",
                "step_definition": "do\n@input_stream = Aws::TranscribeStreamingService::EventStreams::AudioStream.new\n@async_resp = @async_client.start_stream_transcription({ language_code: \"en-US\", media_encoding: \"pcm\", media_sample_rate_hertz: 16000, input_event_stream_handler: @input_stream, output_event_stream_handler: @output_stream })\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-transcribestreamingservice\\features\\step_definitions.rb"
            },
            {
                "step_num": 3,
                "step_name": "I signal events at audio stream",
                "step_definition": "do\nwhile !@file.eof?\n  @input_stream.signal_audio_event_event({ audio_chunk: @file.read(2000) })\nend\n@input_stream.signal_end_stream\n@file.close\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-transcribestreamingservice\\features\\step_definitions.rb"
            },
            {
                "step_num": 4,
                "step_name": "I call async response join!",
                "step_definition": "do\nsleep(3)\n@sync_resp = @async_resp.join!\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-transcribestreamingservice\\features\\step_definitions.rb"
            },
            {
                "step_num": 5,
                "step_name": "sync response is returned",
                "step_definition": "do\nexpect(@tracker).to(match_array(@sync_resp.transcript_result_stream.to_a))\n@tracker = []\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-transcribestreamingservice\\features\\step_definitions.rb"
            }
        ]
    },
    {
        "feature_file": "smoke.feature",
        "test_num": 155,
        "test_case": "ListWebACLsSuccess",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I create a 'Aws::WAFV2' client with config",
                "step_definition": "do\nnamespace = Object.const_get(module_name)\nopts = JSON.parse(config, { symbolize_names: true })\nopts.[]=(:region, ENV.[](\"AWS_SMOKE_TEST_REGION\") || opts.[](:region))\n@client = namespace::Client.new(opts)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I call the operation 'list_web_acls' with params",
                "step_definition": "do\nopts = JSON.parse(params, { symbolize_names: true })\n\nbegin\n  @client.send(operation.to_sym, opts)\nrescue Aws::Errors::ServiceError => e\n  @last_error = e\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect an error was not raised",
                "step_definition": "do\nexpect(@last_error).to(be_nil)\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 156,
        "test_case": "Making a basic request",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I call the \"DescribeWorkspaces\" API",
                "step_definition": "do\n@response = @client.send(underscore(api))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "the response should contain a list of \"Workspaces\"",
                "step_definition": "do\ndata = @response.data\ndata = data.[](underscore(member_name))\nexpect(data).to(be_an(Array))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    },
    {
        "feature_file": "client.feature",
        "test_num": 157,
        "test_case": "Error handling",
        "steps": [
            {
                "step_num": 1,
                "step_name": "I attempt to call the \"DescribeWorkspaces\" API with",
                "step_definition": "do\nparams = if @simple_json\n  raw_params(params)\nelse\n  symbolized_params(params)\nend\n\nbegin\n  @response = @client.send(underscore(api), params)\nrescue Aws::Errors::ServiceError => @error\nend\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 2,
                "step_name": "I expect the response error code to be \"ValidationException\"",
                "step_definition": "do\nexpect(@error.class.name.split(\"::\").last).to(eq(error_code))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            },
            {
                "step_num": 3,
                "step_name": "I expect the response error message to include",
                "step_definition": "do\nexpect(@error.message).to(include(error_message))\nend",
                "step_definition_file": "./repos/aws-sdk-ruby\\gems\\aws-sdk-core\\features\\features_helper.rb"
            }
        ]
    }
]