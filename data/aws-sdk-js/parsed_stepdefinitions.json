{
    "/^the list should contain the launch configuration \"([^\"]*)\"$/": {
        "Glue Code": "this.assert.contains(this.data.LaunchConfigurations, function(configuration) {\n      return configuration.LaunchConfigurationName === name;"
    },
    "/^the list should contain the CloudWatch alarm$/": {
        "Glue Code": "var name = this.cloudWatchAlarm.AlarmName;\n    this.assert.contains(this.data.MetricAlarms, function(alarm) {\n      return alarm.AlarmName === name;"
    },
    "/^I create a table$/": {
        "Glue Code": "var world = this;\n    this.tableName = this.uniqueName(\"aws-sdk-js-integration-\");\n    createTable(world, callback);"
    },
    "/^it should have attribute \"([^\"]*)\" containing \"([^\"]*)\"$/": {
        "Glue Code": "this.assert.equal(jmespath.search(this.data.Item, attr), value);\n    next();"
    },
    "/^the request should( not)? be retried$/": {
        "Glue Code": "if (retry && this.response.retryCount > 0) callback.fail('Request was incorrectly retried');\n    if (!retry && this.response.retryCount == 0) callback.fail('Request was incorrectly retried');\n    callback();"
    },
    "/^the request is retried the maximum number of times$/": {
        "Glue Code": "if (this.response.retryCount != 2) callback.fail('Incorrect retry count');\n    callback();"
    },
    "/^the request should( not)? fail with a CRC checking error$/": {
        "Glue Code": "if (failed && this.error) callback.fail(this.error);\n    if (!failed && !this.error) callback.fail('Did not fail when should have');\n    callback();"
    },
    "/^the EC2 endpoint for \"([^\"]*)\" should be \"([^\"]*)\"$/": {
        "Glue Code": "this.assert.contains(this.data.Regions, function(region) {\n      return region.Endpoint === endpoint;"
    },
    "/^the cache parameter group name is in the result$/": {
        "Glue Code": "var name = this.data.CacheParameterGroup.CacheParameterGroupName;\n    this.assert.equal(name, this.cacheGroupName);\n    callback();"
    },
    "/^the cache parameter group should be described$/": {
        "Glue Code": "var item = this.data.CacheParameterGroups[0];\n    this.assert.equal(item.CacheParameterGroupName, this.cacheGroupName);\n    callback();"
    },
    "/^the result should contain the Elastic Beanstalk application version$/": {
        "Glue Code": "this.assert.deepEqual(this.data.Applications[0].Versions, [this.appVersion]);\n    callback();"
    },
    "/^the result should contain the Elastic Beanstalk application name$/": {
        "Glue Code": "this.assert.equal(this.data.Applications[0].ApplicationName, this.appName);\n    callback();"
    },
    "/^the list should contain the pipeline$/": {
        "Glue Code": "var id = this.pipelineId;\n    this.assert.contains(this.data.Pipelines, function (pipeline) {\n      return pipeline.Id === id;"
    },
    "/^the pipeline status should be \"([^\"]*)\"$/": {
        "Glue Code": "this.assert.equal(this.data.Pipeline.Status, status);\n    callback();"
    },
    "/^the load balancer should be in the list$/": {
        "Glue Code": "var name = this.data.LoadBalancerDescriptions[0].LoadBalancerName;\n    this.assert.equal(name, this.loadBalancerName);\n    callback();"
    },
    "/^the result should contain the Glacier archive ID$/": {
        "Glue Code": "this.archiveId = this.data.archiveId;\n    callback();"
    },
    "/^the result should contain the same tree hash checksum$/": {
        "Glue Code": "var hash = this.response.request.httpRequest.headers['x-amz-sha256-tree-hash'];\n    this.assert.equal(this.data.checksum, hash);\n    callback();"
    },
    "/^the result should contain the Glacier multi-part upload ID$/": {
        "Glue Code": "this.uploadId = this.data.uploadId;\n    callback();"
    },
    "/^I have an IAM username \"([^\"]*)\"$/": {
        "Glue Code": "this.iamUserArn = '';\n    this.iamUser = this.uniqueName(name);\n    callback();"
    },
    "/^the IAM user should exist$/": {
        "Glue Code": "this.assert.equal(this.data.User.UserName, this.iamUser);\n    callback();"
    },
    "/^the IAM role should exist$/": {
        "Glue Code": "this.assert.compare(this.iamRoleArn.length, '>', 0);\n    callback();"
    },
    "/^the IAM user ARN is in the result$/": {
        "Glue Code": "this.assert.equal(this.data.IamUserArn, this.iamUserArn);\n    callback();"
    },
    "/^the IAM user ARN should be in the result$/": {
        "Glue Code": "this.assert.equal(this.data.UserProfiles[0].IamUserArn, this.iamUserArn);\n    callback();"
    },
    "/^the name should be equal to the IAM username$/": {
        "Glue Code": "this.assert.equal(this.data.UserProfiles[0].Name, this.iamUser);\n    callback();"
    },
    "/^the SSH username should be equal to the IAM username$/": {
        "Glue Code": "this.assert.equal(this.data.UserProfiles[0].SshUsername, this.iamUser);\n    callback();"
    },
    "/^the result should contain the hosted zone ID$/": {
        "Glue Code": "this.hostedZoneId = this.data.HostedZone.Id;\n    callback();"
    },
    "/^the result should contain the change ID$/": {
        "Glue Code": "this.changeInfoId = this.data.ChangeInfo.Id;\n    callback();"
    },
    "/^the result should contain the hosted zone name$/": {
        "Glue Code": "this.assert.equal(this.data.HostedZone.Name, this.zoneName + '.');\n    callback();"
    },
    "/^the change status should be PENDING or INSYNC$/": {
        "Glue Code": "this.assert.match(this.data.ChangeInfo.Status, /^(PENDING|INSYNC)$/);\n    callback();"
    },
    "/^the result should contain multiple nameservers$/": {
        "Glue Code": "this.assert.compare(this.data.DelegationSet.NameServers.length, '>=', 0);\n    this.assert.equal(typeof this.data.DelegationSet.NameServers[0], 'string');\n    callback();"
    },
    "/^the result should contain health check information$/": {
        "Glue Code": "this.healthCheckInfo = this.data.HealthCheck;\n    callback();"
    },
    "/^the result should contain the health check ID$/": {
        "Glue Code": "this.healthCheckId = this.data.HealthCheck.Id;\n    callback();"
    },
    "/^the result should contain the previous health check information$/": {
        "Glue Code": "this.assert.deepEqual(this.data.HealthCheck, this.healthCheckInfo);\n    callback();"
    },
    "/^I am using the S3 \"([^\"]*)\" region$/": {
        "Glue Code": "this.s3 = new this.AWS.S3({region: region"
    },
    "/^I am using the S3 \"([^\"]*)\" region with signatureVersion \"([^\"]*)\"$/": {
        "Glue Code": "this.s3 = new this.AWS.S3({region: region, signatureVersion: signatureVersion"
    },
    "/^I am using the S3 us-east-1 regional endpoint$/": {
        "Glue Code": "this.s3 = new this.AWS.S3({region: 'us-east-1', s3UsEast1RegionalEndpoint: 'regional'"
    },
    "/^the lifecycle configuration should have transition days of (\\d+)$/": {
        "Glue Code": "this.assert.equal(this.data.Rules[0].Transition.Days, 0);\n    callback();"
    },
    "/^the lifecycle configuration should have transition storage class of \"([^\"]*)\"$/": {
        "Glue Code": "this.assert.equal(this.data.Rules[0].Transition.StorageClass, value);\n    callback();"
    },
    "/^the AllowedMethods list should inclue \"([^\"]*)\"$/": {
        "Glue Code": "this.assert.equal(this.data.CORSRules[0].AllowedMethods.sort().join(' '), 'DELETE POST PUT');\n    callback();"
    },
    "/^the AllowedOrigin value should equal \"([^\"]*)\"$/": {
        "Glue Code": "this.assert.equal(this.data.CORSRules[0].AllowedOrigins[0], value);\n    callback();"
    },
    "/^the AllowedHeader value should equal \"([^\"]*)\"$/": {
        "Glue Code": "this.assert.equal(this.data.CORSRules[0].AllowedHeaders[0], value);\n    callback();"
    },
    "/^the ExposeHeader value should equal \"([^\"]*)\"$/": {
        "Glue Code": "this.assert.equal(this.data.CORSRules[0].ExposeHeaders[0], value);\n    callback();"
    },
    "/^the MaxAgeSeconds value should equal (\\d+)$/": {
        "Glue Code": "this.assert.equal(this.data.CORSRules[0].MaxAgeSeconds, parseInt(value));\n    callback();"
    },
    "/^I force path style requests$/": {
        "Glue Code": "this.s3 = new this.AWS.S3({s3ForcePathStyle: true"
    },
    "/^the bucket name should be in the request path$/": {
        "Glue Code": "var path = this.response.request.httpRequest.path.split('/');\n    this.assert.equal(path[1], this.bucket);\n    callback();"
    },
    "/^the bucket name should not be in the request host$/": {
        "Glue Code": "var host = this.response.request.httpRequest.endpoint.host;\n    this.assert.compare(host.indexOf(this.bucket), '<', 0);\n    callback();"
    },
    "/^I generate the MD5 checksum of a (\\d+MB) buffer$/": {
        "Glue Code": "this.uploadBuffer = this.createBuffer(size);\n    this.sentContentMD5 = this.AWS.util.crypto.md5(this.uploadBuffer, 'base64');\n    next();"
    },
    "/^I abort the upload$/": {
        "Glue Code": "this.managedUpload.abort();\n    callback();"
    },
    "/^I receive a \"([^\"]*)\" error$/": {
        "Glue Code": "this.assert.equal(this.error.name, errName);\n    callback();"
    },
    "/^I resume the upload$/": {
        "Glue Code": "var self = this;\n    self.managedUpload.send(function(err, data) {\n      self.error = err;\n      self.data = data;\n      callback();"
    },
    "/^uploadPart should have been called (\\d+) times$/": {
        "Glue Code": "this.assert.equal(this.progressEvents.length, count);\n    callback();"
    },
    "/^the object \"([^\"]*)\" should contain \"([^\"]*)\"$/": {
        "Glue Code": "this.assert.equal(this.data.Body.toString().replace('\\n', ''), contents);\n    next();"
    },
    "/^the HTTP response should have a content length of (\\d+)$/": {
        "Glue Code": "this.assert.equal(this.response.httpResponse.body.length, parseInt(contentLength));\n    next();"
    },
    "/^the streamed data should contain \"([^\"]*)\"$/": {
        "Glue Code": "this.assert.equal(this.result.replace('\\n', ''), data);\n    callback();"
    },
    "/^the streamed data content length should equal (\\d+)$/": {
        "Glue Code": "this.assert.equal(this.result.length, length);\n    callback();"
    },
    "/^I access the URL via HTTP GET$/": {
        "Glue Code": "var world = this;\n    this.data = '';\n    require('https').get(this.signedUrl, function (res) {\n      res.on('data', function (chunk) {\n        world.data += chunk.toString();"
    },
    "/^the HTTP response should equal \"([^\"]*)\"$/": {
        "Glue Code": "this.assert.equal(this.data, data);\n    callback();"
    },
    "/^the HTTP response should contain \"([^\"]*|)\"$/": {
        "Glue Code": "this.assert.match(this.data, data);\n    callback();"
    },
    "/^I put (?:a |an )(empty|small|large|\\d+KB|\\d+MB) buffer to the key \"([^\"]*)\" with progress events$/": {
        "Glue Code": "var self = this;\n    var body = self.createBuffer(size);\n    this.progress = [];\n    var req = this.s3.putObject({Bucket: this.sharedBucket, Key: key, Body: body"
    },
    "/^more than (\\d+) \"([^\"]*)\" event should fire$/": {
        "Glue Code": "this.assert.compare(this.progress.length, '>', numEvents);\n    callback();"
    },
    "/^the \"([^\"]*)\" value of the progress event should equal (\\d+)MB$/": {
        "Glue Code": "this.assert.equal(this.progress[0][prop], mb * 1024 * 1024);\n    callback();"
    },
    "/^the \"([^\"]*)\" value of the first progress event should be greater than (\\d+) bytes$/": {
        "Glue Code": "this.assert.compare(this.progress[0][prop], '>', bytes);\n    callback();"
    },
    "/^I read the key \"([^\"]*)\" with progress events$/": {
        "Glue Code": "var self = this;\n    this.progress = [];\n    var req = this.s3.getObject({Bucket: this.sharedBucket, Key: key"
    },
    "/^I generate the MD5 checksum of \"([^\"]*)\"$/": {
        "Glue Code": "this.sentContentMD5 = this.AWS.util.crypto.md5(data, 'base64');\n    next();"
    },
    "/^the MD5 checksum of the response data should equal the generated checksum$/": {
        "Glue Code": "var receivedContentMD5 = this.AWS.util.crypto.md5(this.data.Body.toString(), 'base64');\n    this.assert.equal(receivedContentMD5, this.sentContentMD5);\n    next();"
    },
    "/^I use signatureVersion \"([^\"]*)\"$/": {
        "Glue Code": "this.s3Slashes = new this.AWS.S3({signatureVersion: signatureVersion"
    },
    "/^I teardown the local proxy server$/": {
        "Glue Code": "this.service = this.s3 = new this.AWS.S3();\n    this.proxyServer.close(callback);"
    },
    "/^the result should include (\\S+) \"([^\"]*)\"$/": {
        "Glue Code": "if (this.data[attr] === undefined) next.fail(\"Missing \" + attr);\n    if (typeof this.data[attr] !== type) next.fail(\"Incorrect type \" + attr);\n    next();"
    },
    "/^the list should contain the topic ARN$/": {
        "Glue Code": "var arn = this.topicArn;\n    this.assert.contains(this.data.Topics, function(topic) {\n      return topic.TopicArn === arn;"
    },
    "/^the result should include a message ID$/": {
        "Glue Code": "this.assert.compare(this.data.MessageId.length, '>', 0);\n    callback();"
    },
    "/^the result should have an MD5 digest of \"([^\"]*)\"$/": {
        "Glue Code": "this.assert.equal(this.data.MD5OfMessageBody, digest);\n    callback();"
    },
    "/^the result should contain an access key ID and secret access key$/": {
        "Glue Code": "this.assert.compare(this.data.Credentials.AccessKeyId.length, '>', 0);\n    this.assert.compare(this.data.Credentials.SecretAccessKey.length, '>', 0);\n    callback();"
    },
    "/^the Supported services list should contain a service with code \"([^\"]*)\"$/": {
        "Glue Code": "this.assert.contains(this.data.services, function (svc) {\n      return svc.code == code;"
    },
    "/^the Supported services list should contain a service with name \"([^\"]*)\"$/": {
        "Glue Code": "this.assert.contains(this.data.services, function (svc) {\n      return svc.name == name;"
    }
}